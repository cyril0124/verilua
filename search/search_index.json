{"config":{"lang":["zh","en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>English Version Status</p> <p>The English version of this documentation is currently being prepared. We are working to translate the existing Chinese content into English as soon as possible. In the meantime, you may refer to the Chinese version of this documentation or use your browser's translation tool to read it.</p> <p>Verilua \u662f\u4e00\u4e2a\u57fa\u4e8e\u4e2d\u95f4\u4ef6\u5206\u5c42\u67b6\u6784\u7684\u786c\u4ef6\u9a8c\u8bc1\u89e3\u8026\u4eff\u771f\u6846\u67b6\uff0c\u7edf\u4e00\u4e86\u5305\u62ec\uff1aHardware Verification Language\uff08<code>HVL</code>\uff09\u3001Hardware Script Engine\uff08<code>HSE</code>\uff09\u3001Waveform Analysis Language\uff08<code>WAL</code>\uff09\u5728\u5185\u7684\u591a\u79cd\u9a8c\u8bc1\u573a\u666f\uff0c\u89e3\u51b3\u4e86\u9a8c\u8bc1\u751f\u6001\u788e\u7247\u5316\u7684\u95ee\u9898\u3002 Verilua \u7684 HVL\u3001HSE\u3001WAL \u80fd\u591f\u8986\u76d6\u786c\u4ef6\u9a8c\u8bc1\u4e2d\u7684\u591a\u4e2a\u6d41\u7a0b\u3002</p> HVL\u3001HSE\u3001WAL \u80fd\u591f\u8986\u76d6\u786c\u4ef6\u9a8c\u8bc1\u4e2d\u7684\u591a\u4e2a\u6d41\u7a0b <p>\u786c\u4ef6\u9a8c\u8bc1\u751f\u6001\u788e\u7247\u5316\u95ee\u9898</p> <p>\u968f\u7740\u5404\u79cd\u5f00\u6e90\u9a8c\u8bc1\u6846\u67b6/\u8bed\u8a00\u7684\u51fa\u73b0\uff0c\u4f7f\u7528\u5404\u79cd\u5f00\u6e90\u7684\u9a8c\u8bc1\u6846\u67b6/\u8bed\u8a00\u5f00\u53d1\u4e0e\u9a8c\u8bc1\u82af\u7247\u9010\u6e10\u6210\u4e3a\u4e3b\u6d41\uff0c\u800c\u73b0\u4ee3\u9ad8\u6027\u80fd\u5904\u7406\u5668\u7684\u9a8c\u8bc1\u4e5f\u8d8a\u6765\u8d8a\u590d\u6742\u5316\uff0c\u5b8c\u6574\u7684\u9a8c\u8bc1\u6d41\u7a0b\u4e2d\u4e0d\u540c\u5c42\u6b21\u4e0d\u540c\u6a21\u5757\u7684\u9a8c\u8bc1\u901a\u5e38\u5c31\u4f1a\u5305\u62ec\u591a\u4e2a\u4e0d\u540c\u7684\u9a8c\u8bc1\u73af\u5883\uff0c\u4e0d\u540c\u7684\u9a8c\u8bc1\u73af\u5883\u4f1a\u6839\u636e\u9a8c\u8bc1\u9700\u6c42\u7684\u4e0d\u540c\u91c7\u7528\u4e0d\u540c\u7684 HVL\uff08Hardware Verification Language\uff09\uff0c\u4f8b\u5982\u5bf9\u4e8e ST\uff08System Test\uff09\uff0c\u6b64\u65f6\u5bf9\u4e8e\u4eff\u771f\u901f\u5ea6\u6709\u66f4\u9ad8\u7684\u8981\u6c42\uff0c\u56e0\u6b64\u4f1a\u91c7\u7528 HVL_A\uff0c\u5bf9\u4e8eUT\uff08Unit Test\uff09\u5219\u5bf9\u9a8c\u8bc1\u6548\u7387\u6709\u66f4\u9ad8\u7684\u8981\u6c42\uff0cUT \u7684\u9a8c\u8bc1\u73af\u5883\u9700\u8981\u80fd\u591f\u5feb\u901f\u8fed\u4ee3\uff0c\u56e0\u6b64\u5c31\u4f1a\u53ef\u80fd\u4f1a\u91c7\u7528 HVL_B\u3002\u4e0d\u540c HVL \u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\u5728\u4e0d\u540c\u7684\u9a8c\u8bc1\u73af\u5883\u4e0b\u96be\u4ee5\u590d\u7528\uff0c\u8fd9\u5c31\u5bfc\u81f4\u4e86\u9a8c\u8bc1\u751f\u6001\u5b58\u5728\u788e\u7247\u5316\u95ee\u9898\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u4e0d\u540c HVL \u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\u5c31\u50cf\u5b64\u7acb\u7684\u5c9b\u5c7f\uff0c\u96be\u4ee5\u5728\u591a\u6837\u5316\u7684\u9a8c\u8bc1\u573a\u666f\u4e2d\u5b9e\u73b0\u6709\u6548\u8fc1\u79fb\u4e0e\u590d\u7528\uff0c\u6700\u7ec8\u5bfc\u81f4\u6574\u4f53\u7684\u9a8c\u8bc1\u6548\u7387\u4f4e\u4e0b\u3002  \u9a8c\u8bc1\u7ec4\u4ef6\u7684\u590d\u7528\u95ee\u9898 </p>"},{"location":"#verilua","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528 Verilua?","text":"<ul> <li>\u4f20\u7edf SystemVerilog + UVM \u82af\u7247\u9a8c\u8bc1\u65b9\u6cd5\u7684\u4e0d\u8db3\uff1a<ul> <li>\u274c \u5b66\u4e60\u66f2\u7ebf\u9661\u5ced\uff1aUVM \u6846\u67b6\u5e9e\u5927\u590d\u6742\uff0c\u7ec4\u4ef6\u7e41\u591a\u4e14\u89c4\u5219\u4e25\u683c\uff0c\u65b0\u624b\u9700\u8981\u8f83\u957f\u65f6\u95f4\u638c\u63e1\uff0c\u5f00\u53d1\u6548\u7387\u8f83\u4f4e</li> <li>\u274c SV \u8bed\u8a00\u5c40\u9650\u6027\uff1aSystemVerilog \u4f5c\u4e3a\u786c\u4ef6\u63cf\u8ff0\u8bed\u8a00\uff0c\u53d7\u9650\u4e8e\u786c\u4ef6\u8bbe\u8ba1\u8bed\u4e49\uff0c\u7f3a\u4e4f\u666e\u901a\u7f16\u7a0b\u8bed\u8a00\uff08\u5982 Python \u6216 C++\uff09\u7684\u7075\u6d3b\u6027\uff0c\u9650\u5236\u4e86\u9a8c\u8bc1\u5f00\u53d1\u7684\u6548\u7387\u548c\u8868\u8fbe\u80fd\u529b\uff08\u4f8b\u5982\u5b9e\u73b0\u4e00\u4e2a\u6570\u636e\u5e93\u7684\u6570\u636e\u4fdd\u5b58\u529f\u80fd\uff0c\u53ef\u80fd\u9700\u8981 SV -&gt; DPIC -&gt; SV \u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\uff09</li> </ul> </li> <li>Cocotb \u7b49\u6846\u67b6\uff1f<ul> <li>\u2705 Cocotb \u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u57fa\u4e8e Python \u7684\u786c\u4ef6\u9a8c\u8bc1\u6846\u67b6\uff0c\u5141\u8bb8\u7528\u6237\u4f7f\u7528 Python \u8bed\u8a00\u7f16\u5199\u9a8c\u8bc1\u5e73\u53f0\uff0c\u57fa\u4e8e coroutine\uff08\u534f\u7a0b\uff09\u5b9e\u73b0\u7c7b\u4f3c SV \u4e2d\u7684\u5e76\u53d1\u63a7\u5236\uff0c\u9002\u7528\u4e8e\u786c\u4ef6\u9a8c\u8bc1\u573a\u666f</li> <li>\u2705 Cocotb \u5728\u5f00\u6e90\u793e\u533a\u4e2d\u5e7f\u6cdb\u4f7f\u7528\uff0c\u6210\u719f\u4e14\u7a33\u5b9a\uff0c\u5e76\u4e14\u80fd\u4f7f\u7528 Python \u7684\u5f3a\u5927\u7684\u7b2c\u4e09\u65b9\u5e93\u751f\u6001</li> </ul> </li> <li> <p>\u4f46\u662f Cocotb \u5e76\u4e0d\u9002\u5408\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u4f7f\u7528\uff1a</p> <ul> <li>\u274c \u56e0\u4e3a\u91c7\u7528 Python\uff0c\u5b58\u5728\u6027\u80fd\u95ee\u9898\uff0cPython \u51e0\u4e4e\u662f\u6700\u6162\u7684\u811a\u672c\u8bed\u8a00\u4e4b\u4e00\uff0c\u7f16\u5199\u590d\u6742\u7684\u9a8c\u8bc1\u73af\u5883\u7684\u65f6\u5019\uff0c\u8fd9\u79cd\u6027\u80fd\u95ee\u9898\u4f1a\u5f71\u54cd\u9a8c\u8bc1\u6548\u7387</li> <li>\u274c Cocotb \u7f16\u5199\u7684\u786c\u4ef6\u9a8c\u8bc1\u7ec4\u4ef6\u65e0\u6cd5\u590d\u7528\uff08\u5728\u5176\u4ed6\u975e Cocotb \u7684\u9a8c\u8bc1\u5e73\u53f0\u4e2d\u4f7f\u7528\uff09\uff0c\u53ea\u80fd\u5728\u81ea\u5df1\u7684\u6846\u67b6\u4e0b\u4f7f\u7528\uff0c\u9694\u79bb\u7684\u9a8c\u8bc1\u751f\u6001\u4f7f\u5f97\u56e2\u961f\u96be\u4ee5\u4e0e\u884c\u4e1a\u4e3b\u6d41\u9a8c\u8bc1\u5de5\u5177\u94fe\u65e0\u7f1d\u5bf9\u63a5</li> </ul> </li> <li> <p>Verilua \u7684\u7279\u70b9</p> <ul> <li>\u2705 \u4f7f\u7528 Lua \u8bed\u8a00\u8fdb\u884c\u786c\u4ef6\u9a8c\u8bc1\uff0cLua \u8bed\u8a00\u7b80\u5355\u6613\u5b66\uff0c\u529f\u80fd\u5b8c\u6574\uff0c\u540c\u6837\u5177\u5907 coroutine \u529f\u80fd\uff0c\u80fd\u591f\u5b9e\u73b0\u5e76\u53d1\u63a7\u5236\u903b\u8f91</li> <li>\u2705 Lua \u7684\u5f00\u53d1\u4f53\u9a8c\u6bd4 SystemVerilog \u66f4\u597d\uff0c\u56e0\u4e3a Lua \u8bed\u8a00\u7684\u4f7f\u7528\u4eba\u6570\u6bd4 SystemVerilog \u591a\u5f88\u591a\uff0c\u5f00\u53d1\u8005\u79ef\u6781\u5f00\u53d1\u5404\u79cd\u63d2\u4ef6\u63d0\u9ad8 Lua \u8bed\u8a00\u7684\u5f00\u53d1\u4f53\u9a8c\uff0c\u4f8b\u5982\uff1aEmmyLuaLs\u3001LuaLS</li> <li>\u2705 \u7531\u4e8e\u91c7\u7528 Lua \u7684 LuaJIT \u5b9e\u73b0\uff08LuaJIT \u51e0\u4e4e\u662f\u6700\u5feb\u7684\u811a\u672c\u8bed\u8a00\u5b9e\u73b0\uff09\uff0c\u56e0\u6b64\u6027\u80fd\u6bd4\u57fa\u4e8e Python \u7684 Cocotb \u66f4\u9ad8\uff0c\u80fd\u591f\u6ee1\u8db3\u786c\u4ef6\u9a8c\u8bc1\u7684\u9700\u8981</li> <li>\u2705 Verilua \u652f\u6301 HVL\uff08Hardware Verification Language\uff09\u3001HSE\uff08Hardware Script Engine\uff09\u3001WAL\uff08Waveform Analysis Language\uff09\u4e09\u79cd\u9a8c\u8bc1\u573a\u666f\uff0c\u80fd\u591f\u5b9e\u73b0\u9a8c\u8bc1\u7ec4\u4ef6\u7684\u8de8\u9a8c\u8bc1\u5e73\u53f0\u3001\u8de8\u573a\u666f\u590d\u7528\uff0c\u89e3\u51b3\u975e SV \u9a8c\u8bc1\u5e73\u53f0\u7684\u9a8c\u8bc1\u7ec4\u4ef6\u590d\u7528\u95ee\u9898\uff08HVL\u3001HSE\u3001WAL \u4e09\u79cd\u573a\u666f\u90fd\u80fd\u4f7f\u7528\u540c\u4e00\u5957\u57fa\u4e8e Verilua \u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff09</li> </ul> </li> <li> <p>Verilua \u7684\u7f3a\u70b9/\u4e0d\u8db3\uff1a</p> <ul> <li>\u274c Verilua \u7684\u5e95\u5c42\u57fa\u4e8e VPI\uff0c\u4e0d\u662f\u76f4\u63a5\u4e0e\u786c\u4ef6\u4fe1\u53f7\u8fdb\u884c\u4ea4\u4e92\uff0c\u800c\u662f\u901a\u8fc7\u4e2d\u95f4\u5c42 API \u7684\u65b9\u5f0f\u8fdb\u884c\uff0c\u6240\u4ee5\u76f8\u6bd4\u4e8e\u7eaf SV \u7684\u9a8c\u8bc1\u73af\u5883\u5b58\u5728\u5929\u7136\u7684\u6027\u80fd\u5dee\u8ddd</li> <li>...</li> </ul> </li> </ul>"},{"location":"#hardware-verification-languagehvl","title":"Hardware Verification Language\uff08<code>HVL</code>\uff09","text":"<p>\u786c\u4ef6\u9a8c\u8bc1\u8bed\u8a00\uff0c\u4e13\u95e8\u7528\u4e8e\u786c\u4ef6\u9a8c\u8bc1\u573a\u666f\uff0c\u80fd\u591f\u63a7\u5236\u9a8c\u8bc1\u5e73\u53f0\u7684\u8fd0\u884c\u6216\u8005\u63cf\u8ff0\u590d\u6742\u7684\u9a8c\u8bc1\u903b\u8f91\uff0c\u6211\u4eec\u719f\u6089\u7684 SystemVerilog \u5c31\u5c5e\u4e8e\u4e00\u79cd HVL\uff08\u5f53\u7136\u4e5f\u5c5e\u4e8e HDL\uff09\uff0c\u7c7b\u4f3c\u5730 Cocotb \u6846\u67b6\u5141\u8bb8\u5c06 Python \u4f5c\u4e3a\u4e00\u79cd HVL\uff0c\u800c Verilator \u80fd\u591f\u5141\u8bb8\u7528\u6237\u5c06 C++ \u4f5c\u4e3a\u4e00\u79cd HVL\u3002</p> <p>\u5728 Verilua \u4e2d\uff0cLua \u8bed\u8a00\u88ab\u9009\u62e9\u7528\u6765\u4f5c\u4e3a Verilua \u7684 HVL\uff08Verilua \u7684\u540d\u5b57\u7531\u6765\uff1aVerification + Lua\uff09\uff0c\u5177\u4f53\u800c\u8a00\u91c7\u7528\u7684\u662f LuaJIT \u8fd9\u4e00 Lua \u5b9e\u73b0\uff0c\u56e0\u4e3a LuaJIT \u662f\u4e00\u4e2a\u6027\u80fd\u66f4\u9ad8\u7684 Lua \u5b9e\u73b0\uff0c\u5e76\u4e14\u652f\u6301 JIT \u7f16\u8bd1\uff0c\u8fd9\u80fd\u591f\u4e3a Verilua \u63d0\u4f9b\u66f4\u597d\u7684 HVL \u6027\u80fd\u3002Verilua \u5728 LuaJIT \u7684\u57fa\u7840\u4e0a\u6784\u9020\u4e86\u4e00\u4e2a DSL\uff08Domain Specific Language\uff09\uff0c\u4ee5\u65b9\u4fbf\u7528\u6237\u80fd\u591f\u4f7f\u7528 Lua \u8bed\u8a00\u6765\u8fdb\u884c\u786c\u4ef6\u9a8c\u8bc1\u4e1a\u52a1\u4ee3\u7801\u7684\u7f16\u5199\uff0c\u4ece\u800c\u80fd\u591f\u4f7f\u7528 Lua \u8bed\u8a00\u4f5c\u4e3a\u4e00\u79cd HVL\u3002</p>"},{"location":"#hardware-script-enginehse","title":"Hardware Script Engine\uff08<code>HSE</code>\uff09","text":"<p>\u811a\u672c\u5f15\u64ce\uff08Script Engine, SE\uff09\u4f5c\u4e3a\u4e00\u79cd\u52a8\u6001\u4ee3\u7801\u6267\u884c\u73af\u5883\uff0c\u5728\u6d4f\u89c8\u5668\u548c\u6e38\u620f\u5f00\u53d1\u4e2d\u5f97\u5230\u4e86\u5e7f\u6cdb\u5e94\u7528\uff0c\u4f8b\u5982\u6d4f\u89c8\u5668\u901a\u8fc7 JavaScript SE \u6269\u5c55\u529f\u80fd\uff0c\u6e38\u620f\u5f00\u53d1\u5219\u5e38\u5d4c\u5165 Lua SE \u4ee5\u652f\u6301\u7528\u6237\u7f16\u5199\u63d2\u4ef6\u3002Verilua \u5c06\u8fd9\u4e00\u6982\u5ff5\u6269\u5c55\u5230\u4e86\u786c\u4ef6\u4eff\u771f\u4e2d\uff0c\u63d0\u51fa\u4e86 Hardware Script Engine\uff08HSE\uff09\u3002\u4f8b\u5982\u5728\u786c\u4ef6\u4eff\u771f\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u7ecf\u5e38\u4f1a\u6709\u52a8\u6001\u6253\u5370\u67d0\u4e9b\u4fe1\u53f7\u7684 log \u6216\u8005\u9700\u8981\u52a8\u6001\u7edf\u8ba1\u67d0\u4e9b\u4fe1\u53f7\u7684\u6027\u80fd\u4e8b\u4ef6\u7684\u9700\u6c42\uff0c\u4f20\u7edf\u7684\u505a\u6cd5\u901a\u5e38\u662f\u4fee\u6539 RTL \u4ee3\u7801\u5411\u5176\u4e2d\u4e34\u65f6\u63d2\u5165\u76f8\u5173\u4e1a\u52a1\u4ee3\u7801\uff08\u5982 print \u8bed\u53e5\uff09\u6765\u5b9e\u73b0\u8fd9\u4e9b\u529f\u80fd\uff0c\u4f46\u662f\u4e8b\u5b9e\u4e0a\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u52a8\u6001\u7684 SE \u6765\u5b9e\u73b0\uff0c\u4e5f\u5c31\u662f\u5728 RTL \u4eff\u771f\u7684\u65f6\u5019\u5d4c\u5165\u4e00\u4e2a Lua SE\uff0c\u5e76\u4e14\u5728 SE \u4e2d\u53ef\u4ee5\u901a\u8fc7 VPI \u8bbf\u95ee\u6240\u6709RTL \u4fe1\u53f7\u4fe1\u606f\uff0c\u5e76\u53ef\u4ee5\u4f7f\u7528 Lua \u6765\u7f16\u5199\u52a8\u6001\u7684\u4ee3\u7801\u4ee5\u5e94\u5bf9\u65f6\u523b\u53d8\u5316\u7684\u9700\u6c42\u3002</p> <p>HSE \u5e95\u5c42\u7684\u63a5\u53e3\u57fa\u4e8e VPI\uff08Verilog Procudural Interface\uff09\uff0c\u7531\u4e8e VPI \u7684\u901a\u7528\u6027\uff08\u51e0\u4e4e\u6240\u6709\u7684\u786c\u4ef6\u4eff\u771f\u5668\u90fd\u652f\u6301 VPI\uff09\uff0c\u56e0\u6b64 HSE \u80fd\u591f\u4f7f\u5f97 Verilua \u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\u5728\u975e Verilua \u7684\u4efb\u4f55\u652f\u6301 VPI \u7684\u9a8c\u8bc1\u73af\u5883\u4e2d\u4f7f\u7528\u3002\u56e0\u6b64 HSE \u662f Verilua \u4e2d\u5b9e\u73b0\u8de8\u73af\u5883\u9a8c\u8bc1\u7ec4\u4ef6\u590d\u7528\u7684\u5173\u952e\u3002\u5f97\u76ca\u4e8e Verilua \u7684\u89e3\u8026\u6846\u67b6\u8bbe\u8ba1\uff0cHSE \u80fd\u591f\u590d\u7528 HVL \u4e2d\u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u7528\u6237\u5728 HVL \u573a\u666f\u4e0b\u7f16\u5199\u4e86\u4e00\u7cfb\u5217\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff08\u4f8b\u5982 Monitor\u3001Scoreboard\uff09\uff0c\u90a3\u4e48\u5728 HSE \u4e2d\u662f\u53ef\u4ee5\u76f4\u63a5\u62ff\u8fc7\u6765\u590d\u7528\u7684\uff0c\u8fd9\u4f7f\u5f97 Verilua \u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\u5177\u6709\u66f4\u597d\u7684\u590d\u7528\u6027\u3002</p>"},{"location":"#waveform-analysis-languagewal","title":"Waveform Analysis Language\uff08<code>WAL</code>\uff09","text":"<p>WAL \u7684\u6982\u5ff5\u6700\u65e9\u4e8e 2022 \u5e74\u7531 Lucas Klemmer \u7b49\u4eba\u7684\u4e00\u7bc7\u8bba\u6587\u63d0\u51fa\uff08github \u4ed3\u5e93\uff0c\u540e\u7eed\u6807\u8bb0\u4e3a <code>lisp-wal</code>\uff09\uff0c\u5176\u57fa\u672c\u601d\u60f3\u662f\u5229\u7528\u7f16\u7a0b\u8bed\u8a00\u81ea\u52a8\u5316\u6ce2\u5f62\u5206\u6790\uff0c\u4e0d\u540c\u4e8e lisp-wal \u4f7f\u7528 lisp \u8bed\u8a00\u5b9e\u73b0\u4e86 WAL\uff0cVerilua \u91c7\u7528\u4e86 Lua \u8bed\u8a00\u5b9e\u73b0\u4e86 WAL\uff0c\u5e76\u4e14\u7531\u4e8e\u5e95\u5c42\u5b9e\u73b0\u7684\u4e0d\u540c\uff0cVerilua \u7684\u6027\u80fd\u6bd4 lisp-wal \u66f4\u597d\uff0c\u4e14\u652f\u6301\u7684\u6ce2\u5f62\u683c\u5f0f\u66f4\u591a\uff08\u5305\u62ec VCD\u3001FST\u3001FSDB\uff0c\u800c lisp-wal \u53ea\u652f\u6301 VCD\u3001FST\uff09\uff0c\u56e0\u6b64\u66f4\u52a0\u9002\u5408\u8f83\u5927\u89c4\u6a21\u7684\u6ce2\u5f62\u5206\u6790\u573a\u666f\u3002</p> <p>\u7531\u4e8e WAL \u5c5e\u4e8e Verilua \u7684\u5176\u4e2d\u4e00\u79cd\u4f7f\u7528\u573a\u666f\uff0c\u56e0\u6b64 WAL \u573a\u666f\u4e0b\u4e5f\u80fd\u591f\u590d\u7528 HVL\u3001HSE \u4e2d\u4f7f\u7528\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff0c\u8fd9\u79cd\u590d\u7528\u6027\u6781\u5927\u5730\u63d0\u9ad8\u4e86\u6ce2\u5f62\u5206\u6790\u6548\u7387\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u590d\u7528\u6765\u51cf\u5c11\u91cd\u590d\u5f00\u53d1\u7684\u6210\u672c\u3002</p>"},{"location":"#verilua_1","title":"Verilua \u67b6\u6784\u6982\u89c8","text":"<p>Verilua \u7684\u89e3\u8026\u6846\u67b6\u4e2d\uff0c\u5206\u4e3a Frontend\u3001Kernel\u3001Backend \u4e09\u4e2a\u5c42\u6b21\uff1a</p> <ul> <li>Frontend \u8868\u793a\u7684\u662f\u7528\u6237\u7684\u4e1a\u52a1\u4ee3\u7801\uff1b</li> <li>Kernel \u5219\u5305\u542b\u4e86 Scheduler\u3001Handles \u7b49 DSL \u7684\u6838\u5fc3\u7ec4\u4ef6\u4ee5\u53ca Verilua \u7684\u8fd0\u884c\u65f6\u73af\u5883\u7b49\uff1b</li> <li>Backend \u5bf9\u4e8e HVL\u3001HSE \u8868\u793a\u7684\u662f\u5177\u4f53\u7684\u786c\u4ef6\u4eff\u771f\u5668\uff0c\u5bf9\u4e8e WAL \u8fd9\u91cc\u6307\u7684\u5219\u662f Verilua \u5f00\u53d1\u7684 <code>wave_vpi</code>\uff0cVerilua \u7f16\u5199\u7684\u7528\u6237\u4ee3\u7801\u53ef\u4ee5\u5728\u8fd9\u4e9b\u4e0d\u540c\u7684 Backend \u4e2d\u4f7f\u7528\uff0c\u4e14\u4e0d\u9700\u8981\u505a\u989d\u5916\u7684\u9002\u914d\u3002</li> </ul> <p>HVL\u3001HSE\u3001WAL \u57fa\u4e8e\u540c\u4e00\u4e2a\u4e2d\u95f4\u4ef6\uff08VPI-ML\uff09\uff0c\u7528\u4e8e\u8fde\u63a5 Kernel \u548c Backend\uff0cVPI-ML \u80fd\u591f\u5728\u5404\u79cd\u786c\u4ef6\u4eff\u771f\u5668\u4e2d\u652f\u6301\uff0c\u8fd9\u662f\u5b9e\u73b0\u89e3\u8026\u4e0e\u590d\u7528\u7684\u5173\u952e\uff0c\u7279\u522b\u5730\u5bf9\u4e8e HSE\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>dummy_vpi</code>\uff08\u540e\u7eed\u5c06\u4f1a\u4ecb\u7ecd\uff09 \u4ee3\u66ff\u8fd9\u4e00\u4e2d\u95f4\u4ef6\u6765\u51cf\u5c11 HSE \u7684\u63a5\u5165\u5f00\u9500\u3002</p> <p>\u4e2d\u95f4\u4ef6\uff08VPI-ML\uff09\u548c Frontend\u3001Kernel\u3001Backend \u7684\u67b6\u6784\u7ec4\u6210\u662f Verilua \u7684\u89e3\u8026\u6846\u67b6\u8bbe\u8ba1\u7684\u57fa\u7840\uff0c\u8fd9\u79cd\u67b6\u6784\u63d0\u4f9b\u4e86\u6700\u5927\u7684\u53ef\u6269\u5c55\u6027\u3002</p> Verilua \u67b6\u6784 <p>Verilua \u7684\u9a8c\u8bc1\u7ec4\u4ef6\u590d\u7528</p> <p>Verilua \u7684\u89e3\u8026\u6846\u67b6\u8bbe\u8ba1\u5141\u8bb8 HVL\u3001HSE\u3001WAL \u7684\u9a8c\u8bc1\u7ec4\u4ef6\u5728\u8fd9\u4e09\u79cd\u573a\u666f\u4e0b\u7684\u4efb\u610f\u4e00\u79cd\u4e2d\u590d\u7528\uff0c\u4efb\u610f\u4e00\u79cd\u573a\u666f\u4e0b\u7f16\u5199\u7684\u9a8c\u8bc1\u7ec4\u4ef6\u65e0\u9700\u8003\u8651\u590d\u7528\u6027\u95ee\u9898\uff0cVerilua \u4ece\u6846\u67b6\u5c42\u9762\u4e0a\u5c31\u652f\u6301\u590d\u7528\u3002\u4ece\u4e0b\u56fe\u53ef\u4ee5\u770b\u5230\u6240\u6709\u76f8\u540c\u989c\u8272\u7684\u7ec4\u4ef6\u90fd\u662f\u540c\u4e00\u4efd\u4ee3\u7801\uff0c\u5b83\u4eec\u5728 HVL\u3001HSE\u3001WAL \u4e09\u4e2a\u573a\u666f\u4e0b\u90fd\u80fd\u65e0\u4fee\u6539\u590d\u7528\u3002  Verilua \u7684\u9a8c\u8bc1\u7ec4\u4ef6\u590d\u7528 </p>"},{"location":"#_1","title":"\u5e94\u7528\u6848\u4f8b","text":"<p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u5c55\u793a Verilua \u4f5c\u4e3a\u786c\u4ef6\u9a8c\u8bc1\u8bed\u8a00\uff08HVL\uff09\u3001\u786c\u4ef6\u4eff\u771f\u5f15\u64ce\uff08HSE\uff09\u548c\u6ce2\u5f62\u5206\u6790\u8bed\u8a00\uff08WAL\uff09\u7684\u7528\u4f8b\uff0c\u5c55\u793a\u5176\u4e0e\u4f20\u7edf\u4eff\u771f\u6846\u67b6\u76f8\u6bd4\u7684\u72ec\u7279\u7279\u6027\u3002\u6211\u4eec\u6240\u6709\u7684\u6848\u4f8b\u5c06\u56f4\u7ed5\u9999\u5c71\u5904\u7406\u5668\u5357\u6e56V3\uff08<code>NHV3</code>\uff09\u7cfb\u5217\u5f00\u6e90\u9ad8\u6027\u80fd\u5904\u7406\u5668\u7684\u7f13\u5b58\u5b50\u7cfb\u7edf\u7684\u9a8c\u8bc1\u548c\u8c03\u8bd5\u8fc7\u7a0b\u5c55\u5f00\u3002</p>"},{"location":"#verilua-as-an-hvl","title":"Verilua as an HVL","text":"<p>\u5728 NHV3 \u4e2d\uff0c\u6211\u4eec\u4f7f\u7528 Verilua \u6784\u5efa\u4e86\u4e00\u4e2a\u9488\u5bf9\u7f13\u5b58\u5b50\u7cfb\u7edf\uff08\u5305\u62ec L2/L3 \u7f13\u5b58\uff09\u7684\u9a8c\u8bc1\u5e73\u53f0\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002Verilua \u4f5c\u4e3a\u4e00\u79cd\u786c\u4ef6\u9a8c\u8bc1\u8bed\u8a00\uff08HVL\uff09\u7684\u5e94\u7528\uff0c\u6d89\u53ca\u591a\u4e2a\u5173\u952e\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff0c\u4f8b\u5982 FakeCache\u3001FakeDMA\u3001TLCAgent\u3001TLULAgent\u3001L2Monitor\u3001L3Monitor \u548c GlobalScoreboard\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u5747\u4f7f\u7528 Lua \u7f16\u5199\u3002\u5176\u4e2d\uff0cFakeCache \u548c FakeDMA \u7ec4\u4ef6\u901a\u8fc7 VPI \u4e0e\u5f85\u6d4b\u8bbe\u8ba1\uff08DUT\uff09\u7684\u4fe1\u53f7\u8fdb\u884c\u4ea4\u4e92\u3002</p> Verilua as an HVL <p>\u5728\u8be5\u9a8c\u8bc1\u5e73\u53f0\u4e2d\uff0c\u6bcf\u4e2a\u7ec4\u4ef6\u90fd\u5177\u5907\u76f8\u5bf9\u72ec\u7acb\u7684\u529f\u80fd\u3002\u4f8b\u5982\uff0cL2/L3 Monitor \u8d1f\u8d23\u4ece L2/L3 \u7f13\u5b58\u4e2d\u8bfb\u53d6\u603b\u7ebf\u4fe1\u53f7\u5e76\u8bb0\u5f55\u65e5\u5fd7\uff0c\u4ee5\u4fbf\u540e\u7eed\u5206\u6790\u3002GlobalScoreboard \u662f\u4e00\u4e2a\u5173\u952e\u7684\u68c0\u67e5\u7ec4\u4ef6\uff0c\u7528\u4e8e\u786e\u4fdd\u7f13\u5b58\u7cfb\u7edf\u5185\u7684\u5168\u5c40\u6570\u636e\u4e00\u81f4\u6027\uff0c\u8fd9\u5bf9\u4e8e\u7ef4\u62a4\u7f13\u5b58\u64cd\u4f5c\u7684\u5b8c\u6574\u6027\u81f3\u5173\u91cd\u8981\u3002</p> <p>\u4f7f\u7528 Lua \u7f16\u5199\u8fd9\u4e9b\u7ec4\u4ef6\u7684\u4e00\u4e2a\u663e\u8457\u4f18\u52bf\u662f\uff0c\u5bf9\u4e1a\u52a1\u903b\u8f91\u7684\u4fee\u6539\u65e0\u9700\u91cd\u65b0\u7f16\u8bd1\u6574\u4e2a\u9a8c\u8bc1\u5e73\u53f0\u3002\u8fd9\u79cd\u80fd\u529b\u4f7f\u5f97\u5e73\u53f0\u80fd\u591f\u5feb\u901f\u8fed\u4ee3\u548c\u5f00\u53d1\uff0c\u4ece\u800c\u63d0\u9ad8\u4e86\u6574\u4f53\u6548\u7387\u3002\u6b64\u5916\uff0cLua \u9ad8\u6548\u4e14\u7075\u6d3b\u7684\u8bed\u6cd5\u6709\u52a9\u4e8e\u521b\u5efa\u9002\u5e94\u6027\u5f3a\u7684\u9a8c\u8bc1\u5e73\u53f0\u3002\u4e0e\u4f20\u7edf\u7684 SystemVerilog \u9a8c\u8bc1\u5e73\u53f0\u76f8\u6bd4\uff0cLua \u7684\u8f7b\u91cf\u7ea7\u548c\u52a8\u6001\u7279\u6027\u4f7f\u5f97\u9a8c\u8bc1\u73af\u5883\u66f4\u6613\u4e8e\u7ef4\u62a4\u548c\u6269\u5c55\u3002</p>"},{"location":"#verilua-as-an-hse","title":"Verilua as an HSE","text":"<p>\u5728\u672c\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c06 Verilua \u4f5c\u4e3a\u786c\u4ef6\u4eff\u771f\u5f15\u64ce\uff08HSE\uff09\u5d4c\u5165\u5230\u73b0\u6709\u7684\u4eff\u771f\u6846\u67b6\u4e2d\u3002\u5728 NHV3 \u7684\u9876\u5c42\u4eff\u771f\u4e2d\uff0cdifftest \u6267\u884c\u6307\u4ee4\u7ea7\u6bd4\u8f83\u4ee5\u786e\u4fdd\u6b63\u786e\u6027\u3002\u5982\u679c L2/L3 \u7f13\u5b58\u4e2d\u5b58\u5728\u9519\u8bef\uff0c\u8be5\u9519\u8bef\u4f1a\u901a\u8fc7\u5904\u7406\u5668\u6d41\u6c34\u7ebf\u4f20\u64ad\uff0c\u5e76\u4ec5\u5728 difftest \u6bd4\u8f83\u67b6\u6784\u5bc4\u5b58\u5668\u65f6\u88ab\u68c0\u6d4b\u5230\u3002\u8fd9\u4f7f\u5f97\u9a8c\u8bc1\u5de5\u7a0b\u5e08\u96be\u4ee5\u5b9a\u4f4d\u9519\u8bef\uff0c\u9700\u8981\u8ffd\u6eaf\u5230\u7f13\u5b58\u5b50\u7cfb\u7edf\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u8017\u65f6\u4e14\u4e25\u91cd\u5f71\u54cd\u8c03\u8bd5\u6548\u7387\u3002</p> <p>\u901a\u8fc7\u5c06 Verilua \u5d4c\u5165\u5230 difftest \u4eff\u771f\u73af\u5883\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u4e4b\u524d\u5f00\u53d1\u7684\u7ec4\u4ef6\uff08\u5982 L2/L3Monitor \u548c GlobalScoreboard\uff09\uff0c\u5e76\u901a\u8fc7 VPI \u5c06\u5b83\u4eec\u8fde\u63a5\u5230 L2/L3 \u7f13\u5b58\u603b\u7ebf\u4fe1\u53f7\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u8fd9\u79cd\u8bbe\u7f6e\u4f7f\u5f97 Monitor \u7ec4\u4ef6\u80fd\u591f\u8bb0\u5f55\u603b\u7ebf\u884c\u4e3a\uff0c\u800c GlobalScoreboard \u5219\u5b9e\u65f6\u68c0\u67e5\u6570\u636e\u6b63\u786e\u6027\u3002\u5982\u679c\u53d1\u751f\u9519\u8bef\uff0c\u4eff\u771f\u4f1a\u7acb\u5373\u505c\u6b62\uff0c\u5e76\u63d0\u4f9b\u9519\u8bef\u4fe1\u606f\uff0c\u4ece\u800c\u5e2e\u52a9\u5feb\u901f\u5c06\u95ee\u9898\u5b9a\u4f4d\u5230 L2/L3 \u7f13\u5b58\u3002</p> Verilua as an HSE <p>\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cVerilua \u7684\u4f7f\u7528\u4fc3\u8fdb\u4e86\u73b0\u6709\u9a8c\u8bc1\u7ec4\u4ef6\u7684\u91cd\u7528\uff0c\u800c\u65e0\u9700\u91cd\u5199\u6216\u63d2\u5165\u8c03\u8bd5\u4ee3\u7801\u7247\u6bb5\u3002\u6574\u4e2a\u8fc7\u7a0b\u662f\u975e\u4fb5\u5165\u5f0f\u7684\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u4e86\u5bf9\u539f\u59cb RTL \u8bbe\u8ba1\u7684\u5e72\u6270\uff0c\u5e76\u907f\u514d\u4e86\u56e0\u9891\u7e41\u4fee\u6539 RTL \u4ee3\u7801\u800c\u5f15\u5165\u65b0\u9519\u8bef\u7684\u98ce\u9669\uff0c\u6700\u7ec8\u63d0\u9ad8\u4e86\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u6548\u7387\u548c\u51c6\u786e\u6027\u3002</p> <p>\u5c06 Verilua \u4f5c\u4e3a HSE \u4f7f\u7528\uff0c\u4f7f\u6211\u4eec\u80fd\u591f\u7075\u6d3b\u5730\u6536\u96c6\u5404\u79cd\u4eff\u771f\u4fe1\u53f7\u4fe1\u606f\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u7b80\u5355\u7684 Lua \u811a\u672c\u53ef\u4ee5\u7edf\u8ba1\u7f13\u5b58\u547d\u4e2d\u7387\u3001\u672a\u547d\u4e2d\u7387\u3001\u8bfb\u5199\u5ef6\u8fdf\u7b49\uff0c\u5e76\u5728\u4eff\u771f\u8fc7\u7a0b\u4e2d\u6253\u5370\u8fd9\u4e9b\u4fe1\u606f\u3002\u8fd9\u79cd\u65b9\u6cd5\u65e0\u9700\u4fee\u6539 RTL \u6765\u6269\u5c55\u4eff\u771f\u529f\u80fd\uff0c\u56e0\u4e3a\u6240\u6709\u529f\u80fd\u90fd\u53ef\u4ee5\u901a\u8fc7 Lua \u811a\u672c\u52a8\u6001\u5b9e\u73b0\u3002</p>"},{"location":"#verilua-as-an-wal","title":"Verilua as an WAL","text":"<p>\u5728\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5c55\u793a\u4e86 Verilua \u4f5c\u4e3a\u6ce2\u5f62\u5206\u6790\u8bed\u8a00\uff08WAL\uff09\u5982\u4f55\u63d0\u9ad8\u6ce2\u5f62\u5206\u6790\u6548\u7387\u3002\u5047\u8bbe\u9a8c\u8bc1\u5de5\u7a0b\u5e08\u5728\u4f7f\u7528\u5176\u4ed6\u9a8c\u8bc1\u5e73\u53f0\u65f6\u9047\u5230\u4e86\u4e00\u4e2a\u9519\u8bef\uff0c\u4f46\u65e0\u6cd5\u5b9a\u4f4d\u95ee\u9898\u3002\u4ed6\u4eec\u53d1\u9001\u7ed9\u6211\u4eec\u4e00\u4e2a\u6ce2\u5f62\u6587\u4ef6\u8fdb\u884c\u8c03\u8bd5\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4ece\u4ed6\u4eec\u63d0\u4f9b\u7684\u6709\u9650\u4fe1\u606f\u5165\u624b\uff0c\u9010\u6b65\u6392\u67e5\u95ee\u9898\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u53ef\u80fd\u975e\u5e38\u8017\u65f6\uff0c\u5c24\u5176\u662f\u5f53\u95ee\u9898\u51fa\u73b0\u5728\u7f13\u5b58\u5b50\u7cfb\u7edf\u7684 L3Cache \u4e2d\u65f6\u3002</p> <p>\u501f\u52a9 Verilua\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 wave_vpi \u540e\u7aef\u5bf9\u6ce2\u5f62\u6587\u4ef6\u8fdb\u884c\u4eff\u771f\u3002\u5728\u6b64\u4eff\u771f\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 L2/L3Monitor\u3001GlobalScoreboard \u4ee5\u53ca\u524d\u6587\u793a\u4f8b\u4e2d\u7684\u5176\u4ed6\u7ec4\u4ef6\uff08\u5982\u4e0b\u56fe\u6240\u793a\uff09\u6765\u5e2e\u52a9\u8bc6\u522b\u9519\u8bef\u5e76\u6536\u96c6\u603b\u7ebf\u4fe1\u606f\u3002\u901a\u8fc7\u5c06\u8fd9\u4e9b\u7ec4\u4ef6\u96c6\u6210\u5230\u6ce2\u5f62\u4eff\u771f\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u80fd\u591f\u9ad8\u6548\u5730\u5206\u6790\u6ce2\u5f62\u3002Monitors \u548c GlobalScoreboard \u4f1a\u5728\u4eff\u771f\u8fc7\u7a0b\u4e2d\u7cbe\u786e\u5b9a\u4f4d\u9519\u8bef\u53d1\u751f\u7684\u4f4d\u7f6e\uff0c\u5e76\u544a\u77e5\u6211\u4eec\u9519\u8bef\u7684\u5177\u4f53\u6765\u6e90\u3002\u8fd9\u79cd\u65b9\u6cd5\u907f\u514d\u4e86\u7e41\u7410\u7684\u6ce2\u5f62\u68c0\u67e5\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u5c06 Verilua \u4f5c\u4e3a WAL \u6765\u5206\u6790\u6ce2\u5f62\u5e76\u91cd\u7528\u9a8c\u8bc1\u7ec4\u4ef6\uff0c\u4ece\u800c\u663e\u8457\u63d0\u5347\u5206\u6790\u6548\u7387\uff0c\u8282\u7701\u8c03\u8bd5\u65f6\u95f4\uff0c\u5e76\u63d0\u9ad8\u751f\u4ea7\u529b\u3002</p> Verilua as an WAL <p>\u5728\u8fd9\u4e9b\u6848\u4f8b\u4e2d\uff0cVerilua \u80fd\u591f\u5229\u7528\u540c\u4e00\u5957\u57fa\u4e8e Lua \u7684\u9a8c\u8bc1\u7ec4\u4ef6\u6765\u5e94\u5bf9 HVL\u3001HSE \u548c WAL \u7684\u4e0d\u540c\u573a\u666f\u3002\u8fd9\u5c55\u793a\u4e86 Verilua \u5f3a\u5927\u7684\u53ef\u91cd\u7528\u6027\uff0c\u5e76\u663e\u8457\u63d0\u5347\u4e86\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u6548\u7387\u3002</p>"},{"location":"getting-started/install/","title":"Install Verilua","text":"<p>\u672c\u8282\u4e3b\u8981\u4ecb\u7ecd\u5982\u4f55\u5b89\u88c5 Verilua\uff0c\u4e3a\u4e86\u786e\u4fdd\u5b89\u88c5\u80fd\u591f\u6210\u529f\uff0c\u9700\u8981\u5168\u7a0b\u786e\u4fdd\u7f51\u7edc\u73af\u5883\u53ef\u7528\u3002</p>"},{"location":"getting-started/install/#prerequisites","title":"Prerequisites","text":"<ul> <li>gcc &gt;= 11.0\uff08\u9700\u8981\u652f\u6301 C++20\uff09</li> <li>\u5b89\u88c5 xmake</li> <li>\u5b89\u88c5 rust</li> <li>\u5b89\u88c5 python3.xx</li> <li> <p>\u6839\u636e\u9700\u6c42\u5b89\u88c5\u4e0b\u5217\u786c\u4ef6\u4eff\u771f\u5668</p> <ul> <li>verilator &gt;= 5.026</li> <li> <p>iverilog</p> <p>iverilog \u7248\u672c\u95ee\u9898</p> <p>\u7531\u4e8e iverilog \u5728 v12_0 release \u7248\u672c \u4e0b\u5b58\u5728 VPI \u7684 cbNextSimTime \u65e0\u9650\u5faa\u73af\u95ee\u9898\uff0c\u4f1a\u5bf9 Verilua \u7684\u591a\u4efb\u52a1\u8c03\u5ea6\u529f\u80fd\u9020\u6210\u5f71\u54cd\u3002\u6240\u4ee5\u9700\u8981\u4f7f\u7528\u76ee\u524d iverilog \u5b98\u65b9\u4ed3\u5e93\u4e0b\u7684 master \u5206\u652f\u7248\u672c\uff08\u6216\u8005\u53eb v13-devel \u7248\u672c, \u7ecf\u8fc7\u6d4b\u8bd5 <code>s20250103</code> \u8fd9\u4e2a tag \u4e5f\u53ef\u4ee5\u7528\uff09\uff0c\u8fd9\u9700\u8981\u81ea\u884c\u7f16\u8bd1\u5b89\u88c5\uff01</p> <p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u9700\u8981\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf <code>IVERILOG_HOME</code> \u6307\u5411\u521a\u521a\u5b89\u88c5\u7684 iverilog \u76ee\u5f55\uff08\u5305\u542b <code>bin</code> \u548c <code>lib</code> \u7684\u76ee\u5f55\uff09\u3002</p> iverilog \u5b89\u88c5\u547d\u4ee4 <pre><code>git clone https://github.com/steveicarus/iverilog.git\ncd iverilog\ngit checkout s20250103\nsh autoconf.sh\n./configure\nmake\nsudo make install\n</code></pre> </li> <li> <p>Synopsys VCS</p> </li> </ul> </li> </ul>"},{"location":"getting-started/install/#_1","title":"\u5b89\u88c5\u6b65\u9aa4","text":"<pre><code>xmake install verilua\n</code></pre> <p>\u5b89\u88c5\u5931\u8d25</p> <p>\u5982\u679c\u5b89\u88c5\u8fc7\u7a0b\u5931\u8d25\u4e86\uff0c\u90a3\u4e48\u53ef\u4ee5\u91cd\u65b0\u6267\u884c\u4e0a\u8ff0\u547d\u4ee4\uff0c\u5c1d\u8bd5\u518d\u6b21\u5b89\u88c5\u3002</p>"},{"location":"getting-started/install/#_2","title":"\u6d4b\u8bd5\u5b89\u88c5\u662f\u5426\u6210\u529f","text":"<p>\u4f7f\u7528 shell \u6253\u5370\u51fa <code>VERILUA_HOME</code> \u8fd9\u4e00\u73af\u5883\u53d8\u91cf\uff0c\u5982\u679c <code>VERILUA_HOME</code> \u6307\u5411\u4e86\u5f53\u524d\u7684 Verilua \u5de5\u7a0b\u76ee\u5f55\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u5b89\u88c5\u6210\u529f\u4e86\u3002 \u4e5f\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u547d\u4ee4\u8fdb\u884c\u66f4\u5b8c\u6574\u7684\u5b89\u88c5\u6d4b\u8bd5\uff1a <pre><code>xmake run test\n</code></pre> \u5982\u679c Verilua \u5b89\u88c5\u6210\u529f\uff0c\u5219\u5e94\u8be5\u4f1a\u770b\u5230 Terminal \u6700\u4e0b\u9762\u6709\u8fd9\u6837\u7684\u8f93\u51fa\uff1a Terminal<pre><code>  _____         _____ _____ \n |  __ \\ /\\    / ____/ ____|\n | |__) /  \\  | (___| (___  \n |  ___/ /\\ \\  \\___ \\\\___ \\ \n | |  / ____ \\ ____) |___) |\n |_| /_/    \\_\\_____/_____/ \n</code></pre></p>"},{"location":"getting-started/install/#todo","title":"\u5e38\u89c1\u5b89\u88c5\u95ee\u9898\uff08TODO\uff1a\uff09","text":""},{"location":"getting-started/install/#lua","title":"\u63a8\u8350\u7684 Lua \u5f00\u53d1\u63d2\u4ef6","text":"<p>\u63a8\u8350\u4f7f\u7528lua-language-server\u4f5c\u4e3a Lua \u7684\u5f00\u53d1\u63d2\u4ef6\uff0c\u53ef\u4ee5\u83b7\u5f97\u66f4\u597d\u7684\u4ee3\u7801\u8865\u5168\u3001\u8df3\u8f6c\u3001\u7c7b\u578b\u6807\u6ce8\u7684\u529f\u80fd\u3002</p>"},{"location":"getting-started/simple_hse_example/","title":"\u4e00\u4e2a\u7b80\u5355\u7684 HSE \u793a\u4f8b","text":""},{"location":"getting-started/simple_hvl_example/","title":"\u4e00\u4e2a\u7b80\u5355\u7684 HVL \u793a\u4f8b","text":"<p>\u672c\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff08\u9488\u5bf9 HVL \u573a\u666f\uff09\u6765\u5c55\u793a Verilua \u7684\u57fa\u672c\u4f7f\u7528\u65b9\u6cd5\u3002</p> <p>\u672c\u8282\u6240\u4f7f\u7528\u7684\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002</p>"},{"location":"getting-started/simple_hvl_example/#0-rtl","title":"0. \u51c6\u5907 RTL \u6587\u4ef6","text":"<p>\u4e0b\u9762\u662f\u672c\u8282\u4e2d\u4f7f\u7528\u5230\u7684 DUT\uff08Design Under Test\uff09\u7684 RTL \u4ee3\u7801\uff0c\u4e3b\u8981\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Counter \u6a21\u5757\u3002 Design.v<pre><code>module Design(\n    input  wire clock,\n    input  wire reset,\n    input  wire inc,\n    output wire [7:0] value\n);\n\nreg [7:0] value_reg;\n\nalways@(posedge clock) begin\n    if (reset) \n        value_reg &lt;= 8'd0;\n    else if (inc == 1'b1) begin\n        value_reg &lt;= value_reg + 1'b1;\n    end \nend\n\nassign value = value_reg;\n\nendmodule\n</code></pre></p>"},{"location":"getting-started/simple_hvl_example/#1-lua","title":"1. \u521b\u5efa\u4e00\u4e2a Lua \u811a\u672c\u6587\u4ef6","text":"<p>\u4e0b\u9762\u662f\u672c\u8282\u4e2d\u4f7f\u7528\u5230\u7684 Lua \u811a\u672c\u6587\u4ef6\uff0c\u5b83\u5c06\u4f1a\u5728 Verilua \u4e2d\u88ab\u8c03\u7528\uff0c\u4ece\u800c\u63a7\u5236\u786c\u4ef6\u4eff\u771f\u7684\u8fc7\u7a0b\uff0c\u8fd9\u7c7b\u4f3c C \u8bed\u8a00\u4e2d\u7684 main \u51fd\u6570\u3002 main.lua<pre><code>verilua \"appendTasks\" {\n    function()\n        -- sim.dump_wave(\"./wave/hello_world.vcd\") -- dump wave file\n\n        dut.clock:negedge()\n        dut.reset:set(1)\n        dut.clock:negedge()\n        dut.reset:set(0)\n        dut.clock:negedge()\n\n        dut.clock:negedge(10, function()\n            print(\"current cycle:\", dut.cycles:get())\n        end)\n\n        -- we recommend using the `chdl()` method to get the `CallableHDL` of the signal which provides higher performance\n        local clock = dut.clock:chdl()\n\n        dut.value:dump() -- dump the value of the signal to the console\n        dut.value:expect(0)\n\n        clock:negedge()\n        dut.inc:set(1)\n        clock:negedge()\n        dut.inc:set(0)\n\n        dut.value:expect(1)\n        dut.value:dump()\n\n        clock:negedge()\n        dut.inc:set(1)\n        clock:negedge()\n        dut.inc:set(0)\n\n        if dut.value:is(2) then\n            print(\"dump_str() =&gt; \", dut.value:dump_str())\n            print(\"get() =&gt; \", dut.value:get())\n        end\n\n        clock:negedge()\n        dut.inc:set(1)\n\n        clock:posedge(10)\n        dut.inc:set(0)\n\n        dut.value:expect(11)\n\n        sim.finish() -- finish the simulation\n    end\n}\n\n-- start task will be called when the simulation starts\ninitial {\n    function()\n        print(\"Simulation started!\")\n    end\n}\n\n-- finish task will be called when the simulation finishes\nfinal {\n    function()\n        print(\"Simulation finished!\")\n    end\n}\n</code></pre></p> \u4e0a\u8ff0\u4ee3\u7801\u7684\u76f8\u5173\u8bed\u6cd5\u89e3\u91ca <ul> <li><code>verilua \"appendTasks\"</code> \u8fd9\u4e2a\u8bed\u53e5\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 task\uff0c Verilua \u4e2d\u6240\u6709\u7684 task \u80fd\u591f\u4ee5\u7c7b\u4f3c\u5e76\u884c\u7684\u65b9\u5f0f\u8fdb\u884c\u8c03\u7528\uff1b</li> </ul> <p>\u66f4\u7b80\u6d01\u7684\u65b9\u5f0f\u521b\u5efa task</p> <p>\u63a8\u8350\u4f7f\u7528 <code>fork</code> \u6765\u521b\u5efa task\uff0c\u4f8b\u5982:  <pre><code>fork {\n    function ()\n        print(\"fork task 1\")\n    end,\n    function ()\n        print(\"fork task 2\")\n    end,\n    -- Other tasks...\n}\n</code></pre> \u8fd9\u91cc\u7684\u6bcf\u4e00\u4e2a function \u5728 Verilua \u7684\u5e95\u5c42\u4e2d\u90fd\u88ab\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e2a\u7684 coroutine \u4ece\u800c\u5141\u8bb8 Verilua \u7684 Scheduler \u8fdb\u884c\u8c03\u5ea6\u3002</p> <ul> <li><code>sim.dump_wave()</code> \u8fd9\u4e00\u51fd\u6570\u7528\u4e8e\u542f\u52a8\u6ce2\u5f62\u6587\u4ef6\u7684\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\u7528\u6765\u6307\u5b9a\u751f\u6210\u7684\u6587\u4ef6\uff0c\u4f8b\u5982 <code>sim.dump_wave(\"./wave.vcd\")</code>\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff08\u6b64\u5904\u7684\u7528\u6cd5\uff09\uff0c\u90a3\u4e48\u9ed8\u8ba4\u751f\u6210\u7684\u6ce2\u5f62\u6587\u4ef6\u540d\u4e3a <code>test.vcd</code></li> </ul> <p>\u6ce2\u5f62\u6587\u4ef6\u7684\u8f93\u51fa\u8def\u5f84</p> <p>\u4f7f\u7528 <code>sim.dump_wave()</code> \u751f\u6210\u7684\u6ce2\u5f62\u6587\u4ef6\u901a\u5e38\u4fdd\u5b58\u5728 <code>./build/&lt;simulator&gt;/&lt;target_name&gt;</code> \u4e2d\uff0c\u5176\u4e2d <code>&lt;simulator&gt;</code> \u662f\u4eff\u771f\u5668\u7684\u540d\u79f0\uff0c<code>&lt;target_name&gt;</code> \u662f target \u7684\u540d\u79f0\u3002\u4f8b\u5982\u5982\u679c\u4f7f\u7528\u7684 simulator \u662f <code>verilator</code>\uff0c\u90a3\u4e48\u5c31\u4f1a\u751f\u6210 <code>./build/verilator/TestDesign</code> \u7684\u6ce2\u5f62\u6587\u4ef6\u3002</p> <ul> <li><code>dut.clock:negedge()</code> \u8fd9\u4e00\u884c\u4e2d\u7684 <code>dut</code> \u7528\u4e8e\u6307\u4ee3\u5f53\u524d\u7684\u4e00\u6574\u4e2a DUT\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>dut.&lt;top_signal&gt;</code> \u6765\u8bbf\u95ee DUT \u7684\u63a5\u53e3\u4fe1\u53f7\uff0c\u8fd9\u91cc\u7684 <code>dut.clock</code> \u5c31\u662f DUT \u7684\u9876\u5c42 clock \u4fe1\u53f7\uff0c\u800c <code>dut.clock:negedge()</code> \u7528\u4e8e\u7b49\u5f85 clock \u4fe1\u53f7\u7684\u4e0b\u964d\u6cbf\uff0c\u4e00\u65e6\u8c03\u7528\u8fd9\u4e00\u51fd\u6570\uff0c\u90a3\u4e48\u5c31\u4f1a\u5c06\u6b64\u65f6\u7684\u51fd\u6570\u63a7\u5236\u6743\u4ea4\u7ed9\u4eff\u771f\u5668\uff0c\u7b49\u5230 clock \u7684\u4e0b\u964d\u6cbf\u5230\u8fbe\u7684\u65f6\u5019\u518d\u901a\u8fc7 Scheduler \u8fd4\u56de\u4ea4\u51fa\u63a7\u5236\u6743\u7684\u4f4d\u7f6e\uff1b </li> </ul> <p>\u5173\u4e8e dut</p> <p> <code>dut</code> \u662f Verilua \u4e2d\u7684\u4e00\u4e2a\u5168\u5c40\u7684 table\uff0c\u4e3b\u8981\u7528\u6765\u63d0\u4f9b\u4e34\u65f6\u7684\u4fe1\u53f7\u8bbf\u95ee\u529f\u80fd\uff0c\u5177\u4f53\u7684\u529f\u80fd\u5c06\u5728\u540e\u7eed\u7684\u6559\u7a0b\u4e2d\u8fdb\u884c\u4ecb\u7ecd\uff08TODO\uff1a\uff09\uff0c\u5982\u679c\u60f3\u7528 <code>dut</code> \u6765\u8bbf\u95ee DUT \u7684\u5185\u90e8\u4fe1\u53f7(\u9876\u5c42\u7684\u63a5\u53e3\u4fe1\u53f7\u4e0d\u9700\u8981)\uff0c\u90a3\u4e48\u9700\u8981\u4ee5 <code>dut.u_&lt;top_module_name&gt;.&lt;internal_signal_name&gt;</code> \u7684\u65b9\u5f0f\u8bbf\u95ee\uff0c\u4f8b\u5982 <code>dut.u_Design.value</code>\uff0c\u8fd9\u91cc\u52a0\u4e0a <code>u_&lt;top_module_name&gt;</code> \u7684\u539f\u56e0\u662f\u56e0\u4e3a Verilua \u5728\u7f16\u8bd1\u7684\u65f6\u5019\u4f1a\u6839\u636e\u6240\u63d0\u4f9b\u7684 RTL \u4fe1\u606f\u81ea\u52a8\u521b\u5efa Testbench\uff0c\u8fd9\u4e2a Testbench \u4e2d\u4f1a\u4f8b\u5316\u5f53\u524d\u7684 DUT\uff0c\u5e76\u5c06\u5176\u53d6\u540d\u4e3a <code>u_Design</code>\u3002\u4e0b\u9762\u662f\u81ea\u52a8\u751f\u6210\u7684 Testbench \u7684\u90e8\u5206\u4ee3\u7801\uff1a tb_top.sv<pre><code>module tb_top;\n    // ...\n\n    reg clock;\n    reg reset;\n\n    initial begin\n        clock = 0;\n        reset = 1;\n    end\n\n    always #10 clock = ~clock;\n\n    // ...\n\n    // -----------------------------------------\n    // reg/wire declaration\n    // -----------------------------------------  \n    reg                  inc          ; // Input\n    reg[7:0]             test         ; // Input\n    wire[7:0]            value        ; // Output\n\n    // ...\n\n    // -----------------------------------------\n    //  DUT module instantiate\n    // ----------------------------------------- \n    Design u_Design (\n        .clock   (clock  ), // direction: In         dataType: logic\n        .reset   (reset  ), // direction: In         dataType: logic\n        .inc     (inc    ), // direction: In         dataType: logic\n        .test    (test   ), // direction: In         dataType: reg[7:0]\n        .value   (value  )  // direction: Out        dataType: logic[7:0\n    ); // u_Design\n\n    // ...\nendmodule\n</code></pre></p> <p>\u5173\u4e8e negedge</p> <p>\u7c7b\u4f3c <code>negedge</code> \u7684\u4eff\u771f\u65f6\u95f4\u63a7\u5236\u51fd\u6570\u8fd8\u6709 <code>posedge</code>\u3001<code>edge</code>\u7b49\uff0c\u5177\u4f53\u7684\u529f\u80fd\u5c06\u5728\u540e\u7eed\u7684\u6559\u7a0b\u4e2d\u8fdb\u884c\u4ecb\u7ecd\uff08TODO\uff1a\uff09\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u4e9b\u51fd\u6570\u53ea\u80fd\u5bf9\u4f4d\u5bbd\u4e3a 1 \u7684\u4fe1\u53f7\u8fdb\u884c\u4f7f\u7528\uff01</p> <ul> <li> <p><code>negedge</code> \u53ef\u4ee5\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u7b49\u5f85\u7684\u6b21\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u56de\u8c03\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\u5728\u6bcf\u6b21\u89e6\u53d1\u4e8b\u4ef6\u7684\u65f6\u5019\u90fd\u4f1a\u88ab\u6267\u884c\u3002     main.lua<pre><code>        dut.clock:negedge(10, function ()\n            print(\"current cycle:\", dut.cycles:get())\n        end)\n</code></pre></p> </li> <li> <p><code>dut.reset = 1</code> \u548c <code>dut.reset = 0</code> \u7528\u4e8e\u4f7f\u7528 dut \u6765\u7ed9 reset \u4fe1\u53f7\u8fdb\u884c\u8d4b\u503c\uff0c\u8fd9\u79cd\u5bf9\u4fe1\u53f7\u8d4b\u503c\u7684\u65b9\u5f0f\u662f\u7acb\u5373\u8d4b\u503c\uff0c\u5e76\u4e14\u53ea\u5bf9\u5c0f\u4e8e 32 bit \u7684\u4fe1\u53f7\u53ef\u4ee5\u8fd9\u4e48\u4f7f\u7528\uff0c\u5982\u679c\u5bf9\u5927\u4e8e 32 bit \u7684\u4fe1\u53f7\u4e5f\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u8fdb\u884c\u8d4b\u503c\u5c31\u4f1a\u53ea\u8d4b\u503c\u4f4e 32 bit\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528 <code>dut.reset:set_imm(1)</code> \u548c <code>dut.reset:set_imm(0)</code> \u6765\u4ee3\u66ff\u8fd9\u4e24\u4e2a\u65b9\u5f0f\uff0c\u8fd9\u91cc\u7684 imm \u662f immediate \u7684\u7f29\u5199\uff0c\u5373\u7acb\u5373\uff08\u5173\u4e8e\u7acb\u5373\u8d4b\u503c\u4e0e\u666e\u901a\u8d4b\u503c\u7684\u533a\u522b\u5c06\u4f1a\u5728\u540e\u7eed\u7684\u6559\u7a0b\u4e2d\u8fdb\u884c\u4ecb\u7ecd\uff0c\u5177\u4f53\u53ef\u4ee5\u770b \u8fd9\u91cc\uff09\u3002</p> </li> <li> <p><code>local clock = dut.clock:chdl()</code> \u7528\u4e8e\u521b\u5efa\u4e00\u4e2a Verilua \u7684 <code>CallableHDL</code> \u5bf9\u8c61\uff08\u4e5f\u53eb <code>chdl</code>\uff09\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u7528\u4e8e\u7ba1\u7406 <code>tb_top.clock</code> \u8fd9\u4e2a\u4fe1\u53f7\uff08<code>dut</code> \u9ed8\u8ba4\u4ee3\u8868\u7684 Testbench \u9876\u5c42\u662f <code>tb_top</code>\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c\u4fee\u6539\uff0c\u4f46\u662f\u4e0d\u5efa\u8bae\u8fd9\u4e48\u505a\uff09\u3002</p> <ul> <li><code>CallableHDL</code> \u5176\u5185\u90e8\u5305\u62ec\u4e86\u591a\u79cd\u4fe1\u606f\uff0c\u5305\u62ec\u4fe1\u53f7\u4f4d\u5bbd\u3001hierarchy path \u7b49\u3002</li> <li>\u8fd8\u5305\u62ec\u4e86\u5404\u79cd\u7528\u4e8e\u63a7\u5236\u4fe1\u53f7\u7684\u65b9\u6cd5\uff0c\u4f8b\u5982\uff1a<code>&lt;chdl&gt;:set(&lt;value&gt;)</code> \u7528\u4e8e\u8bbe\u7f6e\u4fe1\u53f7\u7684\u503c\uff0c<code>&lt;chdl&gt;:get()</code> \u7528\u4e8e\u83b7\u53d6\u4fe1\u53f7\u7684\u503c\uff0c<code>&lt;chdl&gt;:posedge()</code> \u7528\u4e8e\u7b49\u5f85\u4fe1\u53f7\u4e0a\u5347\u6cbf\uff0c\u7b49\u7b49\u3002</li> <li>\u4f7f\u7528 <code>CallableHDL</code> \u5bf9\u8c61\u5bf9\u4fe1\u53f7\u8fdb\u884c\u64cd\u4f5c\u7684\u6027\u80fd\u6bd4\u4f7f\u7528 <code>dut</code> \u8fdb\u884c\u64cd\u4f5c\u65f6\u7684\u6027\u80fd\u66f4\u9ad8\uff08\u5e95\u5c42\u5b9e\u73b0\u7684\u5dee\u5f02\u6240\u5bfc\u81f4\u7684\uff0c<code>dut</code> \u4e3b\u8981\u7528\u4e8e\u4e34\u65f6\u8bbf\u95ee\u4fe1\u53f7\uff0c\u4e0d\u5efa\u8bae\u5728\u6027\u80fd\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\u5927\u91cf\u4f7f\u7528 <code>dut</code> \u7684\u65b9\u5f0f\u8bbf\u95ee\u4fe1\u53f7\uff09\u3002</li> </ul> </li> <li> <p><code>dut.value:dump()</code> \u7528\u4e8e\u5c06\u4fe1\u53f7\u7684\u503c\uff08\u4e3b\u8981\u662f\u4ee5 Hex String \u7684\u5f62\u5f0f\uff09\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b\u4fe1\u53f7\u7684\u503c\uff0c\u6240\u6709\u7684\u4fe1\u53f7\u76f8\u5173\u7684\u64cd\u4f5c\u65b9\u5f0f\u90fd\u6709\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u5305\u62ec\u4e0a\u9762\u63d0\u5230\u7684 <code>CallableHDL</code>\u3002\u6253\u5370\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a     Terminal<pre><code>[tb_top.value] =&gt; 0x01\n</code></pre></p> </li> <li> <p><code>dut.value:dump_str()</code> \u4f1a\u5c06\u539f\u672c<code>dut.value:dump()</code> \u7684\u8f93\u51fa\u7684\u5185\u5bb9\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\u8fdb\u884c\u8fd4\u56de\uff0c\u56e0\u6b64 <code>dut.value:dump()</code> \u4e5f\u7b49\u4ef7\u4e8e <code>print(dut.value:dump_str())</code>\u3002</p> </li> <li> <p><code>dut.value:expect(0)</code> \u7684 <code>expect</code> \u65b9\u6cd5\u7528\u4e8e\u65ad\u8a00\u4fe1\u53f7\u7684\u503c\uff0c\u5982\u679c\u4fe1\u53f7\u7684\u503c\u4e0e\u671f\u671b\u503c\u76f8\u7b49\u5219\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u4f1a\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u505c\u6b62\u4eff\u771f\u3002\u9519\u8bef\u4fe1\u606f\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a     Terminal<pre><code>[tb_top.value] expect =&gt; 10, but got =&gt; 0\n</code></pre>     \u7c7b\u4f3c <code>expect</code> \u7684\u5176\u4ed6\u65b9\u6cd5\u6709 <code>expect_hex_str</code> \u7528\u4e8e\u65ad\u8a00\u4fe1\u53f7\u7684 Hex String \u503c\uff0c<code>expect_dec_str</code> \u7528\u4e8e\u65ad\u8a00\u4fe1\u53f7\u7684 Decimal String \u503c\uff0c<code>expect_bin_str</code> \u7528\u4e8e\u65ad\u8a00\u4fe1\u53f7\u7684 Binary String \u503c\u3002\u4e0b\u9762\u7684\u51e0\u79cd\u5199\u6cd5\u662f\u7b49\u4ef7\u7684\uff1a     <pre><code>dut.value:expect(10)\ndut.value:expect_hex_str(\"a\")\ndut.value:expect_dec_str(\"10\")\ndut.value:expect_bin_str(\"1010\")\n</code></pre></p> </li> <li> <p><code>dut.value:is(2)</code> \u7684 <code>is</code> \u65b9\u6cd5\u7528\u4e8e\u5224\u65ad\u4fe1\u53f7\u7684\u503c\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a\u503c\uff0c\u5982\u679c\u7b49\u4e8e\u5219\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002\u7c7b\u4f3c <code>is</code> \u7684\u65b9\u6cd5\u8fd8\u6709 <code>is_hex_str</code>\u3001<code>is_dec_str</code>\u3001<code>is_bin_str</code>\uff0c\u8fd8\u6709\u4e00\u4e2a <code>is_not</code> \u65b9\u6cd5\uff0c\u5176\u529f\u80fd\u548c <code>is</code> \u76f8\u53cd\uff0c\u4f46\u662f\u5982\u679c\u7b49\u4e8e\u5219\u8fd4\u56de <code>false</code>\uff0c\u5426\u5219\u8fd4\u56de <code>true</code>\u3002</p> </li> <li> <p><code>dut.inc:set(1)</code> \u7684 <code>set</code> \u65b9\u6cd5\u7528\u4e8e\u8bbe\u7f6e\u4fe1\u53f7\u7684\u503c\uff0c\u533a\u522b\u4e8e\u7acb\u5373\u8d4b\u503c\u7684 <code>dut.inc = 1</code>\uff0c<code>set</code> \u65b9\u6cd5\u8fdb\u884c\u8d4b\u503c\u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u8fb9\u6cbf\u5230\u6765\u540e\u624d\u4f1a\u8d4b\u503c\uff08\u66f4\u63a5\u8fd1 RTL \u4ee3\u7801\u7684\u884c\u4e3a\uff09\uff0c\u800c\u7acb\u5373\u8d4b\u503c\u5219\u4f1a\u7acb\u5373\u8d4b\uff08\u5177\u4f53\u53ef\u4ee5\u770b \u8fd9\u91cc\uff09\u3002<code>dut</code> \u7684 <code>set</code> \u65b9\u6cd5\u540c\u6837\u53ea\u80fd\u8d4b\u503c\u6700\u591a 32 bit \u4f4d\u5bbd\u7684\u4fe1\u53f7\u3002</p> </li> <li> <p><code>dut.inc:get()</code> \u7684 <code>get</code> \u65b9\u6cd5\u7528\u4e8e\u83b7\u53d6\u4fe1\u53f7\u7684\u503c\uff0c\u8fd4\u56de\u7684\u503c\u662f\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u503c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f <code>dut</code> \u7684 <code>get</code> \u65b9\u6cd5\u53ea\u80fd\u7528\u6765\u83b7\u5f97\u6700\u591a 32 bit \u4f4d\u5bbd\u4fe1\u53f7\u7684\u503c\u3002</p> </li> <li> <p><code>sim.finish()</code> \u7528\u4e8e\u63a7\u5236\u4eff\u771f\u5668\u7ed3\u675f\u4eff\u771f\u3002</p> </li> <li> <p><code>verilua \"startTask\"</code> \u7528\u4e8e\u6dfb\u52a0\u4eff\u771f\u5f00\u59cb\u6267\u884c\u65f6\u8c03\u7528\u7684\u51fd\u6570\uff0c\u800c <code>verilua \"finishTask\"</code> \u5219\u7528\u4e8e\u6dfb\u52a0\u4eff\u771f\u7ed3\u675f\u6267\u884c\u65f6\u8c03\u7528\u7684\u51fd\u6570\u3002\u8fd9\u4e24\u4e2a\u51fd\u6570\u90fd\u80fd\u6dfb\u52a0\u591a\u4e2a function \u5757\uff0c\u4f8b\u5982\uff1a     <pre><code>verilua \"startTask\" {\n    function ()\n        print(\"Simulation started! 1\")\n    end,\n    function ()\n        print(\"Simulation started! 2\")\n    end,\n    -- ...\n}\n</code></pre></p> </li> </ul> <p></p>"},{"location":"getting-started/simple_hvl_example/#2-xmakelua","title":"2. \u521b\u5efa\u4e00\u4e2a xmake.lua \u6587\u4ef6","text":"<p>Verilua \u7684\u5de5\u7a0b\uff08HVL \u548c WAL \u573a\u666f\uff09\u4f7f\u7528 <code>xmake</code> \u6765\u7ba1\u7406\uff0c\u56e0\u6b64\u9700\u8981\u5148\u5728\u4f60\u7684\u5de5\u7a0b\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a xmake.lua \u6587\u4ef6\u3002xmake \u662f\u4e00\u4e2a\u57fa\u4e8e Lua \u7684\u6784\u5efa\u5de5\u5177\uff08\u7c7b\u4f3c makefile\uff0ccmake \u7b49\uff09\uff0c\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u6784\u5efa\u65b9\u5f0f\u3002\u5173\u4e8e xmake \u7684\u4f7f\u7528\uff0c\u53ef\u4ee5\u53c2\u8003 xmake \u5b98\u65b9\u6587\u6863\u3002\u5173\u4e8e Verilua \u4e2d\u652f\u6301\u7684\u76f8\u5173 xmake \u914d\u7f6e\u53c2\u6570\uff0c\u53ef\u4ee5\u67e5\u770b\u6b64\u5904\u7684\u4ecb\u7ecd\u3002</p> xmake.luaxmake.lua\uff08\u65e0\u6ce8\u91ca\uff09 xmake.lua<pre><code>target(\"TestDesign\", function()                -- target \u7684\u540d\u79f0\u53ef\u4ee5\u968f\u610f\u53d6\n    -- \n    -- Mandatory settings\n    -- \n    -- \u6dfb\u52a0 Verilua \u7684\u89c4\u5219\uff0cxmake \u4e2d\u652f\u6301\u81ea\u5b9a\u4e49 rule\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 xmake \u76f8\u5173\u6587\u6863\n    add_rules(\"verilua\")\n\n    -- \u6dfb\u52a0\u7528\u6765\u6267\u884c\u786c\u4ef6\u4eff\u771f\u7684\u4eff\u771f\u5668\uff0c\u8fd9\u91cc\u4f7f\u7528\u7684\u662f Verilator\uff0c\u8fd8\u53ef\u4ee5\u9009\u62e9 @vcs \u6216 @iverilog\n    add_toolchains(\"@verilator\")\n\n    -- \u6dfb\u52a0 RTL \u6587\u4ef6, \u4e5f\u53ef\u4ee5\u4f7f\u7528\u901a\u914d\u7b26\u8fdb\u884c\u5339\u914d\uff0c\u5982 ./*.v\n    -- \u5982\u679c main.lua \u4e2d\u4f7f\u7528\u5230\u4e86\u5176\u4ed6\u7684 Lua \u6a21\u5757\uff0c\u548c\u6dfb\u52a0 RTL \u6587\u4ef6\u4e00\u6837\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u6dfb\u52a0 Lua \u6587\u4ef6\n    add_files(\"./Design.v\")\n\n    -- \u8bbe\u7f6e RTL \u6587\u4ef6\u4e2d\u7684 top \u5b9e\u4f8b\u540d\u79f0\uff08\u9876\u5c42\u6a21\u5757\u540d\u79f0\uff09\uff0c\u8fd9\u91cc\u5c31\u662f Design\n    set_values(\"cfg.top\", \"Design\") \n\n    -- \u8bbe\u7f6e\u9700\u8981\u6267\u884c\u7684 Lua \u811a\u672c\u6587\u4ef6\uff0c\u4e00\u822c\u53ea\u6709\u4e00\u4e2a\u4e3b\u811a\u672c\uff0c\u8fd9\u91cc\u5c31\u662f\u524d\u9762\u521b\u5efa\u7684 main.lua\n    set_values(\"cfg.lua_main\", \"./main.lua\")\n\n\n    -- \n    -- Optional settings\n    -- \n    -- `XXX`.flags \u7528\u4e8e\u8bbe\u7f6e\u7f16\u8bd1\u65f6\u9009\u9879\uff0c\u5c06\u4f1a\u5728\u7f16\u8bd1\u4eff\u771f\u7684\u65f6\u5019\u88ab\u6dfb\u52a0\u5230\u5bf9\u5e94\u7684\u4eff\u771f\u5668\u7684\u547d\u4ee4\u884c\u4e2d\n    -- \u8fd9\u91cc\u7684 XXX \u53ef\u4ee5\u662f verilator\u3001vcs\u3001iverilog \u7b49\n    -- \u4e0b\u9762\u8fd9\u91cc\u4e3b\u8981\u6dfb\u52a0\u4e86 Verilator \u4e2d\u7528\u4e8e\u8f93\u51fa\u6ce2\u5f62\u6587\u4ef6\u7684\u9009\u9879\n    set_values(\"verilator.flags\", \"--trace\", \"--no-trace-top\")\n\n    -- `XXX`.run_prefix \u7528\u4e8e\u8bbe\u7f6e\u4eff\u771f\u5668\u7684\u8fd0\u884c\u524d\u7f00\uff0c\u5c06\u4f1a\u5728\u8fd0\u884c\u4eff\u771f\u7684\u65f6\u5019\u88ab\u6dfb\u52a0\u5230\u547d\u4ee4\u884c\u7684\u524d\u9762\n    set_values(\"verilator.run_prefix\", \"\")\nend)\n</code></pre> xmake.lua<pre><code>target(\"TestDesign\", function()\n    add_rules(\"verilua\")\n    add_toolchains(\"@verilator\")\n    add_files(\"./Design.v\")\n    set_values(\"cfg.top\", \"Design\") \n    set_values(\"cfg.lua_main\", \"./main.lua\")\n    set_values(\"verilator.flags\", \"--trace\", \"--no-trace-top\")\n    set_values(\"verilator.run_prefix\", \"\")\nend)\n</code></pre>"},{"location":"getting-started/simple_hvl_example/#3","title":"3. \u7f16\u8bd1","text":"<p>\u5728\u521b\u5efa\u597d xmake.lua \u6587\u4ef6\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e86\uff0c\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5373\u53ef\u8fdb\u884c\u7f16\u8bd1: <pre><code>xmake build -P . TestDesign\n</code></pre></p> <ul> <li>\u4e0a\u9762\u7684\u547d\u4ee4\u4e2d\uff0cTestDesign \u662f\u6211\u4eec\u521b\u5efa\u7684 target \u7684\u540d\u79f0\u3002</li> <li>\u5982\u679c RTL \u6587\u4ef6\u6ca1\u6709\u88ab\u518d\u6b21\u4fee\u6539\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u6267\u884c\u4e00\u6b21\u7f16\u8bd1\u5373\u53ef\uff0c\u5982\u679c\u6587\u4ef6\u88ab\u4fee\u6539\u4e86\uff0c\u90a3\u4e48\u9700\u8981\u518d\u6b21\u6267\u884c\u7f16\u8bd1\u3002</li> <li>\u5982\u679c Lua \u6587\u4ef6\uff08\u8fd9\u91cc\u4e3b\u8981\u662f main.lua\uff09\u88ab\u4fee\u6539\u4e86\uff0c\u4e5f\u4e0d\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u56e0\u4e3a Lua \u662f\u89e3\u91ca\u6267\u884c\u7684\u8bed\u8a00\uff0c\u4e0d\u9700\u8981\u7f16\u8bd1\u3002</li> <li><code>-P .</code> \u7528\u4e8e\u6307\u5b9a xmake \u7684\u8fd0\u884c\u8def\u5f84\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u90a3\u4e48 xmake \u4f1a\u81ea\u52a8\u67e5\u627e\u4e0a\u5c42\u7684 xmake.lua \u6587\u4ef6\u3002\u56e0\u6b64\u8fd9\u91cc\u6dfb\u52a0\u4e86 <code>-P .</code> \u53c2\u6570\uff0c\u4ee5\u4fbf\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u6267\u884c xmake\u3002\u5982\u679c\u4f60\u7684\u5de5\u7a0b\u76ee\u5f55\u7684\u4e0a\u4e00\u5c42\u76ee\u5f55\u6ca1\u6709 xmake.lua \u6587\u4ef6\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u8981\u6dfb\u52a0 <code>-P .</code> \u53c2\u6570\u3002</li> <li>\u5982\u679c\u7f16\u8bd1\u6210\u529f\uff0c\u4f1a\u5728\u547d\u4ee4\u884c\u6700\u540e\u8f93\u51fa <code>[100%]: build ok, spent XXXs</code> \u7684\u4fe1\u606f\uff0c\u5982\u679c\u7f16\u8bd1\u5931\u8d25\uff0c\u90a3\u4e48\u4f1a\u663e\u793a error\u3002</li> </ul>"},{"location":"getting-started/simple_hvl_example/#4","title":"4. \u8fd0\u884c\u4eff\u771f","text":"<p>\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u4eff\u771f\uff1a <pre><code>xmake run -P . TestDesign\n</code></pre></p> <p>\u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u4e00\u4e2a\u7b80\u5355\u7684 Verilua \u793a\u4f8b\uff0c\u5e76\u6210\u529f\u8fd0\u884c\u8d77\u4eff\u771f\uff0c\u53ef\u4ee5\u770b\u5230\u7531\u4e8e Verilua \u4f7f\u7528 xmake \u8fdb\u884c\u5de5\u7a0b\u7ba1\u7406\uff0c\u56e0\u6b64\u76f8\u5173\u7684\u6d41\u7a0b\u548c\u7f16\u8bd1\u914d\u7f6e\u90fd\u76f8\u5bf9\u7b80\u5355\uff0c\u63d0\u9ad8\u4e86\u5f00\u53d1\u7684\u6548\u7387\u3002</p>"},{"location":"getting-started/simple_wal_example/","title":"\u4e00\u4e2a\u7b80\u5355\u7684 WAL \u793a\u4f8b","text":"<p>\u672c\u8282\u5c06\u901a\u8fc7\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u5c55\u793a Verilua \u5728 WAL \u573a\u666f\u4e0b\u7684\u57fa\u672c\u4f7f\u7528\u65b9\u5f0f\u3002</p> <p>\u672c\u8282\u6240\u4f7f\u7528\u7684\u793a\u4f8b\u4ee3\u7801\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002</p>"},{"location":"getting-started/simple_wal_example/#1","title":"1. \u751f\u6210\u6ce2\u5f62","text":"<p>\u751f\u6210\u6ce2\u5f62\u4e3b\u8981\u662f\u4f7f\u7528\u5230\u4e86 Verilua \u7684 HVL \u573a\u666f\uff0c\u53ef\u4ee5\u73b0\u67e5\u770b\u8fd9\u91cc\u7684\u5185\u5bb9\u5bf9 HVL \u573a\u666f\u7684\u4f7f\u7528\u6709\u4e00\u4e2a\u57fa\u672c\u7684\u4e86\u89e3\u3002</p>"},{"location":"getting-started/simple_wal_example/#11-rtl","title":"1.1. \u51c6\u5907 RTL \u6587\u4ef6","text":"<p>\u4e0b\u9762\u662f\u672c\u8282\u4f7f\u7528\u5230\u7684 RTL \u4ee3\u7801\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684 Counter \u6a21\u5757\u3002</p> Counter.v<pre><code>module Counter (\n    input wire clock,\n    input wire reset,\n    output wire [7:0] count\n);\n\nreg [7:0] count_reg;\n\ninitial begin\n    count_reg = 0;\nend\n\nalways @(posedge clock) begin\n    if (reset) begin\n        count_reg &lt;= 0;\n    end else if (count_reg &lt; 10) begin\n        count_reg &lt;= count_reg + 1;\n    end else begin\n        count_reg &lt;= 0;\n    end\nend\n\nassign count = count_reg;\n\nendmodule\n</code></pre>"},{"location":"getting-started/simple_wal_example/#12-lua","title":"1.2. \u521b\u5efa\u76f8\u5173 Lua \u811a\u672c\u6587\u4ef6","text":"main.lua<pre><code>local Monitor = require \"Monitor\"\n\nfork {\n    function ()\n        -- dump wave file\n        sim.dump_wave(\"./wave/test.vcd\") -- wave file is stored in ./build/&lt;simulator&gt;/Counter/wave/test.vcd\n\n        -- reset the dut\n        dut.reset = 1\n        dut.clock:posedge(10)\n        dut.reset = 0\n\n        -- create a monitor for monitoring the dut.count signal\n        -- this Monitor will be reused when we simulate the generated wave file using @wave_vpi backend \n        local monitor = Monitor(\"MonitorForGenWave\", dut.count:chdl())\n        monitor:start()\n\n        -- run the simulation for 100 clock cycles\n        dut.clock:posedge(20)\n\n        -- finish the simulation\n        sim.finish()\n    end\n}\n</code></pre> Monitor.lua<pre><code>local class = require \"pl.class\"\n\nlocal f = string.format\n\nlocal Monitor = class()\n\nfunction Monitor:_init(name, signal_chdl)\n    self.name = name\n    self.signal = signal_chdl\nend\n\nfunction Monitor:start()\n    fork {\n        function ()\n            local clock = dut.clock:chdl()\n\n            while true do\n                print(f(\"[Monitor] [%s] %s\", self.name, self.signal:dump_str()))\n                clock:posedge()\n            end\n        end\n    }\nend\n\nreturn Monitor\n</code></pre> <p>\u6b64\u5904\u7684 <code>Monitor.lua</code> \u6a21\u5757\u5c06\u4f1a\u5728\u63a5\u4e0b\u6765\u4eff\u771f\u6ce2\u5f62\u7684\u65f6\u5019\u88ab\u590d\u7528</p>"},{"location":"getting-started/simple_wal_example/#13-xmakelua","title":"1.3. \u521b\u5efa xmake.lua \u6587\u4ef6","text":"<p>\u66f4\u5177\u4f53\u7684 xmake.lua \u7684\u4ecb\u7ecd\u53ef\u4ee5\u53c2\u8003\u8fd9\u91cc\u7684\u5185\u5bb9\u3002</p> xmake.lua<pre><code>target(\"gen_wave\")\n    add_rules(\"verilua\")\n\n    -- \u672c\u8282\u4e2d\u7684\u4f8b\u5b50\u4f1a\u4f7f\u7528 Verilator \u6765\u4f5c\u4e3a HVL \u7684\u4eff\u771f\u540e\u7aef\n    add_toolchains(\"@verilator\")\n\n    add_files(\"./Counter.v\")\n    add_files(\"./Monitor.lua\")\n\n    set_values(\"cfg.lua_main\", \"./main.lua\")\n    set_values(\"cfg.top\", \"Counter\")\n\n    -- Verilator \u9700\u8981\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u53c2\u6570\u6765\u751f\u6210\u6ce2\u5f62\n    set_values(\"verilator.flags\", \"--trace\", \"--no-trace-top\")\n</code></pre>"},{"location":"getting-started/simple_wal_example/#14","title":"1.4. \u7f16\u8bd1","text":"<p>\u5728\u521b\u5efa\u597d xmake.lua \u6587\u4ef6\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e86\uff0c\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5373\u53ef\u8fdb\u884c\u7f16\u8bd1: <pre><code>xmake build -P . gen_wave\n</code></pre></p>"},{"location":"getting-started/simple_wal_example/#15","title":"1.5. \u8fd0\u884c\u4eff\u771f\u751f\u6210\u6ce2\u5f62","text":"<p>\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u4eff\u771f\uff1a <pre><code>xmake run -P . gen_wave\n</code></pre></p> <p>\u4eff\u771f\u751f\u6210\u7684\u6ce2\u5f62\u5c06\u4f1a\u4fdd\u5b58\u5728 <code>./build/verilator/Counter/wave/test.vcd</code> \u4e2d\uff0c\u53ef\u4ee5\u7528 GTKWave \u7b49\u6ce2\u5f62\u6587\u4ef6\u67e5\u770b\u5668\u6253\u5f00\u67e5\u770b\u3002</p> <p> Monitor \u6a21\u5757\u4f1a\u5728\u547d\u4ee4\u884c\u4e2d\u6253\u5370\u51fa\u4e0b\u9762\u7684\u4fe1\u606f\uff1a Terminal<pre><code>[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x00\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x01\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x02\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x03\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x04\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x05\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x06\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x07\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x08\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x09\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x0a\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x00\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x01\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x02\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x03\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x04\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x05\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x06\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x07\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x08\n[Monitor] [MonitorForGenWave] [tb_top.count] =&gt; 0x09\n</code></pre></p>"},{"location":"getting-started/simple_wal_example/#2","title":"2. \u4eff\u771f\u6ce2\u5f62","text":""},{"location":"getting-started/simple_wal_example/#21","title":"2.1. \u51c6\u5907\u6ce2\u5f62\u6587\u4ef6","text":"<p>WAL \u7684\u8f93\u5165\u6587\u4ef6\u4e0d\u662f Verilog/SystemVerilog\uff0c\u800c\u662f\u5177\u4f53\u7684\u6ce2\u5f62\u6587\u4ef6\uff08VCD\u3001FST\u3001FSDB \u7b49\u683c\u5f0f\uff09\uff0c\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u524d\u9762\u521b\u5efa\u7684\u6ce2\u5f62\u6587\u4ef6\u3002</p>"},{"location":"getting-started/simple_wal_example/#22-lua","title":"2.2. \u521b\u5efa\u76f8\u5173 Lua \u811a\u672c\u6587\u4ef6","text":"<p>\u9700\u8981\u6709\u4e00\u4e2a Lua \u811a\u672c\u6765\u4f5c\u4e3a WAL \u6ce2\u5f62\u5206\u6790\u573a\u666f\u7684\u5165\u53e3\u3002</p> main_for_wal.lua<pre><code>local Monitor = require \"Monitor\"\n\nfork {\n    function ()\n        -- Notice: be aware that signals are READ-ONLY when using @wave_vpi backend\n        --         so we can't use the following code to reset the dut\n        -- reset the dut\n        -- dut.reset = 1\n        -- dut.clock:posedge(10)\n        -- dut.reset = 0\n        dut.clock:posedge(10)\n\n        -- create a monitor for monitoring the dut.count signal\n        -- this monitor has been reused\n        local monitor = Monitor(\"MonitorForSimWave\", dut.count:chdl())\n        monitor:start()\n\n        -- run the simulation for 100 clock cycles\n        dut.clock:posedge(20)\n\n        -- finish the simulation\n        sim.finish()\n    end\n}\n</code></pre> <p>\u6ce8\u610f\u8fd9\u91cc <code>main_for_wal.lua</code> \u4e2d\u7684 Monitor \u6a21\u5757\u590d\u7528\u4e86\u524d\u9762\u751f\u6210\u6ce2\u5f62\u65f6\u5019\u7684 <code>Monitor.lua</code></p> <p>WAL \u573a\u666f\u4e0b\uff0c\u4e0d\u5141\u8bb8\u51fa\u73b0\u8d4b\u503c\u7684\u8bed\u53e5\uff0c\u4f8b\u5982 <code>set</code> \u7b49\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u62a5\u9519\uff0c\u76ee\u524d WAL \u573a\u666f\u4e0b\u6240\u6709\u7684\u4fe1\u53f7\u90fd\u662f\u53ea\u8bfb\u7684\uff01</p>"},{"location":"getting-started/simple_wal_example/#23-xmakelua","title":"2.3. \u521b\u5efa xmake.lua \u6587\u4ef6","text":"xmake.lua<pre><code>target(\"sim_wave\")\n    add_rules(\"verilua\")\n\n    -- WAL \u573a\u666f\u4e0b\u8fd9\u91cc\u5fc5\u987b\u662f @wave_vpi\n    add_toolchains(\"@wave_vpi\")\n\n    -- \u8f93\u5165\u6587\u4ef6\u4e0d\u662f Verilog/SystemVerilog\uff0c\u800c\u662f\u6ce2\u5f62\u6587\u4ef6\n    -- \u8fd9\u91cc\u7684\u6ce2\u5f62\u6587\u4ef6\u8def\u5f84\u6307\u5411\u7684\u662f\u524d\u9762\u751f\u6210\u6ce2\u5f62\u65f6\u5019\u7684\u8def\u5f84\n    add_files(\"./build/verilator/Counter/wave/test.vcd\")\n\n    -- \u8fd9\u4e2a\u590d\u7528\u4e86\u524d\u9762\u751f\u6210\u6ce2\u5f62\u65f6\u5019\u521b\u5efa\u7684\u6a21\u5757\n    add_files(\"./Monitor.lua\")\n\n    set_values(\"cfg.lua_main\", \"./main_for_wal.lua\")\n\n    -- \u8bbe\u8ba1\u7684\u9876\u5c42\u8fd8\u662f\u9700\u8981\u624b\u52a8\u6307\u5b9a\n    set_values(\"cfg.top\", \"Counter\")\n</code></pre>"},{"location":"getting-started/simple_wal_example/#24","title":"2.4. \u7f16\u8bd1","text":"<p>\u5728\u521b\u5efa\u597d xmake.lua \u6587\u4ef6\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f00\u59cb\u7f16\u8bd1\u4e86\uff0c\u53ea\u9700\u8981\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5373\u53ef\u8fdb\u884c\u7f16\u8bd1: <pre><code>xmake build -P . sim_wave\n</code></pre></p>"},{"location":"getting-started/simple_wal_example/#25","title":"2.5. \u8fd0\u884c\u4eff\u771f","text":"<p>\u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u4eff\u771f\uff1a <pre><code>xmake run -P . sim_wave\n</code></pre></p> <p>\u6b64\u65f6\u67e5\u770b\u547d\u4ee4\u884c\u8f93\u51fa\u4f1a\u53d1\u73b0 Monitor \u7684\u6a21\u5757\u4f1a\u5728\u547d\u4ee4\u884c\u4e2d\u6253\u5370\u51fa\u4e0b\u9762\u7684\u4fe1\u606f\uff1a</p> Terminal<pre><code>[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x00\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x01\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x02\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x03\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x04\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x05\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x06\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x07\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x08\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x09\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x0a\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x00\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x01\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x02\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x03\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x04\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x05\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x06\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x07\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x08\n[Monitor] [MonitorForSimWave] [tb_top.count] =&gt; 0x09\n</code></pre> <p>\u8fd9\u548c\u524d\u9762\u6211\u4eec\u8fd0\u884c RTL \u4eff\u771f\u65f6\u5019\u7684\u8f93\u51fa\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"how-to-guides/simple_ut_env/","title":"\u642d\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 UT \u73af\u5883","text":"<p>Verilua \u7684\u542f\u52a8\u901f\u5ea6\u5f88\u5feb\uff0c\u5e76\u4e14\u8fd0\u884c\u65f6\u8db3\u591f\u8f7b\u91cf\uff0c\u80fd\u591f\u7528\u6765\u642d\u5efa Unit Test\uff08UT\uff09\u73af\u5883\uff0c\u6d4b\u8bd5\u4e00\u4e9b\u4e2d\u5c0f\u89c4\u6a21\u7684\u786c\u4ef6\u6a21\u5757\u3002</p> <p>\u5728\u672c\u8282\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u57fa\u4e8e Verilua \u642d\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 UT \u73af\u5883\uff0c\u6240\u6709\u7684\u4ee3\u7801\u53ef\u4ee5\u5728\u8fd9\u91cc\u627e\u5230\u3002</p>"},{"location":"how-to-guides/simple_ut_env/#1-ut","title":"1. \u7f16\u5199 UT \u73af\u5883\u4ee3\u7801","text":"<p>\u6211\u4eec\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 UT \u73af\u5883\u4ee3\u7801\uff0c\u5b83\u5c06\u5305\u542b\u4e00\u4e9b\u5b9e\u9645\u9a8c\u8bc1\u4e2d\u8f83\u4e3a\u5e38\u7528\u7684\u51fd\u6570\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u7247\u6bb5:</p> env.lua<pre><code>local clock = dut.clock:chdl()\nlocal reset = dut.reset:chdl()\n\nlocal function posedge(...)\n    clock:posedge(...)\nend\n\nlocal function negedge(...)\n    clock:negedge(...)\nend\n\nlocal function dut_reset(reset_cycles)\n    reset:set_imm(1)\n    clock:posedge(reset_cycles or 10)\n    reset:set_imm(0)\nend\n\nlocal function expect_happen_until(limit_cycles, func)\n    assert(type(limit_cycles) == \"number\")\n    assert(type(func) == \"function\")\n    local ok = clock:posedge_until(limit_cycles, func)\n    assert(ok)\nend\n\nlocal function expect_not_happen_until(limit_cycles, func)\n    assert(type(limit_cycles) == \"number\")\n    assert(type(func) == \"function\")\n    local ok = clock:posedge_until(limit_cycles, func)\n    assert(not ok)\nend\n\nlocal test_case_count = 0\n\nlocal function TEST_SUCCESS()\n    print(\"total_test_cases: &lt;\" .. test_case_count .. \"&gt;\\n\")\n    print(\"&gt;&gt;&gt;TEST_SUCCESS!&lt;&lt;&lt;\")\n\n    local ANSI_GREEN = \"\\27[32m\"\n    local ANSI_RESET = \"\\27[0m\"\n\n    print(ANSI_GREEN .. [[\n  _____         _____ _____ \n |  __ \\ /\\    / ____/ ____|\n | |__) /  \\  | (___| (___  \n |  ___/ /\\ \\  \\___ \\\\___ \\ \n | |  / ____ \\ ____) |___) |\n |_| /_/    \\_\\_____/_____/ \n]] .. ANSI_RESET)\n\n    io.flush()\n    sim.finish()\nend\n\n-- \n-- Test case management\n-- \nlocal function register_test_case(case_name)\n    assert(type(case_name) == \"string\")\n\n    return function(func_table)\n        assert(type(func_table) == \"table\")\n        assert(#func_table == 1)\n\n        assert(type(func_table[1]) == \"function\")\n        local func = func_table[1]\n\n        local new_env = {\n            print = function(...) print(\"|\", ...) end,\n            printf = function(...) io.write(\"|\\t\" .. string.format(...)) end,\n        }\n\n        setmetatable(new_env, { __index = _G })\n        setfenv(func, new_env)\n\n        return function (...)\n            print(string.format([[\n-----------------------------------------------------------------\n| [%d] start test case ==&gt; %s\n-----------------------------------------------------------------]], test_case_count, case_name))\n\n            -- Execute the test case\n            func(...)\n\n            print(string.format([[\n-----------------------------------------------------------------\n| [%d] end test case ==&gt; %s\n-----------------------------------------------------------------]], test_case_count, case_name))\n\n            test_case_count = test_case_count + 1\n        end\n    end\nend\n\nreturn {\n    posedge = posedge,\n    negedge = negedge,\n    dut_reset = dut_reset,\n    expect_happen_until = expect_happen_until,\n    expect_not_happen_until = expect_not_happen_until,\n    register_test_case = register_test_case,\n    TEST_SUCCESS = TEST_SUCCESS,\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u7247\u6bb5\u63d0\u4f9b\u4e86\u5982\u4e0b\u7684\u51fd\u6570\uff1a</p> <ul> <li> <p><code>env.posedge(...)</code> / <code>env.negedge(...)</code></p> <p>\u5bf9\u5168\u5c40\u7684 <code>clock</code> \u8fd9\u4e2a <code>chdl</code> \u7684 <code>posedge</code> \u51fd\u6570\u8fdb\u884c\u5c01\u88c5\uff0c\u5176\u4f7f\u7528\u65b9\u5f0f\u548c <code>&lt;chdl&gt;:posedge(...)</code> / <code>&lt;chdl&gt;:negedge(...)</code> \u662f\u4e00\u6837\u7684\u3002</p> </li> <li> <p><code>env.dut_reset(reset_cycles)</code></p> <p>\u5bf9 DUT \u8fdb\u884c\u590d\u4f4d\uff0c\u5176\u4e2d\u4f1a\u5bf9 reset \u4fe1\u53f7\u8fdb\u884c\u8d4b\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>reset_cycles</code> \u6765\u6307\u5b9a\u590d\u4f4d\u7684\u5468\u671f\u3002</p> </li> <li> <p><code>env.expect_happen_until(limit_cycles, func)</code></p> <p>\u68c0\u67e5 <code>func</code> \u5728 <code>limit_cycles</code> \u5468\u671f\u5185\u662f\u5426\u53d1\u751f\uff0c\u5982\u679c\u53d1\u751f\u5219\u7acb\u5373\u8fd4\u56de\uff0c\u5426\u5219\u4f1a\u89e6\u53d1 <code>assert</code> \u9519\u8bef\uff0c\u8fd9\u5728\u5177\u4f53\u7f16\u5199\u9a8c\u8bc1\u4ee3\u7801\u7684\u65f6\u5019\u6bd4\u8f83\u5e38\u7528\uff0c\u7528\u6765\u68c0\u67e5\u7279\u5b9a\u4fe1\u53f7\u662f\u5426\u5728\u9884\u671f\u65f6\u95f4\u5185\u53d1\u751f\u3002</p> </li> <li> <p><code>env.expect_not_happen_until(limit_cycles, func)</code></p> <p>\u548c <code>env.expect_happen_until(limit_cycles, func)</code> \u4f5c\u7528\u76f8\u53cd\u3002</p> </li> <li> <p><code>env.TEST_SUCCESS()</code></p> <p>\u7528\u6765\u6253\u5370\u4e00\u4e2a\u663e\u773c\u7684\u4fe1\u606f\u5230 Terminal \u4e0a\uff0c\u8868\u793a\u6d4b\u8bd5\u5df2\u7ecf\u6210\u529f\u7ed3\u675f\u3002</p> </li> <li> <p><code>env.register_test_case(case_name)</code></p> <p>\u6ce8\u518c\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u5176\u4e2d <code>case_name</code> \u662f\u6d4b\u8bd5\u7528\u4f8b\u7684\u540d\u79f0\uff0c\u8fd4\u56de\u4e00\u4e2a\u88ab\u6ce8\u518c\u7684\u6d4b\u8bd5\u7528\u4f8b\u51fd\u6570\u3002\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a</p> <pre><code>local env = require \"env\"\n\nlocal some_test_case = env.register_test_case \"name of the test case\" {\n    -- Test case body\n    function ()\n        -- Do something\n    end\n}\n\nfork {\n    function ()\n        env.dut_reset()\n\n        -- Execute the test case\n        some_test_case()\n\n        env.TEST_SUCCESS()\n        sim.finish()\n    end\n}\n</code></pre> </li> </ul> <p>\u901a\u8fc7\u4e0a\u9762\u8fd9\u4e2a\u7b80\u5355\u7684 <code>env.lua</code> \u6a21\u5757\uff0c\u5c31\u80fd\u4e3a UT \u6d4b\u8bd5\u521b\u5efa\u4e00\u4e2a\u7b80\u6613\u7684\u9a8c\u8bc1\u73af\u5883\u3002</p>"},{"location":"how-to-guides/simple_ut_env/#2-ut","title":"2. \u7f16\u5199 UT \u6d4b\u8bd5\u4e3b\u4f53","text":"<p>\u63a5\u4e0b\u6765\u9700\u8981\u7f16\u5199 UT \u7684\u5177\u4f53\u4e1a\u52a1\u4ee3\u7801\uff08\u4e00\u4e2a lua \u6587\u4ef6\uff09\uff0c\u8fd9\u91cc\u540c\u6837\u4ee5\u4e00\u4e2a Counter \u6a21\u5757\u4e3a\u4f8b\uff1a Counter.v<pre><code>module Counter(\n    input  wire clock,\n    input  wire reset,\n    input  wire incr,\n    output wire [7:0] value\n);\n\nreg [7:0] value_reg;\n\nalways@(posedge clock) begin\n    if (reset) \n        value_reg &lt;= 8'd0;\n    else if (incr == 1'b1) begin\n        value_reg &lt;= value_reg + 1'b1;\n    end \nend\n\nassign value = value_reg;\n\nendmodule\n</code></pre></p> <p>\u90a3\u4e48\u4e0a\u8ff0\u8bbe\u8ba1\u7684 UT \u4e1a\u52a1\u4ee3\u7801\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a test_counter.lua<pre><code>local env = require \"env\"\n\nlocal test_value_incr = env.register_test_case \"test value incr\" {\n    function ()\n        env.dut_reset()\n\n        env.posedge()\n            dut.incr:set(1)\n\n        env.posedge()\n            dut.value:expect(0)\n\n        env.posedge()\n            dut.value:expect(1)\n            dut.incr:set(0)\n\n        env.posedge()\n            dut.value:expect(2)\n\n        env.posedge()\n            dut.value:expect(2)\n    end\n}\n\nlocal test_value_no_incr = env.register_test_case \"test value no incr\" {\n    function ()\n        env.dut_reset()\n\n        env.posedge()\n            dut.incr:set(0)\n\n        env.expect_not_happen_until(1000, function ()\n            return dut.value:is_not(0)\n        end)\n    end\n}\n\nlocal test_value_overflow = env.register_test_case \"test value overflow\" {\n    function ()\n        env.dut_reset()\n\n        env.posedge()\n            dut.incr:set(1)\n\n        env.expect_happen_until(300, function()\n            return dut.value:get() == 255\n        end)\n    end\n}\n\nfork {\n    function ()\n        env.dut_reset()\n\n        test_value_incr()\n        test_value_no_incr()\n        test_value_overflow()\n\n        env.TEST_SUCCESS()\n        sim.finish()\n    end\n}\n</code></pre></p> <p>\u8fd9\u91cc\u6211\u4eec\u5199\u4e86\u4e09\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff1a\uff081\uff09test value incr\uff0c\uff082\uff09test value no incr\uff0c\uff083\uff09test value overflow\u3002\u5e76\u5728 <code>fork</code> \u4e2d\u542f\u52a8\u4e86\u8fd9\u4e09\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002</p>"},{"location":"how-to-guides/simple_ut_env/#3-xmakelua","title":"3. \u7f16\u5199 xmake.lua","text":"<p>\u5bf9\u4e8e HVL \u573a\u666f\uff0c\u6211\u4eec\u90fd\u9700\u8981\u7f16\u5199\u4e00\u4e2a xmake.lua \u6587\u4ef6\u6765\u7ba1\u7406\u6574\u4e2a\u5de5\u7a0b\u3002</p> xmake.lua<pre><code>---@diagnostic disable\n\ntarget(\"test_counter\")\n    add_rules(\"verilua\")\n    if os.getenv(\"SIM\") == \"iverilog\" then\n        add_toolchains(\"@iverilog\")\n    elseif os.getenv(\"SIM\") == \"vcs\" then\n        add_toolchains(\"@vcs\")\n    else\n        add_toolchains(\"@verilator\")\n    end\n\n    add_files(\"env.lua\")\n    add_files(\"Counter.v\")\n\n    set_values(\"cfg.lua_main\", \"./test_counter.lua\")\n    set_values(\"cfg.top\", \"Counter\")\n</code></pre>"},{"location":"how-to-guides/simple_ut_env/#4","title":"4. \u6267\u884c\u6d4b\u8bd5","text":"<p>\u6267\u884c\u4e0b\u9762\u7684\u547d\u4ee4\u5373\u53ef\u7f16\u8bd1\u5e76\u8fdb\u884c\u6d4b\u8bd5\uff0c\u8fd9\u91cc\u5982\u679c RTL \u4ee3\u7801\u6ca1\u6709\u4fee\u6539\u5219\u53ea\u9700\u8981\u7f16\u8bd1\u4e00\u6b21\uff0c\u4fee\u6539 Lua \u4ee3\u7801\u5e76\u4e0d\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3002</p> <pre><code>xmake build -P . test_counter\n\nxmake run -P . test_counter\n</code></pre> <p>\u5982\u679c\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u90fd\u6d4b\u8bd5\u6210\u529f\uff0c\u90a3\u4e48\u5c31\u4f1a\u6253\u5370\u4e00\u4e2a\u6210\u529f\u7684\u63d0\u793a\u4fe1\u606f\uff0c\u5e76\u8c03\u7528 <code>sim.finish()</code> \u6765\u7ed3\u675f\u4eff\u771f\u3002\u547d\u4ee4\u884c\u6253\u5370\u7684\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a Terminal<pre><code>-----------------------------------------------------------------\n| [0] start test case ==&gt; test value incr\n-----------------------------------------------------------------\n-----------------------------------------------------------------\n| [0] end test case ==&gt; test value incr\n-----------------------------------------------------------------\n-----------------------------------------------------------------\n| [1] start test case ==&gt; test value no incr\n-----------------------------------------------------------------\n-----------------------------------------------------------------\n| [1] end test case ==&gt; test value no incr\n-----------------------------------------------------------------\n-----------------------------------------------------------------\n| [2] start test case ==&gt; test value overflow\n-----------------------------------------------------------------\n-----------------------------------------------------------------\n| [2] end test case ==&gt; test value overflow\n-----------------------------------------------------------------\ntotal_test_cases: &lt;3&gt;\n\n&gt;&gt;&gt;TEST_SUCCESS!&lt;&lt;&lt;\n  _____         _____ _____ \n |  __ \\ /\\    / ____/ ____|\n | |__) /  \\  | (___| (___  \n |  ___/ /\\ \\  \\___ \\\\___ \\ \n | |  / ____ \\ ____) |___) |\n |_| /_/    \\_\\_____/_____/ \n</code></pre></p>"},{"location":"how-to-guides/write_reusable_component/","title":"\u7f16\u5199\u53ef\u590d\u7528\u7684\u9a8c\u8bc1\u7ec4\u4ef6","text":"<p>Verilua \u63d0\u5021\u7f16\u5199\u53ef\u590d\u7528\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff0c\u4ee5\u4fbf\u5728\u591a\u4e2a\u573a\u666f\uff08HVL\u3001HSE\u3001WAL\uff09\u4e0b\u590d\u7528\uff0c\u4f8b\u5982\u5e38\u89c1\u7684 Monitor \u7ec4\u4ef6\uff0c\u6216\u8005 Scoreboard \u7ec4\u4ef6\u3002</p>"},{"location":"how-to-guides/write_reusable_component/#bundle","title":"\u4f7f\u7528 Bundle \u7f16\u5199\u9a8c\u8bc1\u7ec4\u4ef6","text":"<p>\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0cVerilua \u4e2d\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u6570\u636e\u7ed3\u6784 \u6765\u548c\u786c\u4ef6\u4fe1\u53f7\u8fdb\u884c\u4ea4\u4e92\uff0c\u4f46\u662f\u5728\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u901a\u5e38\u9700\u8981\u6307\u5b9a\u4e00\u4e9b\u548c\u5f53\u524d\u8bbe\u8ba1\u4fe1\u53f7\u76f8\u5173\u7684\u4fe1\u606f\u4ece\u800c\u624d\u80fd\u6784\u5efa\u51fa\u6765\uff0c\u4f8b\u5982 hierarchy path\u3001signal name \u7b49\u3002</p> <p>\u9488\u5bf9\u8fd9\u4e24\u4e2a\u4fe1\u606f\uff0c\u4e0d\u540c\u7684 DUT \u4e0b\u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\uff0c\u6709\u53ef\u80fd\u662f hierarchy path \u4e0d\u540c\uff0c\u4f8b\u5982\u5728 DUT_A \u4e2d\uff0chierarchy path \u662f <code>tb_top.path.to.mod</code>\uff0c\u5728 DUT_B \u4e2d\u662f <code>tb_top.another.path.to.mod</code>\uff0c\u4e5f\u6709\u53ef\u80fd\u662f signal name \u4e0d\u540c\uff0c\u4f8b\u5982\u5728 DUT_A \u4e2d\uff0csignal name \u662f <code>valid</code> \u548c <code>value</code>\uff0c\u5728 DUT_B \u4e2d\u662f <code>vld</code> \u548c <code>value_2</code>\u3002\u5047\u8bbe\u6211\u4eec\u7684\u4e00\u4e2a\u9a8c\u8bc1\u7ec4\u4ef6 <code>Monitor</code> \u9700\u8981\u63a5\u6536\u4e00\u4e2a <code>Bundle</code> \u6765\u4f5c\u4e3a\u4fe1\u53f7\u8f93\u5165\u6765\u76d1\u6d4b\u524d\u9762\u63d0\u5230\u7684\u8fd9\u4e24\u4e2a\u4fe1\u53f7\uff0c\u4f5c\u7528\u662f\u5f53 <code>valid</code> \u6216 <code>vld</code> \u6709\u6548\u7684\u65f6\u5019\uff0c\u6253\u5370\u51fa\u5f53\u524d\u7684 <code>value</code> \u6216 <code>value_2</code> \u7684\u503c\uff1a</p> Monitor.lua<pre><code>local class = require \"pl.class\"\nlocal texpect = require \"TypeExpect\"\n\nlocal Monitor = class()\n\nfunction Monitor:_init(signals)\n    texpect.expect_bdl(signals, \"signals\")\n\n    self.signals = signals\nend\n\nfunction Monitor:sample(cycles)\n    if self.signals.valid:is(1) then\n        print(\"[Monitor] get value =&gt;\", self.signals.value:get_hex_str(), \"at\", cycles)\n    end\nend\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u7684\u76f8\u5173\u8bf4\u660e\u5982\u4e0b\uff1a</p> <ul> <li> <p><code>local class = require \"pl.class\"</code> \u8fd9\u91cc\u4f7f\u7528\u5230\u4e86 penlight \u5e93\u7684 class\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 penlight \u5b98\u65b9\u6587\u6863\u3002</p> </li> <li> <p><code>local texpect = require \"TypeExpect\"</code> \u8fd9\u91cc\u4f7f\u7528\u5230\u4e86 Verilua \u5185\u7f6e\u7684 <code>TypeExpect</code> \u6a21\u5757\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 TypeExpect \u6a21\u5757\uff0c\u4e3b\u8981\u7528\u6765\u68c0\u67e5\u53c2\u6570\u7684\u7c7b\u578b\u3002</p> </li> <li> <p><code>texpect.expect_bdl(signals, \"signals\")</code> \u7684\u4f5c\u7528\u548c\u4e0b\u9762\u662f\u4e00\u6837\u7684\uff1a     <pre><code>assert(type(signals) == \"table\")\nassert(signals.__type == \"Bundle\")\n</code></pre></p> <p>Verilua \u7684\u6570\u636e\u7ed3\u6784\u90fd\u6709 <code>__type</code> \u5b57\u6bb5\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u7528\u6765\u8868\u793a\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\u7684\u7c7b\u578b</p> </li> </ul> <p>\u6709\u4e86\u4e0a\u8ff0\u7684\u6a21\u5757\uff0c\u6211\u4eec\u5728 DUT_A \u4e2d\u53ef\u4ee5\u8fd9\u6837\u521b\u5efa\u5e76\u4f7f\u7528\uff1a</p> test_dut_a.lua<pre><code>local Monitor = require \"Monitor\"\n\nlocal signals_bdl = ([[\n    | valid\n    | value\n]]):bdl {hier = \"tb_top.path.to.mod\", prefix = \"\", is_decoupled = false}\n\nlocal mon = Monitor(signals_bdl)\n\nfork {\n    function ()\n        -- ...\n\n        dut.clock:posedge(100, function (c)\n            mon:sample(c)\n        end)\n\n        -- ...\n\n        sim.finish()\n    end\n}\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u5728 DUT_A \u4e2d\u53ef\u4ee5\u5b8c\u7f8e\u4f7f\u7528\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u5728 DUT_B \u4e2d\u4f7f\u7528\uff0c\u5219\u9700\u8981\u6539\u52a8\u4e00\u4e0b <code>Monitor.lua</code> \u7684\u5185\u5bb9\u6765\u9002\u914d DUT_B \u4e2d\u7684\u4e0d\u4e00\u6837\u7684\u4fe1\u53f7\u4fe1\u606f\uff1a</p> <ul> <li>\u5728 <code>Monitor.lua</code> \u4e2d\u7684\u7b2c 13 \u884c\uff0c\u5c06 <code>valid</code> \u6539\u4e3a <code>vld</code>\uff1b</li> <li>\u5728 <code>Monitor.lua</code> \u4e2d\u7684\u7b2c 14 \u884c\uff0c\u5c06 <code>value</code> \u6539\u4e3a <code>value_2</code>\u3002</li> </ul> <p>\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e0b\u9762\u7684\u4ee3\u7801\uff1a</p> Monitor_1.lua<pre><code>local class = require \"pl.class\"\nlocal texpect = require \"TypeExpect\"\n\nlocal Monitor = class()\n\nfunction Monitor:_init(signals)\n    texpect.expect_bdl(signals, \"signals\")\n\n    self.signals = signals\nend\n\nfunction Monitor:sample(cycles)\n    if self.signals.vld:is(1) then\n        print(\"[Monitor] get value =&gt;\", self.signals.value_2:get_hex_str(), \"at\", cycles)\n    end\nend\n</code></pre> <p>\u53ef\u4ee5\u770b\u5230\u548c <code>Monitor.lua</code> \u4e00\u6837\uff0c\u53ea\u662f\u5728 <code>Monitor.lua</code> \u4e2d\u7684\u7b2c 13 \u884c\u548c\u7b2c 14 \u884c\u4e2d\u7684 <code>valid</code> \u548c <code>value</code> \u6539\u4e3a\u4e86 <code>vld</code> \u548c <code>value_2</code>\u3002</p> <p>\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5728 DUT_B \u4e2d\u4f7f\u7528\uff1a</p> test_dut_b.lua<pre><code>local Monitor = require \"Monitor_1\"\n\nlocal signals_bdl = ([[\n    | vld\n    | value_2\n]]):bdl {hier = \"tb_top.another.path.to.mod\", prefix = \"\", is_decoupled = false}\n\nlocal mon = Monitor(signals_bdl)\n\nfork {\n    function ()\n        -- ...\n\n        dut.clock:posedge(100, function (c)\n            mon:sample(c)\n        end)\n\n        -- ...\n\n        sim.finish()\n    end\n}\n</code></pre> <p>\u8fd9\u6837\u7684\u505a\u6cd5\u5c31\u4f1a\u5bfc\u81f4\u539f\u672c\u53ef\u4ee5\u590d\u7528\u7684 <code>Monitor</code> \u7ec4\u4ef6\u56e0\u4e3a\u4fe1\u53f7\u4fe1\u606f\u4e0d\u540c\u800c\u4e0d\u5f97\u4e0d\u91cd\u65b0\u7f16\u5199\u3002\u6838\u5fc3\u7684\u95ee\u9898\u5728\u4e8e\u4e24\u4e2a DUT \u4e2d\u7684\u4fe1\u53f7\u547d\u540d\u4e0d\u4e00\u6837\uff0c\u6211\u4eec\u7684 <code>Monitor</code> \u7ec4\u4ef6\u5b9e\u73b0\u7684\u65f6\u5019\u4f7f\u7528\u7684\u662f\u67d0\u4e2a DUT \u4e2d\u7684\u4fe1\u53f7\uff0c\u5982\u679c\u5728\u53e6\u4e00\u4e2a DUT \u4e2d\u4f7f\u7528\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u6539\u52a8\u4e00\u4e0b <code>Monitor.lua</code> \u4ee3\u7801\uff0c\u5c06\u4fe1\u53f7\u540d\u8fdb\u884c\u5bf9\u5e94\u7684\u4fee\u6539\u3002</p>"},{"location":"how-to-guides/write_reusable_component/#aliasbundle","title":"\u4f7f\u7528 AliasBundle \u7f16\u5199\u9a8c\u8bc1\u7ec4\u4ef6","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>AliasBundle</code> \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c<code>Monitor</code> \u7ec4\u4ef6\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a <code>AliasBundle</code> \u4f5c\u4e3a\u4fe1\u53f7\u8f93\u5165\uff08\u4ee3\u66ff\u539f\u6709\u7684 <code>Bundle</code>\uff09 \uff0c\u5728 <code>AliasBundle</code> \u53ef\u4ee5\u5bf9\u4fe1\u53f7\u521b\u5efa\u522b\u540d\uff0c\u8fd9\u4e2a\u522b\u540d\u5728 DUT_A \u4e2d\u548c DUT_B \u4e2d\u90fd\u53ef\u4ee5\u8bbe\u7f6e\u6210\u4e00\u6837\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u7684 <code>Monitor</code> \u7ec4\u4ef6\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5728\u4e0d\u540c\u7684 DUT \u4e2d\u4f7f\u7528\u4e86\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> Monitor.lua<pre><code>local class = require \"pl.class\"\nlocal texpect = require \"TypeExpect\"\n\nlocal Monitor = class()\n\nfunction Monitor:_init(signals)\n    texpect.expect_abdl(signals, \"signals\", { \"valid\", \"value\" })\n\n    self.signals = signals\nend\n\nfunction Monitor:sample(cycles) \n    if self.signals.valid:is(1) then\n        print(\"[Monitor] get value =&gt;\", self.signals.value:get_hex_str(), \"at\", cycles)\n    end\nend\n</code></pre> <p>\u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0c\u4f7f\u7528\u4e86 <code>texpect.expect_abdl(signals, \"signals\", { \"valid\", \"value\" })</code> \u6765\u786e\u4fdd\u7528\u6237\u8f93\u5165\u7684 <code>signals</code> \u662f\u4e00\u4e2a <code>AliasBundle</code>\uff0c\u5176\u4e2d\u5305\u542b\u4e86 <code>valid</code> \u548c <code>value</code> \u4e24\u4e2a\u4fe1\u53f7\u3002</p> <p>\u5728 DUT_A \u4e2d\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a test_dut_a.lua<pre><code>local Monitor = require \"Monitor\"\n\nlocal signals_bdl = ([[\n    | valid =&gt; valid\n    | value =&gt; value\n]]):abdl {hier = \"tb_top.path.to.mod\", prefix = \"\"}\n-- or\n-- local signals_bdl = ([[\n--     | valid\n--     | value\n-- ]]):abdl {hier = \"tb_top.path.to.mod\", prefix = \"\"}\n\nlocal mon = Monitor(signals_bdl)\n\n-- ...\n</code></pre></p> <p>\u5728 DUT_B \u4e2d\u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528\uff1a test_dut_b.lua<pre><code>local Monitor = require \"Monitor\"\n\nlocal signals_bdl = ([[\n    | vld =&gt; valid\n    | value_2 =&gt; value\n]]):abdl {hier = \"tb_top.another.path.to.mod\", prefix = \"\"}\n\nlocal mon = Monitor(signals_bdl)\n\n-- ...\n</code></pre></p> <p>\u8fd9\u6837\u6211\u4eec\u5728 DUT_A \u548c DUT_B \u4e2d\u90fd\u53ef\u4ee5\u590d\u7528\u540c\u4e00\u4e2a <code>Monitor</code> \u7ec4\u4ef6\u4e86\uff0c\u4e0d\u9700\u8981\u56e0\u4e3a\u5177\u4f53\u7684\u4fe1\u53f7\u540d\u79f0\u4e0d\u540c\u800c\u4fee\u6539 <code>Monitor</code> \u7684\u4ee3\u7801\u3002</p>"},{"location":"how-to-guides/write_reusable_component/#_2","title":"\u603b\u7ed3","text":"<p>\u901a\u8fc7\u4e0a\u9762\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 <code>AliasBundle</code> \u7ed3\u5408 <code>TypeExpect</code> \u53ef\u4ee5\u7f16\u5199\u51fa\u4e00\u4e2a\u53ef\u590d\u7528\u7684\u9a8c\u8bc1\u7ec4\u4ef6\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684 DUT \u4e2d\u4f7f\u7528\u3002<code>TypeExpect</code> \u7684 <code>expect_abdl</code> \u65b9\u6cd5\u8fd8\u80fd\u68c0\u67e5\u4fe1\u53f7\u7684\u4f4d\u5bbd\u662f\u5426\u6ee1\u8db3\u8981\u6c42\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003\u6b64\u5904\u7684\u4ee3\u7801\u3002</p>"},{"location":"reference/bitvec/","title":"BitVec","text":"<p>TODO\uff1a</p>"},{"location":"reference/data_structure/","title":"\u6570\u636e\u7ed3\u6784","text":"<p>\u5728 <code>Verilua</code> \u4e2d\uff0c\u786c\u4ef6\u4fe1\u53f7\u901a\u5e38\u88ab\u5efa\u6a21\u4e3a <code>Handle</code>\uff0c\u8fd9\u4e5f\u662f <code>Verilua</code> \u4e2d\u6570\u636e\u7ed3\u6784\u7684\u4e3b\u8981\u547d\u540d\u65b9\u5f0f\u3002<code>Handle</code> \u6709\u591a\u79cd\u7c7b\u578b\uff1a</p> <ol> <li> <p>CallableHDL(<code>chdl</code>)</p> <p>\u4e0e\u4fe1\u53f7\u8fdb\u884c\u64cd\u4f5c\u7684\u4e00\u4e2a\u5e95\u5c42\u6570\u636e\u7ed3\u6784\uff0c\u63d0\u4f9b\u4e86\u4fe1\u53f7\u8d4b\u503c\u548c\u8bfb\u53d6\u7b49\u63a5\u53e3\uff0c\u5176\u4e2d\u8fd8\u5305\u62ec\u4e86\u5404\u79cd\u786c\u4ef6\u4fe1\u53f7\u76f8\u5173\u7684 Meta \u4fe1\u606f\uff0c\u4f8b\u5982 width\u3001hierarchy path\u3002</p> </li> <li> <p>Bundle(<code>bdl</code>)</p> <p>\u4e00\u79cd\u5c06\u591a\u4e2a\u4fe1\u53f7\u5c01\u88c5\u5728\u4e00\u8d77\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53c2\u8003\u4e86 <code>Chisel</code> \u7684\u6982\u5ff5\uff0c\u56e0\u6b64\u652f\u6301 Decoupled \u548c Valid \u7b49\u5b50\u7c7b\u578b\uff0c\u80fd\u591f\u7edf\u4e00\u7ba1\u7406\u591a\u4e2a <code>chdl</code>\u3002 </p> </li> <li> <p>AliasBundle(<code>abdl</code>)</p> <p>\u4e00\u79cd\u7279\u6b8a\u7684 <code>bdl</code>\uff0c\u5141\u8bb8\u7528\u6237\u4e3a\u4fe1\u53f7\u7ec4\u4e2d\u7684\u90e8\u5206\u4fe1\u53f7\u63d0\u4f9b\u522b\u540d\uff0c\u4ece\u800c\u63d0\u9ad8\u4ee3\u7801\u53ef\u8bfb\u6027\uff0c\u540c\u65f6\u4ecd\u652f\u6301\u5bf9\u5e95\u5c42 <code>chdl</code> \u7684\u76f4\u63a5\u8bbf\u95ee\u3002</p> </li> <li> <p>ProxyTableHandle(<code>dut</code>)</p> <p>\u901a\u8fc7\u5168\u5c40 ProxyTable \u667a\u80fd\u89e3\u6790\u8def\u5f84\uff08hierarchy path\uff09\uff0c\u652f\u6301\u4e0e <code>chdl</code> \u51e0\u4e4e\u76f8\u540c\u7684\u4fe1\u53f7\u64cd\u4f5c\u63a5\u53e3\uff0c\u7528\u6237\u53ef\u76f4\u63a5\u8bbf\u95ee\u4fe1\u53f7\uff0c\u65e0\u9700\u663e\u5f0f\u6784\u9020 <code>chdl</code> \u6216 <code>bdl</code>\uff0c\u7b80\u5316\u8bbf\u95ee\u590d\u6742\u6027\uff0c\u63d0\u5347\u4ee3\u7801\u7075\u6d3b\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002\u4f46\u662f\u8fd9\u79cd\u8bbf\u95ee\u65b9\u5f0f\u7684\u8bbe\u8ba1\u4e4b\u521d\u4e3b\u8981\u662f\u4e3a\u4e86\u5feb\u901f\u7684\u4e34\u65f6\u8bbf\u95ee\u4fe1\u53f7\uff0c\u56e0\u6b64\u6027\u80fd\u662f\u4e0d\u5982 <code>chdl</code> \u7684\u3002</p> </li> <li> <p>EventHandle(<code>ehdl</code>)</p> <p>\u7528\u4e8e\u4efb\u52a1\u540c\u6b65\u4e0e\u901a\u4fe1\uff0c\u901a\u8fc7\u4e8b\u4ef6\u673a\u5236\u5b9e\u73b0\u4efb\u52a1\u95f4\u7684\u534f\u8c03\uff0c\u7528\u6237\u53ef\u521b\u5efa\u4e0d\u540c <code>ehdl</code> \u6765\u540c\u6b65\u4efb\u52a1\u6267\u884c\u987a\u5e8f\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cEvent Handle \u5e76\u975e\u7528\u4e8e\u76f4\u63a5\u64cd\u4f5c\u4fe1\u53f7\uff0c\u800c\u662f\u7528\u4e8e\u7ba1\u7406\u4efb\u52a1\u4e4b\u95f4\u7684\u540c\u6b65\u4e0e\u901a\u4fe1\uff0c\u786e\u4fdd\u4efb\u52a1\u6309\u9884\u671f\u987a\u5e8f\u6267\u884c\u3002</p> </li> </ol> Verilua data structure"},{"location":"reference/data_structure/#callablehdl","title":"CallableHDL","text":""},{"location":"reference/data_structure/#callablehdl_1","title":"\u521b\u5efa CallableHDL","text":""},{"location":"reference/data_structure/#dut","title":"\u4f7f\u7528 dut \u521b\u5efa\uff08\u63a8\u8350\uff09","text":"<p>\u4f7f\u7528 <code>dut</code> \u6765\u521b\u5efa <code>chdl</code> \u9700\u8981\u5b8c\u6574\u7684\u4f7f\u7528 <code>dut</code> \u8868\u793a\u51fa\u4e00\u4e2a\u4fe1\u53f7\u7684 hierarchy path\uff08\u8fd9\u91cc\u7684 <code>dut</code> \u8868\u793a\u7684\u662f Testbench \u7684\u6a21\u5757\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f <code>tb_top</code>\uff09\uff0c\u4f8b\u5982\uff1a <pre><code>local signal = dut.path.to.signal:chdl()\n</code></pre> \u901a\u5e38\u5bf9\u4e8e\u4e00\u4e9b DUT \u7684\u9876\u5c42\u4fe1\u53f7\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>dut.xxx</code> \u8868\u793a\uff0c\u4f8b\u5982\uff1a <pre><code>local signal = dut.clock:chdl()\nlocal signal2 = dut.reset:chdl()\n</code></pre> \u5bf9\u4e8e DUT \u7684\u5185\u90e8\u4fe1\u53f7\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>dut.u_&lt;top_module_name&gt;.&lt;internal_signal_name&gt;</code> \u8868\u793a\uff0c\u5177\u4f53\u539f\u56e0\u53ef\u4ee5\u67e5\u770b\u6b64\u5904\u7684\u8bf4\u660e\uff0c\u4ee3\u7801\u4f8b\u5b50\u5982\u4e0b\uff1a  <pre><code>local signal = dut.u_Design.value:chdl()\n</code></pre></p> <p></p> <p>\u57fa\u4e8e <code>dut</code> \u7075\u6d3b\u521b\u5efa <code>chdl</code></p> <p>Lua \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 string \u6765\u7075\u6d3b\u8bbf\u95ee\u67d0\u4e2a table \u7684\u5b50\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a <pre><code>local t = {a0 = 1, a1 = 2, b0 = 3, b1 = 4}\nlocal a = t.a0\nlocal b = t.b0\n\nlocal aa = t[\"a0\"]\nlocal bb = t[\"b0\"]\n\nassert(a == aa)\nassert(b == bb)\n\nfor i = 0, 1 do\n    if i == 0 then\n        assert(t[\"a\" .. i] == t.a0)\n    else\n        assert(t[\"a\" .. i] == t.a1)\n    end\nend\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u5230\u5229\u7528\u5b57\u7b26\u4e32\u62fc\u63a5\u7b49\u65b9\u6cd5\u8bbf\u95ee\u4e00\u4e9b\u6709\u89c4\u5f8b\u7684\u5b50\u53d8\u91cf\uff0c\u8fd9\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u8bbf\u95ee\u5b50\u53d8\u91cf\u3002</p> <p>\u800c <code>dut</code> \u672c\u8d28\u4e0a\u4e5f\u662f\u4e00\u4e2a table\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u4f7f\u7528 string \u6765\u8bbf\u95ee <code>dut</code> \u7684\u5b50\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a <pre><code>local signals = {}\nfor i = 1, 5 do\n    table.insert(signals, dut.path.to[\"some_module_\" .. i].value:chdl())\nend\n</code></pre> \u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u4f7f\u7528 for \u5faa\u73af\u6279\u91cf\u83b7\u5f97\u4e86 5 \u4e2a <code>chdl</code> \u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5206\u522b\u5bf9\u5e94 dut \u4e2d some_module_1 \u5230 some_module_5 \u8fd9\u4e94\u4e2a\u6709\u89c4\u5f8b\u7684\u6a21\u5757\u7684 value \u5b57\u6bb5\uff0c\u5e76\u5c06\u5176\u653e\u5165\u4e86\u4e00\u4e2a table \u4e2d\u3002\u540c\u6837\u5730\uff0c\u5bf9\u4e8e\u4fe1\u53f7\u540d\u4e5f\u53ef\u4ee5\u8fd9\u4e48\u64cd\u4f5c\uff1a <pre><code>local signals = {}\nfor i = 1, 5 do\n    table.insert(signals, dut.path.to[\"some_value_\" .. i]:chdl()) \nend\n</code></pre></p>"},{"location":"reference/data_structure/#class","title":"\u4f7f\u7528 class \u521b\u5efa","text":"<p>\u672c\u8d28\u4e0a <code>CallableHDL</code> \u662f\u4e00\u4e2a class\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c <code>class</code> \u7684\u65b9\u5f0f\u521b\u5efa\uff0c\u4f8b\u5982\uff1a <pre><code>local CallableHDL = require \"LuaCallableHDL\"\n\nlocal chdl = CallableHDL(\"name of the chdl\", \"tb_top.clock\")\n\n-- equivalent to\n\nlocal chdl = dut.clock:chdl()\n</code></pre> <code>CallableHDL</code> \u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f <code>chdl</code> \u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u4e2a\u5219\u662f\u4fe1\u53f7\u7684\u5b8c\u6574 hierarchy path\u3002</p>"},{"location":"reference/data_structure/#string-literal","title":"\u4f7f\u7528 string literal \u521b\u5efa\uff08\u63a8\u8350\uff09","text":"<p>Lua \u7684\u5141\u8bb8\u91cd\u8f7d string \u7684 <code>metatable</code>\uff0cVerilua \u57fa\u4e8e\u8fd9\u4e2a\u673a\u5236\u5b9e\u73b0\u4e86\u4e00\u79cd\u7b80\u5316\u7684\u65b9\u5f0f\u6765\u521b\u5efa <code>chdl</code>, \u4f8b\u5982\uff1a <pre><code>local chdl = (\"tb_top.clock\"):chdl()\n</code></pre>  \u8fd9\u79cd\u65b9\u5f0f\u5728 Verilua \u4e2d\u88ab\u79f0\u4e3a String Literal Constructor Pattern\uff08SLCP\uff09\uff0c\u4f7f\u7528 SLCP \u7684\u597d\u5904\u5728\u4e8e\u53ef\u4ee5\u4e0d\u7528\u50cf <code>class</code> \u6784\u5efa\u90a3\u6837\u63d0\u524d\u4f7f\u7528 <code>require</code> \u5c06 <code>LuaCallableHDL</code> \u52a0\u8f7d\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u4f7f\u7528\u65f6\u6839\u636e\u540e\u7f00\u7684\u65b9\u6cd5\u540d\uff08<code>:chdl()</code>\uff09\u6765\u76f4\u63a5\u521b\u5efa <code>chdl</code>\u3002 \u9664\u4e86 <code>chdl</code> \u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u636e\u7ed3\u6784\u540c\u6837\u4e5f\u652f\u6301\u4f7f\u7528 SLCP \u7684\u65b9\u5f0f\u6765\u521b\u5efa\u3002</p>"},{"location":"reference/data_structure/#callablehdl_2","title":"CallableHDL \u63a5\u53e3","text":"<p><code>CallableHDL</code> \u652f\u6301\u591a\u79cd\u4fe1\u53f7\u64cd\u4f5c\u63a5\u53e3\uff0c\u4e14\u76f8\u5173\u63a5\u53e3\u51fd\u6570\u7684\u529f\u80fd\u4f1a\u4e0e\u5177\u4f53\u4fe1\u53f7\u7684\u4f4d\u5bbd\u6709\u5173\uff0c\u56e0\u6b64\u5728\u4f7f\u7528\u65f6\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u7ec6\u8282\u3002</p> <p>Verilua \u4e2d\u6839\u636e\u4fe1\u53f7\u7684\u4f4d\u5bbd\u4e0d\u540c\uff0c\u9690\u5f0f\u5730\u5c06 <code>chdl</code> \u5206\u4e3a\u4e86\u4e09\u79cd\u7c7b\u578b\uff1a</p> <ol> <li>Single\uff1a\u4f4d\u5bbd &lt;= 32 bit \u7684\u4fe1\u53f7</li> <li>Double\uff1a\u4f4d\u5bbd &gt; 32 bit \u4e14 &lt;= 64 bit \u7684\u4fe1\u53f7</li> <li>Multi\uff1a\u4f4d\u5bbd &gt; 64 bit \u7684\u4fe1\u53f7</li> </ol> <p>\u5728\u540e\u7eed\u7684 API \u4ecb\u7ecd\u7684\u5185\u5bb9\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u7279\u522b\u5199\u51fa\u9488\u5bf9\u8fd9\u4e09\u79cd\u60c5\u51b5\u7684\u8bf4\u660e\uff0c\u90a3\u4e48\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u76f8\u5173 API \u7684\u884c\u4e3a\u90fd\u662f\u4e00\u81f4\u7684</p> <p>\u4e4b\u6240\u4ee5\u4f1a\u6709\u533a\u5206\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u9488\u4f4d\u5bbd\u5b9e\u65bd\u66f4\u591a\u6027\u80fd\u4e0a\u7684\u4f18\u5316</p> <p><code>beat</code> \u7684\u6982\u5ff5</p> <p>\u786c\u4ef6\u4fe1\u53f7\u7684\u4f4d\u5bbd\u662f\u6ca1\u6709\u9650\u5236\u7684\uff0c\u4f46\u662f\u5728 Lua \u4e2d\u666e\u901a\u7684 number \u7c7b\u578b\u80fd\u591f\u4fdd\u5b58 32 bit \u7684\u6570\u503c\uff0c\u56e0\u6b64 Verilua \u4ee5 32 bit \u4e3a\u5355\u4f4d\u6765\u8868\u793a\u4e00\u90e8\u5206\u7684\u4fe1\u53f7\u7684\u503c\uff0c\u8fd9\u4e2a\u5355\u4f4d\u79f0\u4e3a <code>beat</code>\u3002\u4f8b\u5982\uff1a1 \uff5e 32 bit \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 1 \u4e2a beat \u6765\u8868\u793a\uff0c33 \uff5e 64 bit \u7684\u4fe1\u53f7\u53ef\u4ee5\u7528 2 \u4e2a beat \u6765\u8868\u793a\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002beat \u7684\u6982\u5ff5\u5728\u540e\u7eed\u7684 API \u4ecb\u7ecd\u4e2d\u4f1a\u7ecf\u5e38\u9047\u5230\u3002</p> <p>\u53ef\u4ee5\u4f7f\u7528 <code>&lt;chdl&gt;.beat_num</code> \u6765\u83b7\u5f97 beat \u6570\u3002</p>"},{"location":"reference/data_structure/#_2","title":"\u4fe1\u53f7\u8bfb\u53d6","text":"<ol> <li> <p><code>&lt;chdl&gt;:get()</code></p> SingleDoubleMulti <p>\u8fd4\u56de\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u6570\u503c\uff0c\u8868\u793a\u5f53\u524d\u7684\u4fe1\u53f7\u503c\u3002</p> <p><code>&lt;chdl&gt;:get(force_multi_beat)</code></p> <ul> <li> <p>\u5982\u679c <code>force_multi_beat</code> \u4e3a <code>true</code>\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>uint32_t[]</code> \u7684 LuaJIT <code>cdata</code>\uff0c\u8fd9\u4e2a <code>cdata</code> \u7684\u5927\u5c0f\u4e3a 2\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>[1]</code> \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c<code>[2]</code> \u8bbf\u95ee\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u7531\u4e8e <code>cdata</code> \u4e0d\u662f Lua \u7684 <code>table</code> \u56e0\u6b64\u5b9e\u9645\u4e0a <code>[0]</code> \u4e5f\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u4f46\u662f\u8fd9\u91cc Verilua \u4f1a\u5c06 <code>[0]</code> \u8d4b\u503c\u4e3a beat \u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u8fd9\u91cc\u7684 2\u3002</p> <p>\u8fd9\u91cc\u7684 <code>cdata</code> \u7684 index \u4ece 1 \u5f00\u59cb\uff0c\u8fd9\u4e0e Lua \u7684 <code>table</code> \u7684 index \u662f\u4e00\u6837\u7684</p> </li> <li> <p>\u5982\u679c <code>force_multi_beat</code> \u4e3a <code>false</code>\uff0c\u90a3\u4e48\u8fd4\u56de\u7684\u662f <code>uint64_t</code> \u7c7b\u578b\u7684\u6570\u503c\uff0c\u7531\u4e8e Double \u7c7b\u578b\u7684 <code>chdl</code> \u7684\u4f4d\u5bbd\u4e3a 32 \uff5e 64 bit\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b8c\u6574\u8868\u8fbe\u5f53\u524d\u7684\u6570\u503c\u3002</p> </li> </ul> <p>\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u7c7b\u578b\u4e3a <code>uint32_t[]</code> \u7684 LuaJIT <code>cdata</code>\uff0c\u8fd9\u4e2a <code>cdata</code> \u7684\u5927\u5c0f\u4e3a\u5f53\u524d\u4fe1\u53f7\u7684 beat \u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 <code>[1]</code> \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c<code>[2]</code> \u8bbf\u95ee\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c <code>[0]</code> \u4e5f\u662f\u53ef\u4ee5\u8bbf\u95ee\u7684\uff0c\u4f46\u662f\u8fd9\u91cc Verilua \u4f1a\u5c06 <code>[0]</code> \u8d4b\u503c\u4e3a beat \u7684\u5927\u5c0f\uff0c\u4f8b\u5982\u5bf9\u4e8e 128 bit \u7684\u4fe1\u53f7\uff0c<code>[0]</code> \u4f1a\u88ab\u8d4b\u503c\u4e3a 4\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:get64()</code></p> SingleDouble / Multi <p>\u8fd4\u56de\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u6570\u503c\uff0c\u8868\u793a\u5f53\u524d\u7684\u4fe1\u53f7\u503c\u3002</p> <p>\u8fd4\u56de <code>uint64_t</code> \u7c7b\u578b\u7684\u6570\u503c\uff0c\u7531\u4e8e Double \u7c7b\u578b\u7684 <code>chdl</code> \u7684\u4f4d\u5bbd\u4e3a 32 \uff5e 64 bit\uff0c\u56e0\u6b64\u53ef\u4ee5\u5b8c\u6574\u8868\u8fbe\u5f53\u524d\u7684\u6570\u503c\uff0c\u4f46\u662f\u5bf9\u4e8e Multi \u7c7b\u578b\u7684 <code>chdl</code>\uff0c\u6b64\u65f6 beat \u5927\u4e8e 2\uff0c\u56e0\u6b64\u8fd4\u56de\u7684 <code>uint64_t</code> \u7c7b\u578b\u7684\u6570\u503c\u4e0d\u80fd\u5b8c\u6574\u8868\u793a\u5f53\u524d\u7684\u4fe1\u53f7\u503c\uff0c\u53ea\u4f1a\u8fd4\u56de\u4f4e 64 bit \u7684\u503c\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:get_bitvec()</code></p> <p>\u8fd4\u56de\u4e00\u4e2a <code>BitVec</code>\uff0c\u5173\u4e8e <code>BitVec</code> \u53ef\u4ee5\u67e5\u770b BitVec \u7684\u6587\u6863\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:get_str(fmt)</code> </p> <p>\u83b7\u5f97\u5f53\u524d\u4fe1\u53f7\u7684\u6570\u503c\uff0c\u5e76\u4ee5 String \u7684\u7c7b\u578b\u8fd4\u56de\uff0c\u63a5\u53d7\u4e00\u4e2a <code>fmt</code> \u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a\u8fd4\u56de\u7684\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\uff0c\u53ef\u4ee5\u662f <code>HexStr</code>\u3001<code>BinStr</code>\u3001<code>DecStr</code>\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nlocal value = signal:get()\nassert(value == 0x123)\n\nlocal value_hex_str = signal:get_str(HexStr) \nassert(value_hex_str == \"123\")\n\nlocal value_bin_str = signal:get_str(BinStr) \nassert(value_bin_str == \"100100011\")\n\nlocal value_dec_str = signal:get_str(DecStr) \nassert(value_dec_str == \"291\")\n</code></pre> <p>\u8fd9\u91cc\u7684 <code>HexStr</code>\u3001<code>BinStr</code>\u3001<code>DecStr</code> \u662f Verilua \u9884\u5b9a\u4e49\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528</p> </li> <li> <p><code>&lt;chdl&gt;:get_hex_str()</code> </p> <p>\u83b7\u5f97\u5f53\u524d\u4fe1\u53f7\u7684\u6570\u503c\uff0c\u5e76\u4ee5 Hex String \u7684\u7c7b\u578b\u8fd4\u56de\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nlocal value = signal:get()\nassert(value == 0x123)\n\nlocal value_hex_str = signal:get_hex_str()\nassert(value_hex_str == \"123\")\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:get_dec_str()</code> </p> <p>\u7c7b\u4f3c <code>get_hex_str</code>\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u662f Decimal String \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:get_bin_str()</code></p> <p>\u7c7b\u4f3c <code>get_hex_str</code>\uff0c\u4f46\u662f\u8fd4\u56de\u7684\u662f Binary String \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002</p> </li> </ol>"},{"location":"reference/data_structure/#_3","title":"\u4fe1\u53f7\u8d4b\u503c","text":"<ol> <li> <p><code>&lt;chdl&gt;:set(value)</code></p> SingleDouble / Multi <p>\u5c06 <code>value</code> \u8d4b\u503c\u7ed9\u5f53\u524d\u4fe1\u53f7\u3002</p> <pre><code>local signal = dut.value:chdl()\nlocal value = 0x123\nsignal:set(value)\n</code></pre> <p><code>&lt;chdl&gt;:set(value, force_single_beat)</code></p> <ul> <li> <p>\u5982\u679c <code>force_single_beat</code> \u4e3a <code>nil</code>\uff08\u4e5f\u5c31\u662f\u4e0d\u4f20\u5165\u8fd9\u4e2a\u53c2\u6570\uff09\uff0c\u90a3\u4e48\u6b64\u65f6\u7684 <code>value</code> \u5fc5\u987b\u662f\u4e00\u4e2a Lua number \u7c7b\u578b\u7684 table\uff0c\u5e76\u4e14\u8fd9\u4e2a table \u7684\u5927\u5c0f\u9700\u8981\u548c\u4fe1\u53f7\u7684 beat \u6570\u76f8\u540c\uff0c\u5426\u5219\u4f1a\u62a5\u9519\u3002\u8fd9\u4e2a table \u7684\u6570\u503c\u4ee5 <code>&lt;LSB&gt; ~ &lt;MSB&gt;</code> \u7684\u987a\u5e8f\u6392\u5217\u3002     <pre><code>local signal = dut.value:chdl()\nlocal value = {0x123, 0x456}\nsignal:set(value)\n</code></pre></p> </li> <li> <p>\u5982\u679c <code>force_single_beat</code> \u4e3a <code>true</code>\uff0c\u90a3\u4e48\u6b64\u65f6\u7684 <code>value</code> \u53ef\u4ee5\u662f\u4e00\u4e2a Lua number \u7c7b\u578b\u7684\u6570\u503c\uff0c\u6b64\u65f6\u53ea\u80fd\u8d4b\u503c\u4fe1\u53f7\u7684\u4f4e 32 bit\uff0c\u5982\u679c <code>value</code> \u662f\u4e00\u4e2a <code>uint64_t</code> \u7684 <code>cdata</code>\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u80fd\u8d4b\u503c\u4fe1\u53f7\u7684\u4f4e 64 bit\uff08\u5bf9\u4e8e Double \u7c7b\u578b\u7684 <code>chdl</code> \u4e5f\u5c31\u662f\u80fd\u8986\u76d6\u6574\u4e2a\u4fe1\u53f7\u7684\u4f4d\u5bbd\uff09\uff0c\u4e14\u9ad8\u4e8e 64 bit \u7684\u4f4d\u7f6e\u5c06\u4f1a\u88ab\u8d4b\u503c\u4e3a 0\u3002     <pre><code>local signal = dut.value:chdl()\n\nlocal value = 0x123\nsignal:set(value, true)\n\nlocal value64 = 0x1234567890ABCDEFULL\nsignal:set(value64, true)\n</code></pre></p> <p>LuaJIT \u4e2d\u5bf9\u4e00\u4e32\u6570\u5b57\u6dfb\u52a0\u4e0a <code>ULL</code> \u7684\u540e\u7f00\u5c31\u53ef\u4ee5\u8868\u793a\u4e00\u4e2a <code>uint64_t</code> \u7c7b\u578b\u7684 <code>cdata</code></p> </li> </ul> </li> <li> <p><code>&lt;chdl&gt;:set_unsafe(value)</code></p> <p>\u548c <code>set</code> \u7c7b\u4f3c\uff0c\u4f46\u662f\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u68c0\u67e5 <code>value</code> \u7684\u6b63\u786e\u6027\uff0c\u51cf\u5c11\u4e86\u4e00\u4e9b <code>assert</code> \u68c0\u67e5\u8bed\u53e5\u7684\u5f00\u9500\uff0c\u6027\u80fd\u4f1a\u6bd4 <code>set</code> \u66f4\u597d\u4e00\u4e9b\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_cached(value)</code></p> SingleDouble / Multi <p>\u548c <code>set</code> \u4e00\u6837\u90fd\u7528\u4e8e\u8d4b\u503c\u4fe1\u53f7\uff0c\u4f46\u662f\u5728\u8d4b\u503c\u7684\u65f6\u5019\u4f1a\u5c06\u5f53\u524d\u7684\u4fe1\u53f7\u503c\u52a0\u5165\u5230\u7f13\u5b58\u4e2d\uff0c\u5982\u679c\u4e0b\u6b21\u8d4b\u503c\u7684\u65f6\u5019\u53d1\u73b0\u5f53\u524d\u7684\u4fe1\u53f7\u503c\u6ca1\u6709\u53d8\u5316\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u8d4b\u503c\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u4fe1\u53f7\u8d4b\u503c\u3002</p> <p>\u6682\u4e0d\u652f\u6301 Cached \u8d4b\u503c\u65b9\u5f0f\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_str(str)</code> </p> <p>\u4e00\u4e2a\u901a\u7528\u7684\u5b57\u7b26\u4e32\u8d4b\u503c\u65b9\u5f0f\uff0c\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a Lua string \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff0c\u5177\u4f53\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\u7531 <code>str</code> \u7684\u524d\u4e24\u4f4d\u6765\u533a\u5206\uff0c\u4f8b\u5982\uff1a</p> <pre><code>local signal = dut.value:chdl()\n\n-- set hex string\nsignal:set_str(\"0x123\")\n\n-- set binary string\nsignal:set_str(\"0b01011\")\n\n-- set decimal string\nsignal:set_str(\"123\")\n</code></pre> <p><code>0x</code> \u8868\u793a\u4e3a Hex String\uff0c<code>0b</code> \u8868\u793a\u4e3a Binary String\uff0c\u5176\u4ed6\u7684\u5b57\u7b26\u4e32\u5219\u8868\u793a\u4e3a Decimal String\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_hex_str(str)</code> </p> <p>\u4f7f\u7528 Hex String \u8d4b\u503c\uff0c<code>str</code> \u662f\u4e00\u4e2a Lua string \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nsignal:set_hex_str(\"123\")\n\nclock:posedge()\n\nsignal:expect(0x123)\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:set_bin_str(value)</code></p> <p>\u4f7f\u7528 Binary String \u8d4b\u503c\uff0c<code>value</code> \u662f\u4e00\u4e2a Lua string \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nsignal:set_bin_str(\"1010\")\n\nclock:posedge()\n\nsignal:expect(0xA)\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:set_dec_str(value)</code></p> <p>\u4f7f\u7528 Decimal String \u8d4b\u503c\uff0c<code>value</code> \u662f\u4e00\u4e2a Lua string \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nsignal:set_dec_str(\"12\")\n\nclock:posedge()\n\nsignal:expect(12)\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:set_shuffled()</code></p> <p>\u5bf9\u5f53\u524d\u4fe1\u53f7\u8fdb\u884c\u968f\u673a\u8d4b\u503c\uff0c\u8fd9\u5728\u9a8c\u8bc1\u4e2d\u5f88\u5e38\u7528\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_bitfield(s, e, v)</code></p> <p>\u8bbe\u7f6e\u4fe1\u53f7\u7684\u503c <code>v</code>\uff0c\u5e76\u4e14\u53ea\u5728 <code>s</code> \u5230 <code>e</code> \u4e4b\u95f4\u7684\u4f4d\u5bbd\u4e0a\u8d4b\u503c\u3002<code>v</code> \u53ef\u4ee5\u662f Lua number \u7c7b\u578b\u7684\u6570\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a <code>uint64_t</code> \u7c7b\u578b\u7684 <code>cdata</code>\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nlocal value = 0x123\nsignal:set_bitfield(0, 7, value)\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:set_bitfield_hex_str(s, e, hex_str)</code></p> <p>\u8bbe\u7f6e\u4fe1\u53f7\u7684\u503c\uff0c\u5e76\u4e14\u53ea\u5728 <code>s</code> \u5230 <code>e</code> \u4e4b\u95f4\u7684\u4f4d\u5bbd\u4e0a\u8d4b\u503c\u3002<code>hex_str</code> \u662f\u4e00\u4e2a Hex String \u7c7b\u578b\u7684\u5b57\u7b26\u4e32.</p> <pre><code>local signal = dut.value:chdl()\n\nlocal value = \"123\"\nsignal:set_bitfield_hex_str(0, 7, value)\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:set_force(value)</code></p> <p>\u5f3a\u5236\u8d4b\u503c\uff08\u4e0e <code>set_release</code> \u914d\u5408\u4f7f\u7528\uff09\uff0c\u4e0e SystemVerilog \u4e2d\u7684 <code>force</code> \u5173\u952e\u5b57\u76f8\u540c\u3002\u9664\u4e86 <code>force</code> \u8fd9\u4e2a\u5c5e\u6027\u4e0a\u7684\u533a\u522b\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set</code> \u4e00\u6837\u3002</p> <pre><code>local signal = dut.value:chdl()\nlocal value = 0x123\nsignal:set_force(value)\n\n-- ...\n\nsignal:set_release()\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:set_release()</code></p> <p>\u91ca\u653e\u8d4b\u503c\uff08\u4e0e <code>set_force</code> \u914d\u5408\u4f7f\u7528\uff09\uff0c\u4e0e SystemVerilog \u4e2d\u7684 <code>release</code> \u5173\u952e\u5b57\u76f8\u540c\u3002\u5bf9\u4e8e\u4f7f\u7528\u4e86 <code>set_force</code> \u7684\u4fe1\u53f7\uff0c\u9700\u8981\u4f7f\u7528 <code>set_release</code> \u6765\u91ca\u653e\u8d4b\u503c\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u4fe1\u53f7\u7684\u503c\u4e0d\u4f1a\u66f4\u65b0\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set</code> \u4e00\u6837\u3002</p> <p></p> <p>\u7acb\u5373\u8d4b\u503c\u548c\u666e\u901a\u8d4b\u503c\u7684\u533a\u522b</p> <p><code>set</code> \u65b9\u6cd5\u8fdb\u884c\u8d4b\u503c\u4f1a\u5728\u4e0b\u4e00\u4e2a\u65f6\u949f\u8fb9\u6cbf\u5230\u6765\u540e\u624d\u4f1a\u8d4b\u503c\uff08\u66f4\u63a5\u8fd1 RTL \u4ee3\u7801\u7684\u884c\u4e3a\uff0c\u7c7b\u4f3c Verilog \u4e2d\u7684\u975e\u963b\u585e\u8d4b\u503c\uff09\uff0c\u800c\u7acb\u5373\u8d4b\u503c\u5219\u4f1a\u7acb\u5373\u8d4b\u503c\uff0c\u4e14\u7acb\u5373\u751f\u6548\u3002 <pre><code>local clock = dut.clock:chdl()\nlocal signal = dut.value:chdl() -- assume that the initial value is 0x00\n\nsignal:set(0x123)\nassert(signal:get() == 0x00)\n\nclock:posedge()\nassert(signal:get() == 0x123) -- available right after the clock edge\n\n\nsignal:set_imm(0x100)\nassert(signal:get() == 0x100) -- available right now\n\nclock:posedge()\nassert(signal:get() == 0x100)\n</code></pre></p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_unsafe(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_unsafe</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_unsafe</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_cached(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_cached</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_cached</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_str(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_str</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_str</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_hex_str(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_hex_str</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_hex_str</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_bin_str(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_bin_str</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_bin_str</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_dec_str(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_dec_str</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_dec_str</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_shuffled()</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_shuffled</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_shuffled</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_bitfield(s, e, v)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_bitfield</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_bitfield</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_bitfield_hex_str(s, e, hex_str)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_bitfield_hex_str</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_bitfield_hex_str</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_force(value)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_force</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_force</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_imm_release()</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set_release</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set_release</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:set_freeze()</code></p> <p>\u51bb\u7ed3\u5f53\u524d\u7684\u4fe1\u53f7\u503c\uff0c\u5728\u540e\u7eed\u7684\u4eff\u771f\u4e2d\uff0c\u8be5\u4fe1\u53f7\u7684\u503c\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002\u9700\u8981\u8c03\u7528 <code>&lt;chdl&gt;:set_release()</code> \u6765\u53d6\u6d88\u51bb\u7ed3\u3002</p> </li> </ol>"},{"location":"reference/data_structure/#debug","title":"debug \u76f8\u5173","text":"<ol> <li> <p><code>&lt;chdl&gt;:dump()</code></p> <p></p> <p>\u7528\u4e8e\u5c06\u4fe1\u53f7\u7684\u503c\uff08\u4e3b\u8981\u662f\u4ee5 Hex String \u7684\u5f62\u5f0f\uff09\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b\u4fe1\u53f7\u7684\u503c\uff0c\u6253\u5370\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a</p> Terminal<pre><code>[tb_top.value] =&gt; 0x01\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:dump_str()</code> </p> <p>\u4f1a\u5c06\u539f\u672c<code>&lt;chdl&gt;:dump()</code> \u7684\u8f93\u51fa\u7684\u5185\u5bb9\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\u8fdb\u884c\u8fd4\u56de\uff0c\u56e0\u6b64 <code>&lt;chdl&gt;:dump()</code> \u4e5f\u7b49\u4ef7\u4e8e <code>print(&lt;chdl&gt;:dump_str())</code>\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:get_width()</code></p> <p>\u83b7\u5f97\u4fe1\u53f7\u7684\u4f4d\u5bbd\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee<code>&lt;chdl&gt;.width</code> \u6765\u83b7\u5f97\u3002 </p> </li> <li> <p><code>&lt;chdl&gt;:__len()</code></p> <p><code>chdl</code> \u91cd\u8f7d\u4e86 Lua \u7684 metatable \u7684 <code>__len</code> \u65b9\u6cd5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 <code>#&lt;chdl&gt;</code> \u6765\u83b7\u5f97\u4fe1\u53f7\u7684\u4f4d\u5bbd\u3002\u4e0b\u9762\u7684\u4e09\u79cd\u65b9\u5f0f\u6765\u83b7\u5f97\u4fe1\u53f7\u4f4d\u5bbd\u662f\u7b49\u4ef7\u7684\uff1a</p> <pre><code>local signal = dut.value:chdl()\nassert(#signal == 32)\nassert(signal:get_width() == 32)\nassert(signal.width == 32)\n</code></pre> </li> </ol>"},{"location":"reference/data_structure/#_4","title":"\u9a8c\u8bc1\u76f8\u5173","text":"<ol> <li> <p><code>&lt;chdl&gt;:expect(value)</code></p> <p>\u7528\u4e8e\u65ad\u8a00\u4fe1\u53f7\u7684\u503c\uff0c\u5728\u9a8c\u8bc1\u4e2d\u5f88\u5e38\u7528\uff0c\u5982\u679c\u4fe1\u53f7\u7684\u503c\u4e0e\u671f\u671b\u503c\u76f8\u7b49\u5219\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u53d1\u751f\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u4f1a\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u505c\u6b62\u4eff\u771f\u3002\u9519\u8bef\u4fe1\u606f\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> Terminal<pre><code>[tb_top.value] expect =&gt; 10, but got =&gt; 0\n</code></pre> SingleDoubleMulti <p><code>value</code> \u7684\u503c\u662f\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u503c\u3002</p> <p><code>value</code> \u7684\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a <code>uint64_t</code> \u7c7b\u578b\u7684 <code>cdata</code>\u3002\u4f8b\u5982\uff1a <pre><code>local signal = dut.value:chdl()\nsignal:expect(10) -- Lua number\nsignal:expect(0x123ULL) -- uint64_t cdata(the `ULL` suffix is for 64 bit in LuaJIT)\n</code></pre></p> <p><code>value</code> \u7684\u503c\u662f\u4e00\u4e2a Lua \u7684 table\uff0c\u5176\u5927\u5c0f\u4e3a\u5f53\u524d\u4fe1\u53f7\u7684 beat \u6570\u3002\u4f8b\u5982\uff1a <pre><code>local signal = dut.value:chdl()\nassert(#signal == 128)\n\nsignal:expect({0x123, 0x456, 0x111, 0x222}) -- Lua table\n</code></pre></p> </li> <li> <p><code>&lt;chdl&gt;:expect_not(value)</code></p> <p>\u548c <code>&lt;chdl&gt;:expect(value)</code> \u7c7b\u4f3c\uff0c\u4f46\u662f\u5982\u679c\u4fe1\u53f7\u7684\u503c\u4e0e\u671f\u671b\u503c\u76f8\u7b49\u5219\u4f1a\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u505c\u6b62\u4eff\u771f\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:expect_hex_str(hex_value_str)</code></p> <p>\u6bd4\u8f83\u4fe1\u53f7\u7684\u503c\u662f\u5426\u4e3a\u6307\u5b9a\u7684 Hex String \u503c\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u4f1a\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u505c\u6b62\u4eff\u771f\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nsignal:expect_hex_str(\"123\")\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:expect_bin_str(bin_value_str)</code></p> <p>\u6bd4\u8f83\u4fe1\u53f7\u7684\u503c\u662f\u5426\u4e3a\u6307\u5b9a\u7684 Binary String \u503c\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u4f1a\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u505c\u6b62\u4eff\u771f\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nsignal:expect_bin_str(\"1010\")\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:expect_dec_str(dec_value_str)</code></p> <p>\u6bd4\u8f83\u4fe1\u53f7\u7684\u503c\u662f\u5426\u4e3a\u6307\u5b9a\u7684 Decimal String \u503c\uff0c\u5982\u679c\u4e0d\u76f8\u7b49\u5219\u4f1a\u6253\u5370\u62a5\u9519\u4fe1\u606f\u5e76\u505c\u6b62\u4eff\u771f\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nsignal:expect_dec_str(\"12\")\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:expect_not_hex_str(hex_value_str)</code></p> <p>\u548c <code>&lt;chdl&gt;:expect_hex_str(hex_value_str)</code> \u7684\u4f5c\u7528\u76f8\u53cd\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:expect_not_bin_str(bin_value_str)</code></p> <p>\u548c <code>&lt;chdl&gt;:expect_bin_str(bin_value_str)</code> \u7684\u4f5c\u7528\u76f8\u53cd\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:expect_not_dec_str(dec_value_str)</code></p> <p>\u548c <code>&lt;chdl&gt;:expect_dec_str(dec_value_str)</code> \u7684\u4f5c\u7528\u76f8\u53cd\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:is(value)</code></p> <p>\u5224\u65ad\u4fe1\u53f7\u7684\u503c\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a\u503c\uff0c\u5982\u679c\u7b49\u4e8e\u5219\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p> SingleDoubleMulti <p><code>value</code> \u7684\u503c\u662f\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u503c\u3002</p> <p><code>value</code> \u7684\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a <code>uint64_t</code> \u7c7b\u578b\u7684 <code>cdata</code>\u3002\u4f8b\u5982\uff1a <pre><code>local signal = dut.value:chdl()\nlocal correct = signal:is(10) -- Lua number\nlocal correct = signal:is(0x123ULL) -- uint64_t cdata(the `ULL` suffix is for 64 bit in LuaJIT)\n</code></pre></p> <p><code>value</code> \u7684\u503c\u662f\u4e00\u4e2a Lua \u7684 table\uff0c\u5176\u5927\u5c0f\u4e3a\u5f53\u524d\u4fe1\u53f7\u7684 beat \u6570\u3002\u4f8b\u5982\uff1a <pre><code>local signal = dut.value:chdl()\nassert(#signal == 128)\n\nlocal correct = signal:is({0x123, 0x456, 0x111, 0x222}) -- Lua table\n</code></pre></p> </li> <li> <p><code>&lt;chdl&gt;:is_not(value)</code></p> <p>\u548c <code>&lt;chdl&gt;:is(value)</code> \u7684\u4f5c\u7528\u76f8\u53cd\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:is_hex_str(hex_value_str)</code></p> <p>\u5224\u65ad\u4fe1\u53f7\u7684\u503c\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a Hex String \u503c\uff0c\u5982\u679c\u7b49\u4e8e\u5219\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nlocal correct = signal:is_hex_str(\"123\")\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:is_bin_str(bin_value_str)</code></p> <p>\u5224\u65ad\u4fe1\u53f7\u7684\u503c\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a Binary String \u503c\uff0c\u5982\u679c\u7b49\u4e8e\u5219\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nlocal correct = signal:is_bin_str(\"1010\")\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:is_dec_str(dec_value_str)</code></p> <p>\u5224\u65ad\u4fe1\u53f7\u7684\u503c\u662f\u5426\u7b49\u4e8e\u67d0\u4e2a Decimal String \u503c\uff0c\u5982\u679c\u7b49\u4e8e\u5219\u8fd4\u56de <code>true</code>\uff0c\u5426\u5219\u8fd4\u56de <code>false</code>\u3002</p> <pre><code>local signal = dut.value:chdl()\n\nlocal correct = signal:is_dec_str(\"12\")\n</code></pre> </li> </ol>"},{"location":"reference/data_structure/#_5","title":"\u4fe1\u53f7\u56de\u8c03\u7ba1\u7406","text":"<p>\u4fe1\u53f7\u56de\u8c03\u7ba1\u7406\u51fd\u6570\u53ea\u80fd\u4f5c\u7528\u5728\u4fe1\u53f7\u4f4d\u5bbd\u4e3a 1 \u7684\u4fe1\u53f7\u4e0a</p> <ol> <li> <p><code>&lt;chdl&gt;:posedge(times, func)</code> </p> <p>\u7528\u4e8e\u7b49\u5f85\u4fe1\u53f7\u7684\u4e0a\u5347\u6cbf\u5230\u6765\uff0c<code>times</code> \u548c <code>func</code> \u662f\u53ef\u9009\u7684\u4e24\u4e2a\u53c2\u6570\uff0c<code>times</code> \u8868\u793a\u7b49\u5f85\u7684\u6b21\u6570\uff0c<code>func</code> \u8868\u793a\u56de\u8c03\u51fd\u6570\u3002</p> <pre><code>local clock = dut.clock:chdl()\n\nclock:posedge() -- wait for one posedge\nclock:posedge(10) -- wait for 10 posedges\n\nclock:posedge(10, function (c)\n    -- `func` will be called every time posedge arrives, and the argument `c` is the count of the posedge\n    print(\"posedge count =&gt; \", c)\nend)\n</code></pre> </li> <li> <p><code>&lt;chdl&gt;:negedge(times, func)</code> </p> <p>\u548c <code>&lt;chdl&gt;:posedge(times, func)</code> \u7c7b\u4f3c\uff0c\u4f46\u662f\u5728\u7b49\u5f85\u4fe1\u53f7\u7684\u4e0b\u964d\u6cbf\u5230\u6765\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:posedge_until(max_limit, func)</code> </p> <p>\u5728\u6bcf\u4e00\u4e2a\u65f6\u949f\u4e0a\u5347\u6cbf\u68c0\u67e5 <code>func</code> \u662f\u5426\u8fd4\u56de <code>true</code>\uff0c\u5982\u679c\u662f <code>true</code> \u5219\u7ed3\u675f\u7b49\u5f85\u4e0a\u5347\u6cbf\uff0c\u5426\u5219\u7ee7\u7eed\u7b49\u5f85\uff0c\u76f4\u5230 <code>max_limit</code> \u6b21\u4e0a\u5347\u6cbf\u5230\u6765\u3002</p> <p>\u5982\u679c\u5728 <code>max_limit</code> \u6b21\u4e0a\u5347\u6cbf\u5230\u6765\u540e\uff0c<code>func</code> \u4ecd\u672a\u8fd4\u56de <code>true</code>\uff0c\u5219 <code>posedge_until</code> \u4f1a\u8fd4\u56de <code>false</code>\uff0c\u5426\u5219\u8fd4\u56de <code>true</code>\u3002</p> </li> <li> <p><code>&lt;chdl&gt;:negedge_until(max_limit, func)</code> </p> <p>\u548c <code>&lt;chdl&gt;:posedge_until(max_limit, func)</code> \u7c7b\u4f3c\uff0c\u4f46\u662f\u5728\u7b49\u5f85\u4fe1\u53f7\u7684\u4e0b\u964d\u6cbf\u5230\u6765\u3002</p> </li> </ol>"},{"location":"reference/data_structure/#_6","title":"\u5177\u5907\u81ea\u52a8\u683c\u5f0f\u8bc6\u522b\u7684\u8d4b\u503c\u63a5\u53e3","text":"<p>\u4e0a\u8ff0\u7684 API \u4ecb\u7ecd\u4e2d\u53ef\u4ee5\u770b\u5230\u9488\u5bf9\u4fe1\u53f7\u8d4b\u503c\u6709\u8bb8\u591a\u7684\u51fd\u6570\uff0c\u6709\u65f6\u5019\u7528\u6237\u53ef\u80fd\u9700\u8981\u4e00\u79cd\u66f4\u7075\u6d3b\u7684\u65b9\u5f0f\u6765\u8d4b\u503c\u4fe1\u53f7\uff0c\u80fd\u591f\u6839\u636e\u6b64\u65f6\u8f93\u5165\u7684\u503c\u7684\u683c\u5f0f\u6765\u8c03\u7528\u5408\u9002\u7684\u8d4b\u503c\u63a5\u53e3\u51fd\u6570\uff0cVerilua \u901a\u8fc7\u91cd\u8f7d Lua metatable \u7684 <code>__newindex</code> \u65b9\u6cd5\u6765\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002</p> <p>\u8c03\u7528\u7684\u683c\u5f0f\u4e3a\uff1a<code>&lt;chdl&gt;.value = &lt;value&gt;</code>\uff0c\u5176\u4e2d <code>&lt;value&gt;</code> \u662f\u4e00\u4e2a\u4efb\u610f\u80fd\u591f\u8868\u793a\u6570\u503c\u7684\u503c\uff0c\u6ce8\u610f\u5230\u8fd9\u91cc\u7b49\u53f7\u5de6\u8fb9\u7684 <code>.value</code>\uff0c\u8fd9\u662f\u4e3a\u4e86\u80fd\u591f\u89e6\u53d1 <code>__newindex</code> \u5143\u65b9\u6cd5\uff0c\u56e0\u6b64\u5728\u8c03\u7528\u65f6\u9700\u8981\u52a0\u4e0a\u3002</p> <p>\u76ee\u524d <code>&lt;value&gt;</code> \u652f\u6301\u7684\u683c\u5f0f\u5305\u62ec\uff1a</p> <ul> <li>Lua number \u7c7b\u578b\u7684\u6570\u503c\uff1b     <pre><code>&lt;chdl&gt;.value = 123\n&lt;chdl&gt;.value = 0x123\n</code></pre></li> <li>Lua string \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff08\u5bf9\u4e8e Hex \u548c Binary \u9700\u8981\u5e26\u4e0a\u524d\u7f00\uff09\uff1b     <pre><code>&lt;chdl&gt;.value = \"123\"\n&lt;chdl&gt;.value = \"0x123\"\n&lt;chdl&gt;.value = \"0b01011\"\n</code></pre></li> <li>Lua table\uff08\u6216\u8005\u53eb list\uff09\uff0c\u91cc\u9762\u7684\u5143\u7d20\u4e3a number \u7c7b\u578b;     <pre><code>&lt;chdl&gt;.value = {0x123, 0x456, 0x789}\n</code></pre></li> <li> <p>LuaJIT \u7684 <code>cdata</code>\uff0c\u5305\u62ec\u4e86\uff1a<code>uint64_t</code> \u548c <code>uint32_t[]</code> \uff1b     <pre><code>&lt;chdl&gt;.value = 0x123ULL -- uint64_t cdata\n\nlocal vec = ffi.new(\"uint32_t[?]\", 4) -- uint32_t[] cdata\nvec[1] = 0x123 -- Notice: the index is 1-based\nvec[2] = 0x456\nvec[3] = 0x789\n&lt;chdl&gt;.value = vec\n</code></pre></p> <p>\u5bf9\u4e8e <code>uint32_t[]</code> \u7684\u8d4b\u503c\uff0c\u9700\u8981\u7528\u6237\u624b\u52a8\u4f7f\u7528 ffi \u521b\u5efa\uff0c\u56e0\u6b64\u5efa\u8bae\u8fd8\u662f\u91c7\u7528 Lua table \u7684\u65b9\u5f0f</p> </li> <li> <p>Lua boolean \u7c7b\u578b\u7684\u503c\uff1b     <pre><code>&lt;chdl&gt;.value = true\n&lt;chdl&gt;.value = false\n</code></pre></p> </li> </ul> <p>\u53ef\u4ee5\u5728\u4e00\u4e9b\u6027\u80fd\u4e0d\u654f\u611f\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u8fd9\u79cd\u81ea\u52a8\u8bc6\u522b\u683c\u5f0f\u7684\u8d4b\u503c\u65b9\u5f0f\uff0c\u4f8b\u5982\u5728\u4e00\u4e9b\u6a21\u5757\u7684 UT \u6d4b\u8bd5\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u4e1a\u52a1\u4ee3\u7801</p>"},{"location":"reference/data_structure/#_7","title":"\u5177\u5907\u81ea\u52a8\u683c\u5f0f\u8bc6\u522b\u7684\u6bd4\u8f83\u63a5\u53e3","text":"<p>\u5728\u5b9e\u9645\u7684\u9a8c\u8bc1\u4e2d\uff0c\u5f80\u5f80\u9700\u8981\u5bf9\u4fe1\u53f7\u7684\u503c\u8fdb\u884c\u6bd4\u8f83\uff0c\u6765\u5224\u65ad\u4fe1\u53f7\u7684\u503c\u662f\u5426\u7b26\u5408\u9884\u671f\uff0c\u4f46\u662f\u4fe1\u53f7\u7684\u6570\u503c\u8868\u793a\u65b9\u5f0f\u5728 <code>chdl</code> \u4e2d\u6709\u591a\u79cd\u7c7b\u578b\uff0c\u4f8b\u5982 Lua \u7684 number\u3001string\u3001table\u3001cdata \u7b49\uff0c\u8fd9\u4e9b\u7c7b\u578b\u7684\u6bd4\u8f83\u65b9\u5f0f\u4e5f\u662f\u4e0d\u540c\u7684\uff0c\u7528\u6237\u53ef\u80fd\u9700\u8981\u4e00\u79cd\u80fd\u591f\u6839\u636e\u8f93\u5165\u7684\u503c\u7684\u683c\u5f0f\u6765\u8fdb\u884c\u6570\u503c\u6bd4\u8f83\u7684\u63a5\u53e3\uff0c\u56e0\u6b64 Verilua \u901a\u8fc7\u91cd\u8f7d Lua metatable \u7684 <code>__eq</code> \u65b9\u6cd5\u6765\u5b9e\u73b0\u4e86\u8fd9\u4e00\u70b9\u3002</p> <p>\u8c03\u7528\u7684\u683c\u5f0f\u4e3a\uff1a<code>&lt;chdl&gt; == &lt;value_wrapper&gt;(&lt;value&gt;)</code>\uff0c\u5176\u4e2d <code>&lt;value&gt;</code> \u662f\u4e00\u4e2a\u4efb\u610f\u80fd\u591f\u8868\u793a\u6570\u503c\u7684\u503c\uff0c\u4e3a\u4e86\u80fd\u591f\u89e6\u53d1 <code>__eq</code> \u5143\u65b9\u6cd5\uff0c\u9700\u8981\u7ed9 <code>&lt;value&gt;</code> \u5305\u4e0a\u4e00\u4e2a <code>&lt;value_wrapper&gt;</code>\u3002 </p> <p><code>&lt;value_wrapper&gt;</code> \u6709\u4e09\u79cd\u53ef\u4ee5\u9009\u62e9\uff0c\u90fd\u662f\u5168\u5c40\u53ef\u7528\u7684\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u5206\u522b\u662f\uff1a</p> <ul> <li><code>v</code>\uff1a\u6700\u666e\u901a\u7684 <code>&lt;value_wrapper&gt;</code>\uff0c\u53ea\u662f\u7528\u6765\u89e6\u53d1 <code>__eq</code> \u5143\u65b9\u6cd5\uff0c\u4e0d\u5bf9 <code>&lt;value&gt;</code> \u505a\u989d\u5916\u7684\u5904\u7406\uff1b</li> <li><code>vv</code>\uff1averbose \u7248\u672c\u7684 <code>v</code>\uff0c\u5728\u6bd4\u8f83\u4fe1\u53f7\u7684\u503c\u65f6\uff0c\u5982\u679c\u6bd4\u8f83\u5931\u8d25\uff0c\u90a3\u4e48\u4f1a\u5728\u547d\u4ee4\u884c\u4e2d\u6253\u5370\u51fa log \u4fe1\u606f\uff0c\u4fbf\u4e8e\u8c03\u8bd5\uff0c\u62a5\u9519\u4fe1\u606f\u5982\u4e0b\u6240\u793a\uff1a     Terminal<pre><code>[tb_top.value] expect =&gt; 0132, but got =&gt; 0032\n</code></pre></li> <li><code>vs</code>\uff1averbose + stop \u7248\u672c\u7684 <code>v</code>\uff0c\u5728\u6bd4\u8f83\u4fe1\u53f7\u7684\u503c\u65f6\uff0c\u5982\u679c\u6bd4\u8f83\u5931\u8d25\uff0c\u90a3\u4e48\u4f1a\u5728\u547d\u4ee4\u884c\u4e2d\u6253\u5370\u51fa log \u4fe1\u606f\uff0c\u540c\u65f6\u8fd8\u4f1a\u89e6\u53d1 assert \u65ad\u8a00\u62a5\u9519\u505c\u6b62\u4eff\u771f\uff0c\u56e0\u6b64 <code>vs</code> \u4e5f\u7b49\u4ef7\u4e8e <code>assert(&lt;chdl&gt; == vv(&lt;value&gt;))</code>\u3002</li> </ul> <p>\u76ee\u524d <code>&lt;value&gt;</code> \u652f\u6301\u7684\u683c\u5f0f\u5305\u62ec\uff08\u4ee5 <code>v</code> \u8fd9\u4e2a <code>&lt;value_wrapper&gt;</code> \u4e3a\u4f8b\uff09\uff1a</p> <ul> <li>Lua number \u7c7b\u578b\u7684\u6570\u503c\uff1b     <pre><code>local correct = &lt;chdl&gt; == v(123)\nlocal correct = &lt;chdl&gt; == v(0x123)\n</code></pre></li> <li>Lua string \u7c7b\u578b\u7684\u5b57\u7b26\u4e32\uff08\u5bf9\u4e8e Hex \u548c Binary \u9700\u8981\u5e26\u4e0a\u524d\u7f00\uff09\uff1b     <pre><code>local correct = &lt;chdl&gt; == v(\"0x123\")\nlocal correct = &lt;chdl&gt; == v(\"0b01011\")\n</code></pre></li> <li>Lua table\uff08\u6216\u8005\u53eb list\uff09\uff0c\u91cc\u9762\u7684\u5143\u7d20\u4e3a number \u7c7b\u578b;     <pre><code>local correct = &lt;chdl&gt; == v({0x123, 0x456, 0x789})\n</code></pre></li> <li> <p>LuaJIT \u7684 <code>cdata</code>\uff0c\u5305\u62ec\u4e86\uff1a<code>uint64_t</code> \u548c <code>uint32_t[]</code>\uff1b     <pre><code>local correct = &lt;chdl&gt; == v(0x123ULL) -- uint64_t cdata\n\nlocal vec = ffi.new(\"uint32_t[?]\", 4) -- uint32_t[] cdata\nvec[1] = 0x456 -- Notice: the index is 1-based\nvec[2] = 0x789\nvec[3] = 0x000\nlocal correct = &lt;chdl&gt; == v(vec)\n</code></pre></p> <p>\u5bf9\u4e8e <code>uint32_t[]</code> \u7684\u8d4b\u503c\uff0c\u9700\u8981\u7528\u6237\u624b\u52a8\u4f7f\u7528 ffi \u521b\u5efa\uff0c\u56e0\u6b64\u5efa\u8bae\u8fd8\u662f\u91c7\u7528 Lua table \u7684\u65b9\u5f0f</p> </li> <li> <p>Lua boolean \u7c7b\u578b\u7684\u503c\uff1b     <pre><code>local correct = &lt;chdl&gt; == v(true)\nlocal correct = &lt;chdl&gt; == v(false)\n</code></pre></p> </li> <li> <p><code>BitVec</code> \u7c7b\u578b\u7684\u503c\uff1b     <pre><code>local correct = &lt;chdl&gt; == v(BitVec(123))\nlocal correct = &lt;chdl&gt; == v(BitVec(\"123\"))\n</code></pre></p> </li> </ul> <p>\u53ef\u4ee5\u5728\u4e00\u4e9b\u6027\u80fd\u4e0d\u654f\u611f\u7684\u573a\u666f\u4e0b\u4f7f\u7528\u8fd9\u79cd\u81ea\u52a8\u8bc6\u522b\u683c\u5f0f\u7684\u6bd4\u8f83\u65b9\u5f0f\uff0c\u4f8b\u5982\u5728\u4e00\u4e9b\u6a21\u5757\u7684 UT \u6d4b\u8bd5\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u7b80\u5316\u4e1a\u52a1\u4ee3\u7801</p>"},{"location":"reference/data_structure/#callablehdl-array","title":"CallableHDL \u63a5\u53e3\uff08Array\uff09","text":"<p>TODO: \u9488\u5bf9 Array \u7c7b\u578b\u7684\u4fe1\u53f7\uff0cVerilua \u7684 <code>chdl</code> \u7531\u72ec\u7acb\u7684 API \u8fdb\u884c\u8d4b\u503c\u3002</p>"},{"location":"reference/data_structure/#bundle","title":"Bundle","text":""},{"location":"reference/data_structure/#bundle_1","title":"\u521b\u5efa Bundle","text":""},{"location":"reference/data_structure/#class_1","title":"\u4f7f\u7528 class \u521b\u5efa","text":"<p><code>Bundle</code> \u662f\u4e00\u4e2a class\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c <code>class</code> \u7684\u65b9\u5f0f\u521b\u5efa\uff0c\u4f8b\u5982\uff1a</p> <pre><code>local Bundle = require \"LuaBundle\"\n\nlocal bdl = Bundle(\n    {\"valid\", \"ready\", \"opcode\", \"data\"}, -- 1. &lt;signals_table&gt;\n    \"some_prefix_\",                       -- 2. &lt;prefix&gt;\n    \"path.to.hier\",                       -- 3. &lt;hierachy&gt;\n    \"name of bundle\",                     -- 4. &lt;name&gt;\n    true,                                 -- 5. &lt;is_decoupled&gt;\n    nil                                   -- 6. &lt;optional_signals&gt;\n)\n</code></pre> <p><code>Bundle</code> \u63a5\u6536\u516d\u4e2a\u53c2\u6570\uff1a</p> <ol> <li> <p><code>signals_table</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a table\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u6240\u6709\u7684\u4fe1\u53f7\u7684\u540d\u79f0\u3002</p> </li> <li> <p><code>prefix</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4fe1\u53f7\u7684\u524d\u7f00\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u524d\u7f00\uff0c\u90a3\u4e48\u4f20\u5165\u7684\u503c\u53ef\u4ee5\u662f <code>\"\"</code>\u3002</p> </li> <li> <p><code>hierachy</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4fe1\u53f7\u7684\u5b8c\u6574 hierarchy\uff0c\u8fd9\u662f\u4e00\u4e2a\u5fc5\u9700\u6dfb\u52a0\u7684\u53c2\u6570\u3002</p> </li> <li> <p><code>name</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4fe1\u53f7\u7684\u540d\u79f0\uff0c\u53ef\u9009\u53c2\u6570\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u540d\u79f0\uff0c\u90a3\u4e48\u4f20\u5165\u7684\u503c\u53ef\u4ee5\u662f <code>nil</code>\uff0c\u6b64\u65f6\u4f1a\u5c06 <code>name</code> \u8bbe\u7f6e\u4e3a <code>\"Unknown\"</code>\u3002</p> </li> <li> <p><code>is_decoupled</code></p> <p>\u7528\u6765\u8868\u793a\u8fd9\u4e2a <code>Bundle</code> \u662f\u5426\u662f Decoupled \u7c7b\u578b\uff08\u548c Chisel \u4e2d\u7684 Decoupled \u5b9a\u4e49\u4e00\u81f4\uff09\uff0c\u53ef\u9009\u53c2\u6570\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff0c\u53ef\u4ee5\u4f20\u5165 <code>nil</code> \u6765\u4f7f\u7528\u9ed8\u8ba4\u503c\u3002</p> <p>\u5bf9\u4e8e Decoupled \u7c7b\u578b\u7684 <code>Bundle</code>\uff0c\u5176\u4e2d\u5fc5\u987b\u8981\u5728 <code>signals_table</code> \u4e2d\u5305\u542b <code>valid</code>\uff0c\u800c\u5bf9\u4e8e <code>ready</code> \u8fd9\u4e2a\u4fe1\u53f7\u662f\u53ef\u9009\u7684\u3002\u9488\u5bf9 Decoupled \u7c7b\u578b\u7684 <code>Bundle</code>\uff0c\u6709\u4e00\u4e2a <code>&lt;bdl&gt;:fire()</code> \u7684\u65b9\u6cd5\uff0c\u7528\u6765\u5224\u65ad\u4fe1\u53f7\u7684 <code>valid</code> \u662f\u5426\u4e3a <code>1</code>\uff08\u5982\u679c <code>ready</code> \u5b58\u5728\u8fd8\u4f1a\u5224\u65ad\u662f\u5426 <code>ready</code> \u4e5f\u4e3a 1\uff09\uff0c\u4f8b\u5982\uff1a <pre><code>local bdl = Bundle({\"valid\", \"ready\", \"opcode\", \"data\"}, \"some_prefix_\", \"path.to.hier\", \"name of bundle\", true)\nlocal valid = bdl.valid:chdl()\nlocal ready = bdl.ready:chdl()\n\nassert(bdl:fire())\nassert(valid:get() == 1)\nassert(ready:get() == 1)\n</code></pre></p> <p>\u5982\u679c <code>Bundle</code> \u88ab\u6807\u8bb0\u4e3a\u662f Decoupled \u7684\uff0c\u90a3\u4e48\u9664\u4e86 <code>valid</code> \u548c <code>ready</code> \u4e4b\u5916\uff0c\u5176\u4ed6\u5728 <code>signals_table</code> \u4e2d\u7684\u4fe1\u53f7\u90fd\u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0\u4e00\u4e2a <code>bits_</code> \u7684\u524d\u7f00\uff0c\u4f8b\u5982\u4e0a\u9762\u7684 bdl \u4f1a\u6709\u8fd9\u4e9b\u4fe1\u53f7\uff1a <pre><code>path.to.hier.some_prefix_valid\npath.to.hier.some_prefix_ready\npath.to.hier.some_prefix_bits_opcode\npath.to.hier.some_prefix_bits_data\n</code></pre></p> <p>\u8fd9\u6837\u8bbe\u8ba1\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u65b9\u4fbf Chisel \u7528\u6237\u4f7f\u7528 Verilua \u6765\u521b\u5efa Bundle</p> </li> <li> <p><code>optional_signals</code></p> <p>\u7528\u6765\u6807\u8bb0 <code>signals_table</code> \u4e2d\u7684\u4fe1\u53f7\u54ea\u4e9b\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u4fe1\u53f7\u88ab\u6807\u8bb0\u4e3a\u53ef\u9009\u7684\uff0c\u90a3\u4e48\u5728\u6784\u5efa <code>Bundle</code> \u7684\u65f6\u5019\u5982\u679c\u53d1\u73b0\u8fd9\u4e2a\u4fe1\u53f7\u4e0d\u5b58\u5728\uff0c\u5c31\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\u7684\u62a5\u9519\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9519\u3002</p> </li> </ol> <p>\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5c06\u4e0b\u9762\u7684\u4fe1\u53f7\u52a0\u5165\u5230 <code>Bundle</code> \u4e2d\uff1a <pre><code>path.to.hier.some_prefix_valid\npath.to.hier.some_prefix_ready\npath.to.hier.some_prefix_bits_opcode\npath.to.hier.some_prefix_bits_data\n</code></pre></p> <p>\u8fd9\u91cc\u7684\u6bcf\u4e00\u4e2a\u4fe1\u53f7\u7684\u8bbf\u95ee\u65b9\u5f0f\u5982\u4e0b\uff1a <pre><code>local valid  = bdl.valid\nlocal ready  = bdl.ready\nlocal opcode = bdl.bits.opcode\nlocal data   = bdl.bits.data\n</code></pre></p> <p>\u8fd9\u91cc\u7684\u6bcf\u4e00\u4e2a\u4fe1\u53f7\u90fd\u662f\u4e00\u4e2a <code>chdl</code></p> <p>\u5bf9\u4e8e Decoupled \u7c7b\u578b\u7684 <code>Bundle</code> \u9664\u4e86 <code>valid</code> \u548c <code>ready</code> \u4e4b\u5916\uff0c\u5176\u4ed6\u4fe1\u53f7\u7684\u8bbf\u95ee\u9700\u8981\u5728 <code>bits</code> \u4e0b\u8fdb\u884c\u8bbf\u95ee\u3002</p> <p>\u4e0a\u9762\u90fd\u662f Decoupled \u7c7b\u578b\u7684 <code>Bundle</code>\uff0c\u5bf9\u4e8e\u4e0d\u662f Decoupled \u7c7b\u578b\u7684 <code>Bundle</code>\uff0c\u8fd9\u91cc\u662f\u53e6\u4e00\u4e2a\u4f8b\u5b50\uff1a <pre><code>local bdl = Bundle({\"data0\", \"data1\", \"data2\"}, \"some_prefix_\", \"path.to.hier\", \"name of bundle\", false)\n\nlocal data0 = bdl.data0\nlocal data1 = bdl.data1\nlocal data2 = bdl.data2\n</code></pre></p>"},{"location":"reference/data_structure/#string-literal_1","title":"\u4f7f\u7528 string literal \u521b\u5efa\uff08\u63a8\u8350\uff09","text":"<p>\u548c <code>CallableHDL</code> \u4e00\u6837\uff0c<code>Bundle</code> \u4e5f\u53ef\u4ee5\u4f7f\u7528 string literal \u6765\u521b\u5efa\uff0c\u4e5f\u5c31\u662f SLCP\uff0c\u8fd9\u91cc \u6709\u4ecb\u7ecd SLCP \u7684\u597d\u5904\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a <pre><code>local bdl = ([[\n    | valid\n    | ready\n    | opcode\n    | data\n]]):bdl({hier = \"path.to.hier\", prefix = \"some_prefix_\", name = \"name of bundle\", is_decoupled = false})\n</code></pre></p> <p>Lua \u7684 <code>[[ ]]</code> \u7528\u6765\u8868\u793a\u591a\u884c\u7684\u5b57\u7b26\u4e32</p> <p>Lua \u4e2d\u5982\u679c\u51fd\u6570\u7684\u53c2\u6570\u53ea\u6709\u4e00\u4e2a\uff0c\u4e14\u8fd9\u4e2a\u53c2\u6570\u7684\u7c7b\u578b\u662f string \u6216\u8005 table\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u7701\u7565\u5706\u62ec\u53f7\uff0c\u56e0\u6b64\u4e0a\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a<code>local bdl = ([[ | valid | ready | opcode | data ]]):bdl {...}</code></p> <p>\u4e0a\u8ff0\u7684\u4ee3\u7801\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u4fe1\u53f7\u9700\u8981\u7528 <code>|</code> \u5206\u9694\u5f00\uff0c\u6362\u884c\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u56e0\u6b64\u4e0b\u9762\u7684\u505a\u6cd5\u4e5f\u662f\u53ef\u4ee5\u7684\uff1a <pre><code>local bdl = (\"valid | ready | opcode | data\"):bdl {...}\nlocal bdl = (\"| valid | ready | opcode | data\"):bdl {...}\nlocal bdl = (\"| valid |      ready | opcode    | data |\"):bdl {...}\nlocal bdl = ([[ valid | ready\n| opcode\n   | data\n]]):bdl {...}\n</code></pre></p> <p>\u4f7f\u7528 SLCP \u8fdb\u884c\u6784\u5efa\u7684\u65f6\u5019\uff0c\u53c2\u6570\u7528 table \u7684\u5f62\u5f0f\u4f20\u5165\uff08key-value \u7684\u5f62\u5f0f\uff09\uff0c\u56e0\u6b64\u8fd9\u4e9b\u53c2\u6570\u540d\u548c\u4f7f\u7528 <code>class</code> \u6784\u5efa\u7684\u65f6\u5019\u7684\u53c2\u6570\u540d\u4e00\u81f4\u3002</p>"},{"location":"reference/data_structure/#bundle_2","title":"Bundle \u63a5\u53e3","text":"<p><code>Bundle</code> \u7684\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4fe1\u53f7\u7684\u6210\u5458\u53d8\u91cf\u4ecd\u7136\u8fd8\u662f\u4e00\u4e2a <code>CallableHDL</code></p> <p>\u5982\u679c\u8981\u8bbf\u95ee\u5bf9\u5e94\u4fe1\u53f7\u7684\u503c\uff0c\u548c <code>CallableHDL</code> \u4e00\u6837\u64cd\u4f5c\u5373\u53ef\uff0c\u4f8b\u5982\uff1a <pre><code>local bdl = (\"valid | ready | opcode | data\"):bdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", is_decoupled = true}\nlocal valid_value = bdl.valid:get()\nlocal ready_value = bdl.ready:get()\n\nbdl.bits.opcode:set(0x123)\nbdl.bits.data:set(0x456)\n</code></pre></p> <ol> <li> <p><code>&lt;bdl&gt;:fire()</code></p> <p>\u5224\u65ad\u4fe1\u53f7\u7684 <code>valid</code> \u662f\u5426\u4e3a <code>1</code>\uff08\u5982\u679c <code>ready</code> \u5b58\u5728\u8fd8\u4f1a\u5224\u65ad\u662f\u5426 <code>ready</code> \u4e5f\u4e3a 1\uff09\uff0c\u4f8b\u5982\uff1a <pre><code>local bdl = (\"valid | ready | opcode | data\"):bdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", is_decoupled = true}\nlocal valid = bdl.valid:chdl()\nlocal ready = bdl.ready:chdl()\n\nassert(bdl:fire())\nassert(valid:get() == 1)\nassert(ready:get() == 1)\n</code></pre></p> <p>\u53ea\u6709 is_decoupled \u4e3a <code>true</code> \u7684 <code>Bundle</code> \u624d\u6709\u8fd9\u4e2a\u65b9\u6cd5</p> </li> <li> <p><code>&lt;bdl&gt;:get_all()</code></p> <p>\u83b7\u5f97\u6240\u6709\u7684\u4fe1\u53f7\uff0c\u5e76\u4ee5 Lua table \u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u4f8b\u5982\uff1a <pre><code>local bdl = (\"opcode | data \"):bdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", is_decoupled = false}\nlocal signals = bdl:get_all()\nlocal opcode_value = signals[1]\nlocal data_value = signals[2]\n</code></pre></p> <p>\u53ea\u6709 is_decoupled \u4e3a <code>false</code> \u7684 <code>Bundle</code> \u624d\u6709\u8fd9\u4e2a\u65b9\u6cd5</p> </li> <li> <p><code>&lt;bdl&gt;:set_all(values_tbl)</code></p> <p>\u8bbe\u7f6e\u6240\u6709\u7684\u4fe1\u53f7\uff0c\u5e76\u4ee5 Lua table \u7684\u5f62\u5f0f\u8fd4\u56de\uff0c\u4f8b\u5982\uff1a <pre><code>local bdl = (\"opcode | data\"):bdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", is_decoupled = false}\nlocal signals = bdl:set_all({0x123, 0x456})\n</code></pre></p> <p>\u53ea\u6709 is_decoupled \u4e3a <code>false</code> \u7684 <code>Bundle</code> \u624d\u6709\u8fd9\u4e2a\u65b9\u6cd5</p> </li> <li> <p><code>&lt;bdl&gt;:dump()</code></p> <p>\u5c06 <code>Bundle</code> \u4e2d\u6240\u6709\u7684\u4fe1\u53f7\u5f53\u524d\u7684\u6570\u503c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b\u4fe1\u53f7\u7684\u503c\uff0c\u6253\u5370\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a Terminal<pre><code>[name of bundle] | valid: 0x1 | ready: 0x1 | opcode: 0x123 | data: 0x456\n</code></pre></p> </li> <li> <p><code>&lt;bdl&gt;:dump_str()</code></p> <p>\u4f1a\u5c06\u539f\u672c<code>&lt;bdl&gt;:dump()</code> \u7684\u8f93\u51fa\u7684\u5185\u5bb9\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\u8fdb\u884c\u8fd4\u56de\uff0c\u56e0\u6b64 <code>&lt;bdl&gt;:dump()</code> \u4e5f\u7b49\u4ef7\u4e8e <code>print(&lt;bdl&gt;:dump_str())</code>\u3002</p> </li> <li> <p><code>&lt;bdl&gt;:format_dump(format_func)</code></p> <p>\u5c06 <code>Bundle</code> \u4e2d\u7684\u6240\u6709\u4fe1\u53f7\u7684\u5f53\u524d\u7684\u6570\u503c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u53ef\u9009\u7684 <code>format_func</code>\uff0c\u7c7b\u578b\u4e3a <code>fun(chdl, name: string): string</code>\uff0c \u8fd9\u4e2a\u51fd\u6570\u4f1a\u5728\u8f93\u51fa\u6bcf\u4e2a\u4fe1\u53f7\u7684\u503c\u4e4b\u524d\u88ab\u8c03\u7528\uff0c\u5982\u679c\u7528\u6237\u5728 <code>format_func</code> \u4e2d\u8fd4\u56de\u4e00\u4e2a\u975e <code>nil</code> \u7684 string\uff0c\u90a3\u4e48\u5c31\u4f1a\u66ff\u6362\u539f\u6709\u7684\u503c\u8fdb\u884c\u8f93\u51fa\uff0c\u4f8b\u5982\uff1a <pre><code>local bdl = (\"valid | value0 | value1 | other\"):bdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", is_decoupled = false, name = \"name of bundle\"}\n\nbdl:format_dump(function(chdl, name)\n    if chdl.width == 1 and name:contains(value) then\n        return name .. \" is \" .. chdl:get_hex_str()\n    end\nend)\n</code></pre></p> <p>\u4e0a\u8ff0\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a Terminal<pre><code>[name of bundle] | valid: 0x1 | value0 is 0x1 | value1 is 0x0 | other: 0x0\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u53ea\u6709 <code>value0</code> \u548c <code>value1</code> \u88ab\u66ff\u6362\u4e86\uff0c\u800c <code>other</code> \u6ca1\u6709\u88ab\u66ff\u6362\u3002</p> </li> <li> <p><code>&lt;bdl&gt;:format_dump_str(format_func)</code>     \u4f1a\u5c06\u539f\u672c <code>&lt;bdl&gt;:format_dump()</code> \u7684\u8f93\u51fa\u7684\u5185\u5bb9\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\u8fdb\u884c\u8fd4\u56de\uff0c\u56e0\u6b64 <code>&lt;bdl&gt;:format_dump()</code> \u4e5f\u7b49\u4ef7\u4e8e <code>print(&lt;bdl&gt;:format_dump_str())</code>\u3002</p> </li> </ol>"},{"location":"reference/data_structure/#aliasbundle","title":"AliasBundle","text":""},{"location":"reference/data_structure/#aliasbundle_1","title":"\u521b\u5efa AliasBundle","text":""},{"location":"reference/data_structure/#class_2","title":"\u4f7f\u7528 class \u521b\u5efa","text":"<p><code>AliasBundle</code> \u662f\u4e00\u4e2a class\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c <code>class</code> \u7684\u65b9\u5f0f\u521b\u5efa\uff0c\u4f8b\u5982\uff1a</p> <p><pre><code>local AliasBundle = require \"LuaAliasBundle\"\nlocal abdl = AliasBundle(\n    {\n        {\"origin_signal_name\",   \"alias_name\"  },\n        {\"origin_signal_name_1\"  \"alias_name_1\"},\n    },                                            -- 1. &lt;alias_signal_tbl&gt;\n    \"some_prefix\",                                -- 2. &lt;prefix&gt;\n    \"path.to.hier\",                               -- 3. &lt;hierachy&gt;\n    \"name of alias bundle\",                       -- 4. &lt;name&gt;\n    nil                                           -- 5. &lt;optional_signals&gt;\n)\n</code></pre> <code>AliasBundle</code> \u63a5\u6536\u4e94\u4e2a\u53c2\u6570\uff1a</p> <ol> <li> <p><code>alias_signal_tbl</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a table\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u8fd8\u662f\u4e00\u4e2a table\uff0c\u5e76\u4e14\u5305\u62ec\u4e24\u4e2a\u5143\u7d20\uff0c\u5206\u522b\u662f\u4fe1\u53f7\u7684\u539f\u59cb\u540d\u79f0\u548c\u4fe1\u53f7\u60f3\u8981\u521b\u5efa\u7684\u522b\u540d\u3002</p> </li> <li> <p><code>prefix</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4fe1\u53f7\u7684\u524d\u7f00\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u524d\u7f00\uff0c\u90a3\u4e48\u4f20\u5165\u7684\u503c\u53ef\u4ee5\u662f <code>\"\"</code>\u3002</p> </li> <li> <p><code>hierachy</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4fe1\u53f7\u7684\u5b8c\u6574 hierarchy\uff0c\u8fd9\u662f\u4e00\u4e2a\u5fc5\u9700\u6dfb\u52a0\u7684\u53c2\u6570\u3002</p> </li> <li> <p><code>name</code></p> <p>\u8fd9\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4fe1\u53f7\u7684\u540d\u79f0\uff0c\u53ef\u9009\u53c2\u6570\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u540d\u79f0\uff0c\u90a3\u4e48\u4f20\u5165\u7684\u503c\u53ef\u4ee5\u662f <code>nil</code>\uff0c\u6b64\u65f6\u4f1a\u5c06 <code>name</code> \u8bbe\u7f6e\u4e3a <code>\"Unknown\"</code>\u3002</p> </li> <li> <p><code>optional_signals</code></p> <p>\u7528\u6765\u6807\u8bb0 <code>signals_table</code> \u4e2d\u7684\u4fe1\u53f7\u54ea\u4e9b\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u4fe1\u53f7\u88ab\u6807\u8bb0\u4e3a\u53ef\u9009\u7684\uff0c\u90a3\u4e48\u5728\u6784\u5efa <code>AliasBundle</code> \u7684\u65f6\u5019\u5982\u679c\u53d1\u73b0\u8fd9\u4e2a\u4fe1\u53f7\u4e0d\u5b58\u5728\uff0c\u5c31\u4f1a\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\u7684\u62a5\u9519\uff0c\u5426\u5219\u5c31\u4f1a\u62a5\u9519\u3002</p> </li> </ol> <p>\u4e0a\u8ff0\u4ee3\u7801\u4f1a\u5c06\u4e0b\u9762\u7684\u4fe1\u53f7\u52a0\u5165\u5230 <code>AliasBundle</code> \u4e2d\uff1a <pre><code>path.to.hier.some_prefix_origin_signal_name\npath.to.hier.some_prefix_origin_signal_name_1\n</code></pre></p> <p>\u7531\u4e8e <code>AliasBundle</code> \u80fd\u591f\u4e3a\u4fe1\u53f7\u521b\u5efa\u522b\u540d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u522b\u540d\u6765\u8bbf\u95ee\u4fe1\u53f7\uff0c\u4f8b\u5982\u5bf9\u4e8e\u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u53ef\u4ee5\u8fd9\u6837\u5b50\u8bbf\u95ee\u4fe1\u53f7\uff1a <pre><code>local value = abdl.alias_name:get()\nabdl.alias_name_1:set(123)\n</code></pre></p>"},{"location":"reference/data_structure/#string-literal_2","title":"\u4f7f\u7528 string literal \u521b\u5efa\uff08\u63a8\u8350\uff09","text":"<p>\u548c <code>Bundle</code> \u4e00\u6837\uff0c<code>AliasBundle</code> \u4e5f\u53ef\u4ee5\u4f7f\u7528 string literal \u6765\u521b\u5efa\uff0c\u4e5f\u5c31\u662f SLCP\uff0c\u8fd9\u91cc \u6709\u4ecb\u7ecd SLCP \u7684\u597d\u5904\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a <pre><code>local abdl = ([[\n    | origin_signal_name =&gt; alias_name\n    | origin_signal_name_1 =&gt; alias_name_1\n]]):abdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", name = \"name of alias bundle\"}\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u5230\u548c <code>Bundle</code> \u4e0d\u4e00\u6837\u7684\u5730\u65b9\u5728\u4e8e\u53ef\u4ee5\u4f7f\u7528 <code>=&gt;</code> \u6765\u521b\u5efa\u522b\u540d\u3002\u5b9e\u9645\u4e0a\u5e76\u4e0d\u8981\u6c42\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4fe1\u53f7\u90fd\u8981\u6709\u522b\u540d\uff0c\u56e0\u6b64\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\u4e5f\u662f\u5141\u8bb8\u7684\uff1a <pre><code>local abdl = ([[\n    | origin_signal_name\n    | origin_signal_name_1 =&gt; alias_name_1\n]]):abdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", name = \"name of alias bundle\"}\n</code></pre></p> <p>\u751a\u81f3\u53ef\u4ee5\u90fd\u4e0d\u521b\u5efa\u522b\u540d\uff0c\u8fd9\u6837\u5c31\u548c <code>Bundle</code> \u4e00\u6837\u4e86\uff0c\u56e0\u6b64\u4e0b\u9762\u8fd9\u79cd\u60c5\u51b5\u4e5f\u662f\u5141\u8bb8\u7684\uff1a <pre><code>local abdl = ([[\n    | origin_signal_name\n    | origin_signal_name_1\n]]):abdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", name = \"name of alias bundle\"}\n</code></pre></p>"},{"location":"reference/data_structure/#aliasbundle_2","title":"AliasBundle \u63a5\u53e3","text":"<ol> <li> <p><code>&lt;abdl&gt;:dump()</code></p> <p>\u5c06 <code>AliasBundle</code> \u4e2d\u6240\u6709\u7684\u4fe1\u53f7\u5f53\u524d\u7684\u6570\u503c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u7528\u4e8e\u67e5\u770b\u4fe1\u53f7\u7684\u503c\uff0c\u6253\u5370\u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a Terminal<pre><code>[name of alias bundle] | origin_signal_name -&gt; alias_name: 0x1 | origin_signal_name_1 -&gt; alias_name_1: 0x123\n</code></pre></p> </li> <li> <p><code>&lt;abdl&gt;:dump_str()</code></p> <p>\u4f1a\u5c06\u539f\u672c<code>&lt;abdl&gt;:dump()</code> \u7684\u8f93\u51fa\u7684\u5185\u5bb9\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\u8fdb\u884c\u8fd4\u56de\uff0c\u56e0\u6b64 <code>&lt;abdl&gt;:dump()</code> \u4e5f\u7b49\u4ef7\u4e8e <code>print(&lt;abdl&gt;:dump_str())</code>\u3002</p> </li> <li> <p><code>&lt;abdl&gt;:format_dump(format_func)</code></p> <p>\u5c06 <code>Bundle</code> \u4e2d\u7684\u6240\u6709\u4fe1\u53f7\u7684\u5f53\u524d\u7684\u6570\u503c\u8f93\u51fa\u5230\u63a7\u5236\u53f0\uff0c\u53ef\u4ee5\u63a5\u6536\u4e00\u4e2a\u53ef\u9009\u7684 <code>format_func</code>\uff0c\u7c7b\u578b\u4e3a <code>fun(chdl, name: string, alias_name: string): string</code>\uff0c \u8fd9\u4e2a\u51fd\u6570\u4f1a\u5728\u8f93\u51fa\u6bcf\u4e2a\u4fe1\u53f7\u7684\u503c\u4e4b\u524d\u88ab\u8c03\u7528\uff0c\u5982\u679c\u7528\u6237\u5728 <code>format_func</code> \u4e2d\u8fd4\u56de\u4e00\u4e2a\u975e <code>nil</code> \u7684 string\uff0c\u90a3\u4e48\u5c31\u4f1a\u66ff\u6362\u539f\u6709\u7684\u503c\u8fdb\u884c\u8f93\u51fa\uff0c\u4f8b\u5982\uff1a <pre><code>local abdl = (\"valid | value0 -&gt; v0 | value1 -&gt; v1 | other -&gt; o\"):abdl {hier = \"path.to.hier\", prefix = \"some_prefix_\", name = \"name of abdl\"}\n\nabdl:format_dump(function(chdl, name, alias_name)\n    if chdl.width == 1 and name:contains(value) then\n        return name .. \" is \" .. chdl:get_hex_str() .. \" with alias name: \" .. alias_name\n    end\nend)\n</code></pre></p> <p>\u4e0a\u8ff0\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\u6240\u793a\uff1a Terminal<pre><code>[name of abdl] | valid: 0x1 | value0 is 0x1 with alias name: v0 | value1 is 0x0 with alias name: v1 | other -&gt; o: 0x0\n</code></pre></p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u53ea\u6709 <code>value0</code> \u548c <code>value1</code> \u88ab\u66ff\u6362\u4e86\uff0c\u800c <code>other</code> \u6ca1\u6709\u88ab\u66ff\u6362\u3002</p> </li> <li> <p><code>&lt;abdl&gt;:format_dump_str(format_func)</code>     \u4f1a\u5c06\u539f\u672c <code>&lt;abdl&gt;:format_dump()</code> \u7684\u8f93\u51fa\u7684\u5185\u5bb9\u4f5c\u4e3a\u4e00\u4e2a\u8fd4\u56de\u503c\u8fdb\u884c\u8fd4\u56de\uff0c\u56e0\u6b64 <code>&lt;abdl&gt;:format_dump()</code> \u4e5f\u7b49\u4ef7\u4e8e <code>print(&lt;abdl&gt;:format_dump_str())</code>\u3002</p> </li> </ol>"},{"location":"reference/data_structure/#proxytablehandle","title":"ProxyTableHandle","text":"<p><code>ProxyTableHandle</code> \u4e0d\u9700\u8981\u7528\u6237\u521b\u5efa\uff0c\u5168\u5c40\u6709\u4e14\u53ea\u6709\u4e00\u4e2a <code>ProxyTableHandle</code> \u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f <code>dut</code> \u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\u3002</p> <p><code>ProxyTableHandle</code> \u662f\u4e00\u4e2a\u4ee3\u7406\u8868\uff0c\u5176\u5b50\u53d8\u91cf\u4ecd\u7136\u662f <code>&lt;dut&gt;</code></p> <pre><code>local a = dut.path.to.signal\nlocal b = dut.path.signal\nassert(dut.__type == \"ProxyTableHandle\")\nassert(a.__type == \"ProxyTableHandle\")\nassert(b.__type == \"ProxyTableHandle\")\n</code></pre> <p>\u5bf9\u4e8e <code>CallableHDL</code>\u3001<code>Bundle</code>\u3001<code>AliasBundle</code>\u3001<code>ProxyTableHandle</code> \u90fd\u53ef\u4ee5\u4f7f\u7528 <code>__type</code> \u5b57\u6bb5\u6765\u5224\u65ad\u5176\u7c7b\u578b</p>"},{"location":"reference/data_structure/#proxytablehandle_1","title":"ProxyTableHandle \u63a5\u53e3","text":"<ol> <li> <p><code>&lt;dut&gt;:get_local_path()</code></p> <p>\u83b7\u5f97\u5f53\u524d\u7684 hierarchy path\uff0c\u4f8b\u5982\uff1a <pre><code>assert(dut:get_local_path() == \"tb_top\") -- assume that the top module is `tb_top`\nassert(dut.path.to.hier:get_local_path() == \"tb_top.path.to.hier\")\n</code></pre></p> </li> <li> <p><code>&lt;dut&gt;:set(&lt;value&gt;)</code></p> <p>\u8bbe\u7f6e\u4e00\u4e2a\u4fe1\u53f7\u7684\u503c\uff0c<code>&lt;value&gt;</code> \u53ea\u80fd\u662f\u4e00\u4e2a Lua number \u7c7b\u578b\u7684\u503c\uff0c\u4f8b\u5982\uff1a <pre><code>dut.value:set(0x123)\n</code></pre></p> <p>\u76ee\u524d <code>&lt;dut&gt;:set(&lt;value&gt;)</code> \u53ea\u80fd\u8d4b\u503c 32 bit \u7684\u6570\u636e\u5230\u4fe1\u53f7\u4e2d</p> </li> <li> <p><code>&lt;dut&gt;:set_imm(&lt;value&gt;)</code></p> <p>\u7acb\u5373\u8d4b\u503c\u7248\u672c\u7684 <code>set</code>\uff0c\u9664\u4e86\u7acb\u5373\u8d4b\u503c\u7684\u5c5e\u6027\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set</code> \u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_shuffled(&lt;value&gt;)</code></p> <p>\u5bf9\u4fe1\u53f7\u8fdb\u884c\u968f\u673a\u8d4b\u503c\uff0c\u8fd9\u5728\u9a8c\u8bc1\u4e2d\u5f88\u5e38\u7528\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_force(&lt;value&gt;)</code></p> <p>\u5f3a\u5236\u8d4b\u503c\uff08\u4e0e <code>set_release</code> \u914d\u5408\u4f7f\u7528\uff09\uff0c\u4e0e SystemVerilog \u4e2d\u7684 <code>force</code> \u5173\u952e\u5b57\u76f8\u540c\u3002\u9664\u4e86 <code>force</code> \u8fd9\u4e2a\u5c5e\u6027\u4e0a\u7684\u533a\u522b\u4e4b\u5916\uff0c\u5176\u4ed6\u548c <code>set</code> \u4e00\u6837\u3002</p> <p><code>&lt;value&gt;</code> \u53ea\u80fd\u662f\u4e00\u4e2a Lua number\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_release()</code></p> <p>\u91ca\u653e\u8d4b\u503c\uff08\u4e0e <code>set_force</code> \u914d\u5408\u4f7f\u7528\uff09\uff0c\u4e0e SystemVerilog \u4e2d\u7684 <code>release</code> \u5173\u952e\u5b57\u76f8\u540c\u3002\u5bf9\u4e8e\u4f7f\u7528\u4e86 <code>set_force</code> \u7684\u4fe1\u53f7\uff0c\u9700\u8981\u4f7f\u7528 <code>set_release</code> \u6765\u91ca\u653e\u8d4b\u503c\uff0c\u5426\u5219\u4f1a\u5bfc\u81f4\u4fe1\u53f7\u7684\u503c\u4e0d\u4f1a\u66f4\u65b0\u3002</p> </li> <li> <p><code>&lt;dut&gt;:force_all()</code></p> <p>\u4f7f\u7528\u4e86 <code>&lt;dut&gt;:force_all()</code> \u4e4b\u540e\uff0c\u63a5\u4e0b\u6765 <code>dut</code> \u7684\u6240\u6709\u8d4b\u503c\u64cd\u4f5c\u90fd\u4f1a\u8f6c\u5316\u4e3a <code>force</code> \u7c7b\u578b\u7684\u8d4b\u503c\u3002</p> </li> <li> <p><code>&lt;dut&gt;:release_all()</code></p> <p>\u89e3\u9664 <code>&lt;dut&gt;:force_all()</code> \u7684\u4f5c\u7528\u3002</p> </li> <li> <p><code>&lt;dut&gt;:force_region(func)</code></p> <p>\u5728\u4e00\u4e2a\u533a\u57df\u5185\uff08\u4e5f\u5c31\u662f <code>func</code>\uff09\u5f3a\u5236\u8d4b\u503c\uff0c\u8fd9\u4e2a\u533a\u57df\u5185\u7684\u6240\u6709\u8d4b\u503c\u64cd\u4f5c\u90fd\u4f1a\u8f6c\u5316\u4e3a <code>force</code> \u7c7b\u578b\u7684\u8d4b\u503c\u3002 <pre><code>dut:force_region(function ()\n    dut.value:set(0x123)\n    dut.value:set(0x456)\nend)\n</code></pre></p> </li> <li> <p><code>&lt;dut&gt;:get()</code></p> <p>\u83b7\u5f97\u4e00\u4e2a\u4fe1\u53f7\u7684\u503c\uff0c\u8fd4\u56de\u7684\u503c\u662f\u4e00\u4e2a Lua \u7684 number \u7c7b\u578b\u7684\u503c\uff0c\u4f8b\u5982\uff1a <pre><code>assert(dut.value:get() == 0x123)\n</code></pre></p> <p>\u5bf9\u4e8e\u8d85\u8fc7 32 bit \u7684\u4fe1\u53f7\uff0c\u8fd4\u56de\u7684\u503c\u4ecd\u7136\u662f 32 bit \u7684\u6570\u503c\u3002</p> </li> <li> <p><code>&lt;dut&gt;:get_str(fmt)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:get_str(fmt)</code>\u3002 </p> </li> <li> <p><code>&lt;dut&gt;:get_hex_str()</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:get_hex_str()</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_str(str)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:set_str(str)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_hex_str(str)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:set_hex_str(str)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_force_str(str)</code></p> <p><code>force</code> \u7248\u672c\u7684 <code>&lt;dut&gt;:set_str(str)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:posedge(times, func)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:posedge(times, func)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:negedge(times, func)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:negedge(times, func)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:posedge_until(max_limit, func)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:posedge_until(max_limit, func)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:negedge_until(max_limit, func)</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:negedge_until(max_limit, func)</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:chdl()</code></p> <p>\u57fa\u4e8e <code>dut</code> \u5f53\u524d\u7684 hierarchy path \u8fd4\u56de\u4e00\u4e2a <code>chdl</code>\uff0c\u4f8b\u5982\uff1a <pre><code>local clock = dut.path.to.clock:chdl()\n\n-- equivalent to\n\nlocal clock = (\"tb_top.path.to.clock\"):chdl()\n</code></pre></p> <p>\u8fd9\u91cc\u4ecb\u7ecd\u4e86\u6709\u5173\u4f7f\u7528 <code>&lt;dut&gt;:chdl()</code> \u521b\u5efa <code>chdl</code> \u7684\u6280\u5de7\u3002</p> </li> <li> <p><code>&lt;dut&gt;:get_width()</code></p> <p>\u83b7\u5f97\u4fe1\u53f7\u7684\u4f4d\u5bbd\u3002</p> </li> <li> <p><code>&lt;dut&gt;:dump()</code> / <code>&lt;dut&gt;:dump_str()</code></p> <p>\u4f5c\u7528\u7c7b\u4f3c <code>&lt;chdl&gt;:dump()</code> / <code>&lt;chdl&gt;:dump_str()</code>\u3002</p> </li> <li> <p><code>&lt;dut&gt;:expect(value)</code> / <code>&lt;dut&gt;:expect_not(value)</code> / <code>&lt;dut&gt;:expect_hex_str(hex_value_str)</code> / <code>&lt;dut&gt;:expect_bin_str(bin_value_str)</code> / <code>&lt;dut&gt;:expect_dec_str(dec_value_str)</code> / <code>&lt;dut&gt;:expect_not_hex_str(hex_value_str)</code> / <code>&lt;dut&gt;:expect_not_bin_str(bin_value_str)</code> / <code>&lt;dut&gt;:expect_not_dec_str(dec_value_str)</code></p> <p>\u4f5c\u7528\u90fd\u548c <code>chdl</code> \u7684\u5bf9\u5e94\u65b9\u6cd5\u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;dut&gt;:is(value)</code> / <code>&lt;dut&gt;:is_not(value)</code> / <code>&lt;dut&gt;:is_hex_str(hex_value_str)</code> / <code>&lt;dut&gt;:is_bin_str(bin_value_str)</code> / <code>&lt;dut&gt;:is_dec_str(dec_value_str)</code></p> <p>\u4f5c\u7528\u90fd\u548c <code>chdl</code> \u7684\u5bf9\u5e94\u65b9\u6cd5\u4e00\u6837\u3002</p> </li> <li> <p><code>&lt;dut&gt;:with_prefix(prefix_str)</code></p> <p>\u57fa\u4e8e\u5f53\u524d\u7684 hierarchy path \u521b\u5efa\u4e00\u4e2a\u65b0\u7684 <code>ProxyTableHandle</code>\uff0c\u5e76\u4e14\u4f1a\u5bf9\u540e\u7eed\u7684\u4efb\u4f55\u4fe1\u53f7\u8bbf\u95ee\u52a0\u4e0a <code>prefix_str</code> \u524d\u7f00\u3002 <pre><code>local io_in = dut.path.to.mod:with_prefix(\"io_in_\")\nassert(io_in.value:get_local_path() == \"top.path.to.mod.io_in_value\")\nassert(io_in.data:get_local_path() == \"top.path.to.mod.io_in_data\")\n</code></pre></p> </li> <li> <p><code>&lt;dut&gt;:auto_bundle(params)</code></p> <p>\u521b\u5efa\u4e00\u4e2a <code>Bundle</code> \u5bf9\u8c61\uff0c\u5e76\u4e14\u4f1a\u6839\u636e <code>params</code> \u7684\u914d\u7f6e\u8fdb\u884c\u5339\u914d\uff0c\u4ece\u800c\u521b\u5efa\u51fa\u4e00\u4e2a\u7b26\u5408\u7279\u5b9a\u4fe1\u53f7\u540d\u79f0\u89c4\u5f8b\u7684 <code>Bundle</code> \u5bf9\u8c61\u3002</p> <p><code>params</code> \u662f\u4e00\u4e2a table\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u53ef\u9009\u7684\u914d\u7f6e\uff0c\u5177\u4f53\u7684\u53ef\u9009\u914d\u7f6e\u5982\u4e0b\uff1a</p> <ul> <li> <p><code>startswith</code></p> <p>\u5339\u914d\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u4fe1\u53f7\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bbe\u7f6e <code>startswith = \"axi_\"</code>\uff0c\u90a3\u4e48\u53ea\u6709\u4ee5 <code>axi_</code> \u5f00\u5934\u7684\u4fe1\u53f7\u4f1a\u88ab\u5305\u542b\u5728 <code>Bundle</code> \u4e2d\u3002 <pre><code>-- assume the following signals exist:\n--      tb_top.path.to.mod.axi_aw_valid\n--      tb_top.path.to.mod.axi_ar_valid\n--      tb_top.path.to.mod.axi_w_valid\n--      tb_top.path.to.mod.axi_r_valid\nlocal bdl = dut.path.to.mod:auto_bundle { startswith = \"axi_\" }\n\nassert(bdl.axi_aw_valid.__type == \"CallableHDL\")\nassert(bdl.axi_ar_valid.__type == \"CallableHDL\")\nassert(bdl.axi_w_valid.__type == \"CallableHDL\")\nassert(bdl.axi_r_valid.__type == \"CallableHDL\")\n</code></pre></p> </li> <li> <p><code>endswith</code></p> <p>\u5339\u914d\u4ee5\u6307\u5b9a\u5b57\u7b26\u4e32\u7ed3\u5c3e\u7684\u4fe1\u53f7\u540d\u79f0\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bbe\u7f6e <code>endswith = \"_valid\"</code>\uff0c\u90a3\u4e48\u53ea\u6709\u4ee5 <code>_valid</code> \u7ed3\u5c3e\u7684\u4fe1\u53f7\u4f1a\u88ab\u5305\u542b\u5728 <code>Bundle</code> \u4e2d\u3002</p> <pre><code>-- assume the following signals exist:\n--      tb_top.path.to.mod.axi_aw_valid\n--      tb_top.path.to.mod.axi_ar_valid\n--      tb_top.path.to.mod.axi_w_valid\n--      tb_top.path.to.mod.axi_r_valid\nlocal bdl = dut.path.to.mod:auto_bundle { endswith = \"_valid\" }\n\nassert(bdl.axi_aw_valid.__type == \"CallableHDL\")\nassert(bdl.axi_ar_valid.__type == \"CallableHDL\")\nassert(bdl.axi_w_valid.__type == \"CallableHDL\")\nassert(bdl.axi_r_valid.__type == \"CallableHDL\")\n</code></pre> <p><code>endswith</code> \u53ef\u4ee5\u548c <code>startswith</code> \u4e00\u8d77\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a<code>startswith = \"axi_\", endswith = \"_valid\"</code>\u3002</p> </li> <li> <p><code>matches</code></p> <p>\u5339\u914d\u67d0\u4e2a\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8bbe\u7f6e <code>matches = \"data_[0-9]+\"</code>\uff0c\u90a3\u4e48\u53ea\u6709\u7b26\u5408 <code>data_[0-9]+</code> \u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u4fe1\u53f7\uff08\u5982 data_0\u3001data_1 \u7b49\uff09\u4f1a\u88ab\u5305\u542b\u5728 <code>Bundle</code> \u4e2d\u3002</p> </li> <li> <p><code>filter</code></p> <p>\u8fc7\u6ee4\u51fd\u6570\uff0c\u53ef\u4ee5\u6839\u636e\u4fe1\u53f7\u540d\u79f0\u548c\u4fe1\u53f7\u5bbd\u5ea6\u6765\u8fc7\u6ee4\u6389\u4e0d\u9700\u8981\u7684\u4fe1\u53f7\u3002\u8be5\u51fd\u6570\u63a5\u53d7\u4e24\u4e2a\u53c2\u6570\uff1a\u4fe1\u53f7\u540d\u79f0\u548c\u4fe1\u53f7\u5bbd\u5ea6\uff0c\u8fd4\u56de true \u8868\u793a\u4fdd\u7559\u8be5\u4fe1\u53f7\uff0c\u8fd4\u56de false \u8868\u793a\u8fc7\u6ee4\u6389\u8be5\u4fe1\u53f7\u3002</p> <pre><code>-- assume the following signals exist:\n--      tb_top.path.to.mod.value_0  -- width = 1\n--      tb_top.path.to.mod.value_1  -- width = 32\n--      tb_top.path.to.mod.value_2  -- width = 64\n--      tb_top.path.to.mod.value_3  -- width = 128\nlocal bdl = dut.path.to.mod:auto_bundle { filter = function (name, width)\n    return width &gt; 1\nend }\n\nassert(bdl.value_0 == nil)\nassert(bdl.value_1.__type == \"CallableHDL\")\nassert(bdl.value_2.__type == \"CallableHDL\")\nassert(bdl.value_3.__type == \"CallableHDL\")\n</code></pre> </li> <li> <p><code>prefix</code></p> <p>\u548c <code>startswith</code> \u7c7b\u4f3c\uff0c\u4f46\u662f\u5728\u5339\u914d\u4fe1\u53f7\u540d\u79f0\u65f6\u4f1a\u5c06 <code>prefix</code> \u524d\u7f00\u52a0\u5230\u4fe1\u53f7\u540d\u79f0\u4e2d\u3002 <pre><code>-- assume the following signals exist:\n--      tb_top.path.to.mod.io_in_value_0\n--      tb_top.path.to.mod.io_in_value_1\n--      tb_top.path.to.mod.io_in_value_2\n--      tb_top.path.to.mod.io_in_value_3\nlocal bdl = dut.path.to.mod:auto_bundle { prefix = \"io_in_\" }\n\nassert(bdl.value_0.__type == \"CallableHDL\")\nassert(bdl.value_1.__type == \"CallableHDL\")\nassert(bdl.value_2.__type == \"CallableHDL\")\nassert(bdl.value_3.__type == \"CallableHDL\")\n</code></pre></p> </li> </ul> <p>\u4e0a\u9762\u7684\u53c2\u6570\u4e2d\uff0c\u5982\u679c\u6ca1\u6709\u7279\u522b\u8bf4\u660e\u53ef\u4ee5\u548c\u53e6\u5916\u7684\u53c2\u6570\u4f7f\u7528\uff0c\u90a3\u4e48\u5c31\u4e0d\u80fd\u5408\u5e76\u4f7f\u7528</p> </li> <li> <p><code>&lt;dut&gt;:__newindex(k, v)</code></p> <p><code>ProxyTableHandle</code> \u5b9e\u73b0\u4e86 <code>__newindex</code> \u8fd9\u4e2a Lua \u7684 metatable \u5143\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u4e00\u4e2a\u4fe1\u53f7\u7684\u503c\uff0c\u4f8b\u5982\uff1a <pre><code>dut.path.to.signal = 10\n-- equivalent to\ndut.path.to.signal:set_imm(10)\n</code></pre></p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u79cd\u65b9\u5f0f\u8d4b\u503c\u53ea\u80fd\u8d4b\u503c 32 bit \u7684\u6570\u503c\uff0c\u5e76\u4e14\u662f\u7acb\u5373\u8d4b\u503c\u7684\u7c7b\u578b\u3002</p> </li> <li> <p><code>&lt;dut&gt;:set_freeze()</code></p> <p>\u51bb\u7ed3\u5f53\u524d\u7684\u4fe1\u53f7\u503c\uff0c\u5728\u540e\u7eed\u7684\u4eff\u771f\u4e2d\uff0c\u8be5\u4fe1\u53f7\u7684\u503c\u5c06\u4fdd\u6301\u4e0d\u53d8\u3002\u9700\u8981\u8c03\u7528 <code>&lt;dut&gt;:set_release()</code> \u6765\u53d6\u6d88\u51bb\u7ed3\u3002</p> </li> </ol>"},{"location":"reference/data_structure/#proxytablehandle_2","title":"ProxyTableHandle \u7684\u4f7f\u7528","text":"<p>\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e34\u65f6\u7684\u53d8\u91cf\u6765\u4fdd\u5b58\u4e00\u4e2a\u7279\u5b9a hierarchy path \u7684 <code>ProxyTableHandle</code>\uff0c\u8fd9\u6837\u80fd\u591f\u65b9\u4fbf\u6211\u4eec\u540e\u7eed\u7684\u4f7f\u7528\uff0c\u4f8b\u5982\uff1a <pre><code>local mod = dut.path.to.mod\nlocal another_mod = mode.path.to.another_mod\n\nassert(mod.value:get_local_path() == \"tb_top.path.to.mod.value\")\nassert(another_mod.value:get_local_path() == \"tb_top.path.to.mode.path.to.another_mod.value\")\n</code></pre></p>"},{"location":"reference/data_structure/#eventhandle","title":"EventHandle","text":"<p><code>EventHandle</code> \u7684\u76f8\u5173\u4f7f\u7528\u4ecb\u7ecd\u5df2\u7ecf\u5728 \u8fd9\u91cc \u6709\u4ecb\u7ecd\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u8d58\u8ff0\u3002</p>"},{"location":"reference/global_configuration/","title":"\u5168\u5c40\u914d\u7f6e\u4fe1\u606f","text":"<p>Verilua \u4e2d\uff0c<code>cfg</code> \u8fd9\u4e2a\u5168\u5c40\u53d8\u91cf\uff08<code>table</code>\u7c7b\u578b\uff09\u7528\u4e8e\u5b58\u50a8\u4e00\u4e9b\u5168\u5c40\u7684\u914d\u7f6e\u4fe1\u606f\uff0c\u5177\u4f53\u53ef\u4ee5\u76f8\u5173\u7684\u4ee3\u7801\u6587\u4ef6\uff0c\u6709\u4e00\u4e9b\u5e38\u7528\u7684\u5185\u7f6e\u4fe1\u606f\u5982\u4e0b\uff1a</p> <ol> <li> <p><code>cfg.top</code></p> <p>\u8fd9\u4e2a\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u7684\u4e00\u4e2a\u6b63\u5728\u8fdb\u884c\u4eff\u771f\u7684\u8bbe\u8ba1\u7684\u9876\u5c42\u6a21\u5757\u7684\u540d\u79f0\uff0c\u4f8b\u5982\uff1a<code>tb_top</code>\u3002</p> </li> <li> <p><code>cfg.simulator</code></p> <p>\u8fd9\u4e2a\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u7684\u4eff\u771f\u5668\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u662f <code>verilator</code>\u3001<code>vcs</code>\u3001<code>iverilog</code>\u3001\u6216\u8005 <code>wave_vpi</code>\u3002</p> </li> <li> <p><code>cfg.script</code></p> <p>\u8fd9\u4e2a\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u8fd0\u884c\u7684 Lua \u5165\u53e3\u811a\u672c\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a<code>LuaMain.lua</code>\u3002</p> </li> <li> <p><code>cfg.seed</code></p> <p>\u8fd9\u4e2a\u53d8\u91cf\u7528\u4e8e\u5b58\u50a8\u5f53\u524d\u7684\u4eff\u771f\u7684\u968f\u673a\u79cd\u5b50\u7684\u503c\u3002</p> </li> </ol> <p>\u9664\u4e86\u4e0a\u9762\u8fd9\u4e9b\uff0cVerilua \u8fd8\u5141\u8bb8\u7528\u6237\u5728 xmake.lua \u4e2d\u6307\u5b9a\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u5e76\u5c06\u5176\u5408\u5e76\u5230\u5168\u5c40\u7684 <code>cfg</code> \u4e2d\uff0c\u5177\u4f53\u53ef\u4ee5\u67e5\u770b\u6b64\u5904\u7684\u4ecb\u7ecd\u3002</p>"},{"location":"reference/multi_task/","title":"\u591a\u4efb\u52a1\u7cfb\u7edf","text":"<p>Verilua \u5b9e\u73b0\u4e86\u4e00\u4e2a\u57fa\u4e8e\u4e8b\u4ef6\u8f6e\u8be2\u8c03\u5ea6\u7684\u8c03\u5ea6\u5668\uff08Scheduler\uff09\uff0c\u7528\u4e8e\u7ba1\u7406\u548c\u8bb0\u5f55\u7528\u6237\u6ce8\u518c\u7684\u4efb\u52a1\uff0cVerilua \u901a\u8fc7\u8fd9\u79cd\u8c03\u5ea6\u7cfb\u7edf\u6765\u5b9e\u73b0\u591a\u4efb\u52a1\u7684\u8c03\u5ea6\u3002 \u5728\u5177\u4f53\u5b9e\u73b0\u4e0a\uff0c\u6bcf\u4e2a\u4efb\u52a1\u5728\u6267\u884c\u5230\u7279\u5b9a\u4e8b\u4ef6\u65f6\uff0c\u4f1a\u901a\u8fc7 Scheduler \u6ce8\u518c\u5bf9\u5e94\u7684\u56de\u8c03\u51fd\u6570\uff08callback\uff09\uff0c\u5e76\u4e3b\u52a8\u8ba9\u51fa\u63a7\u5236\u6743\uff0c\u76f4\u5230\u56de\u8c03\u51fd\u6570\u88ab\u89e6\u53d1\u540e\u7531 Scheduler \u5524\u9192\u3002\u8fd9\u79cd\u534f\u4f5c\u5f0f\u591a\u4efb\u52a1\u6a21\u578b\u4f9d\u8d56\u4e8e\u4efb\u52a1\u7684\u4e3b\u52a8\u63a7\u5236\u6743\u8ba9\u51fa\uff0c\u4efb\u52a1\u5728\u8ba9\u51fa\u63a7\u5236\u6743\u65f6\u53ef\u6307\u5b9a\u56de\u8c03\u7c7b\u578b\uff0c\u4f8b\u5982\u4e0a\u5347\u6cbf\uff08posedge\uff09\u6216\u4e0b\u964d\u6cbf\uff08negedge\uff09\u7b49\u3002Scheduler \u91c7\u7528 Round Robin \u4ef2\u88c1\u7b56\u7565\uff0c\u786e\u4fdd\u6240\u6709\u6ce8\u518c\u4efb\u52a1\u80fd\u591f\u516c\u5e73\u5730\u83b7\u5f97\u6267\u884c\u673a\u4f1a\uff0c\u4ece\u800c\u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e2d\u5b9e\u73b0\u9ad8\u6548\u7684\u4efb\u52a1\u8c03\u5ea6\u4e0e\u5e76\u53d1\u6267\u884c\u3002</p> <p>\u4e0b\u56fe\u662f Verilua \u7684\u4efb\u52a1\u8c03\u5ea6\u6d41\u7a0b\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e94\u4e2a\u6b65\u9aa4\uff1a</p> <ol> <li>Scheduler \u904d\u5386\u6240\u6709\u5df2\u6ce8\u518c\u7684\u4efb\u52a1\uff0c\u6bcf\u4e2a\u4efb\u52a1\u901a\u8fc7\u552f\u4e00\u7684 Task ID \u8fdb\u884c\u6807\u8bc6\uff1b</li> <li>\u8fdb\u5165\u5230\u5176\u4e2d\u4e00\u4e2a\u4efb\u52a1\u4e2d\u6267\u884c\uff0c\u6267\u884c\u7279\u5b9a\u4f4d\u7f6e\u8ba9\u51fa\u4efb\u52a1\u63a7\u5236\u6743\u5e76\u63d0\u4f9b\u56de\u8c03\u7c7b\u578b\u4e0e Task ID\u8fdb\u884c\u56de\u8c03\u6ce8\u518c\uff1b</li> <li>Scheduler \u901a\u8fc7 VPI-ML\uff08Verilua \u5b9a\u4e49\u7684\u4e00\u4e2a\u4e2d\u95f4\u5c42\uff09\u4e0e\u4eff\u771f\u5668\u4ea4\u4e92\uff0c\u63a7\u5236\u4eff\u771f\u5668\u6ce8\u518c\u6307\u5b9a\u7684\u56de\u8c03\u51fd\u6570\uff1b</li> <li>\u56de\u8c03\u51fd\u6570\u6ce8\u518c\u540e\uff0c\u4eff\u771f\u5668\u7ee7\u7eed\u8fd0\u884c\uff0c\u76f4\u5230\u56de\u8c03\u89e6\u53d1\uff1b</li> <li>\u4eff\u771f\u5668\u5728\u7279\u5b9a\u65f6\u95f4\u70b9\u89e6\u53d1\u56de\u8c03\u540e\uff0c\u901a\u8fc7 Task ID \u5b9a\u4f4d\u5bf9\u5e94\u4efb\u52a1\uff0c\u5e76\u6062\u590d\u4efb\u52a1\u6267\u884c\u3002</li> </ol> Scheduler workflow <p>\u8fd9\u4e00\u8fc7\u7a0b\u5b9e\u73b0\u4e86\u4efb\u52a1\u7684\u8c03\u5ea6\uff0c\u4e14\u56de\u8c03\u6ce8\u518c\u662f\u5f02\u6b65\u7684\uff0c\u4efb\u52a1\u65e0\u9700\u7b49\u5f85\u56de\u8c03\u5b8c\u6210\u5373\u53ef\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u4efb\u52a1\uff0c\u4efb\u52a1\u4e4b\u95f4\u4e0d\u5b58\u5728\u4f9d\u8d56\u8fd0\u884c\u3002</p>"},{"location":"reference/multi_task/#_2","title":"\u521b\u5efa\u4efb\u52a1","text":"<p>\u5728 Verilua \u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <code>fork</code> \u6765\u521b\u5efa\u4efb\u52a1\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 Scheduler \u4e2d\uff0c\u540c\u65f6\u88ab\u521b\u5efa\u7684\u4efb\u52a1\u4f1a\u968f\u673a\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684\u4efb\u52a1 ID\u3002\u4f8b\u5982\uff1a <pre><code>fork { -- \u4e5f\u53ef\u4ee5\u4f7f\u7528 `verilua \"appendTasks\"`\uff0c\u4e0d\u8fc7\u76ee\u524d\u63a8\u8350\u4f7f\u7528 fork \u6765\u521b\u5efa\u4efb\u52a1\n    function ()\n        print(\"fork task 1\")\n    end,\n\n    function ()\n        print(\"fork task 2\")\n    end,\n\n    -- Other tasks...\n}\n</code></pre></p> <p>\u4f7f\u7528 <code>fork</code> \u6765\u521b\u5efa\u4efb\u52a1\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u6307\u5b9a\u4efb\u52a1\u7684\u540d\u79f0\uff0c\u4f8b\u5982\uff1a <pre><code>fork {\n    simple_task = function ()\n        print(\"fork task 1\")\n    end,\n\n    [\"another simple task\"] = function ()\n        print(\"fork task 2\")\n    end,\n\n    -- Other tasks...\n}\n</code></pre></p> <p>\u5982\u679c\u6ca1\u6709\u6307\u5b9a\u4efb\u52a1\u540d\u79f0\uff0c\u90a3\u4e48 Verilua \u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u540d\u79f0\uff0c\u5177\u4f53\u683c\u5f0f\u4e3a: <code>unnamed_task_&lt;task_id&gt;</code>\u3002</p> <p>\u8fd9\u91cc\u7684\u6bcf\u4e00\u4e2a function \u5728 Verilua \u7684\u5e95\u5c42\u4e2d\u90fd\u88ab\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4e2a\u7684 coroutine \u4ece\u800c\u5141\u8bb8 Verilua \u7684 Scheduler \u8fdb\u884c\u8c03\u5ea6\u3002</p>"},{"location":"reference/multi_task/#_3","title":"\u7b49\u5f85\u4efb\u52a1\u6267\u884c\u5b8c\u6210","text":"<p>Verilua \u63d0\u4f9b\u4e86 <code>join</code> \u51fd\u6570\u6765\u7b49\u5f85\u4e00\u4e2a\u6216\u591a\u4e2a\u4efb\u52a1\u6267\u884c\u5b8c\u6210\uff0c\u9700\u8981\u914d\u5408 <code>jfork</code> \u51fd\u6570\u6765\u4f7f\u7528\u3002</p> <p><code>jfork</code> \u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\uff08\u6ce8\u610f\uff0c\u53ea\u80fd\u662f\u4e00\u4e2a\uff09\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4e13\u95e8\u7ed9 <code>join</code> \u4f7f\u7528\u7684 <code>EventHandle</code>, \u4f7f\u7528\u65b9\u5f0f\u548c <code>fork</code> \u7c7b\u4f3c\uff1a <pre><code>local ehdl = jfork {\n    function ()\n        print(\"jfork task 1\")\n        -- ...\n    end\n}\n\nlocal ehdl = jfork {\n    task_name = function ()\n        print(\"jfork task 2\")\n        -- ...\n    end\n}\n</code></pre></p> <p>\u4f7f\u7528 <code>join</code> \u53ef\u4ee5\u7b49\u5f85\u4e00\u4e2a\u6216\u591a\u4e2a <code>jfork</code> \u521b\u5efa\u7684 <code>EventHandle</code> \u6240\u4ee3\u8868\u7684\u4efb\u52a1\u6267\u884c\u5b8c\u6210\uff0c\u4f8b\u5982\uff1a <pre><code>local ehdl = jfork {\n    function ()\n        -- ...\n    end\n}\njoin(ehdl)\n\nlocal ehdl = jfork {\n    function ()\n        -- ...\n    end\n}\nlocal ehdl2 = jfork {\n    function ()\n        -- ...\n    end\n}\njoin({ ehdl, ehdl2 }) -- or join { ehdl, ehdl2 }\n</code></pre></p>"},{"location":"reference/multi_task/#_4","title":"\u6ce8\u518c\u4efb\u52a1\u56de\u8c03","text":"<p>Verilua \u7684 task \u4e2d\u652f\u6301 <code>posedge</code>\u3001<code>negedge</code>\u3001<code>edge</code>\u3001<code>time</code> \u4eff\u771f\u884c\u4e3a\u63a7\u5236\u673a\u5236\uff0c\u80fd\u591f\u6ee1\u8db3\u5927\u90e8\u5206\u7684\u786c\u4ef6\u4eff\u771f\u4ea4\u4e92\u573a\u666f\u3002</p> Edge in the waveform <p>\u5176\u4e2d<code>posedge</code>\u3001<code>negedge</code>\u3001<code>edge</code>\u53ea\u80fd\u4f5c\u7528\u5728\u4f4d\u5bbd\u4e3a 1 bit \u7684\u4fe1\u53f7\u4e0a\uff0c\u5e76\u4e14\u53ef\u4ee5\u7531 <code>CallableHDL</code>\u3001<code>ProxyTableHandle</code> \u7b49\u6570\u636e\u7ed3\u6784\u6765\u521b\u5efa\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a <pre><code>fork {\n    function ()\n        print(\"start task 1\")\n\n        --\n        -- Use ProxyTableHandle(dut)\n        --\n        dut.clock:posedge()\n        print(\"posedge clock\")\n\n        dut.clock:negedge()\n        print(\"negedge clock\")\n\n        dut.clock:posedge(10)\n\n        dut.clock:negedge(5, function(c)\n            print(\"repeat negedge clock 5 times, now is \" .. c)\n        end)\n\n        --\n        -- Use CallableHDL\n        --\n        local clock = dut.clock:chdl()\n        clock:posedge()\n        clock:negedge()\n    end\n}\n</code></pre> <code>posedge</code>/<code>negedge</code>/<code>edge</code> \u7b49\u56de\u8c03\u6ce8\u518c\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u56de\u8c03\u7684\u7b49\u5f85\u6b21\u6570\uff0c\u7b2c\u4e8c\u4e2a\u662f\u56de\u8c03\u51fd\u6570\uff0c\u56de\u8c03\u51fd\u6570\u5728\u6bcf\u6b21\u89e6\u53d1\u4e8b\u4ef6\u7684\u65f6\u5019\u90fd\u4f1a\u88ab\u6267\u884c\uff0c\u56de\u8c03\u51fd\u6570\u8fd8\u4f1a\u63a5\u6536\u4e00\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u7b2c\u51e0\u6b21\u8fdb\u5165\u5230\u56de\u8c03\u51fd\u6570\u4e2d\u3002</p> <p><code>time</code> \u8fd9\u4e00\u4e2a\u884c\u4e3a\u63a7\u5236\u673a\u5236\u4e0d\u9700\u8981\u4f7f\u7528\u5230\u5177\u4f53\u7684\u786c\u4ef6\u4fe1\u53f7\uff0c\u53ea\u9700\u8981\u5728\u4efb\u52a1\u4e2d\u4f7f\u7528 <code>await_time(XXX)</code> \u5373\u53ef\uff0c\u5176\u4e2d <code>XXX</code> \u662f\u6307\u5b9a\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u4e0e\u4eff\u771f\u5668\u7684\u65f6\u95f4\u5355\u4f4d\u76f8\u5f53\uff0c\u4f8b\u5982\uff1a <pre><code>fork {\n    function ()\n        print(\"start task 1\")\n\n        await_time(10)\n        print(\"await time 10\")\n\n        await_time(100)\n        print(\"await time 100\")\n    end\n}\n</code></pre></p> <p></p>"},{"location":"reference/multi_task/#_5","title":"\u4efb\u52a1\u540c\u6b65","text":"<p>\u591a\u4e2a\u4efb\u52a1\u4e4b\u95f4\u7684\u540c\u6b65\u53ef\u4ee5\u4f7f\u7528 <code>EventHandle</code> \u6765\u521b\u5efa\u7279\u5b9a\u4e8b\u4ef6\u5b9e\u73b0\uff0c\u4e0d\u540c\u4e8e\u76f4\u63a5\u4f7f\u7528\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u540c\u6b65\uff0c<code>EventHandle</code> \u80fd\u591f\u66f4\u8fdb\u4e00\u6b65\u5728\u4e8b\u4ef6\u89e6\u53d1\u7684\u65f6\u5019\u5bf9\u6b63\u5728\u7b49\u5f85\u7684\u4efb\u52a1\u8fdb\u884c\u5524\u9192\uff0c\u4ece\u800c\u5b9e\u73b0\u4e86\u53ca\u65f6\u7684\u4efb\u52a1\u540c\u6b65\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a <pre><code>-- Create a EvevntHandle with name \"name of the event\"\nlocal e = (\"name of the event\"):ehdl()\n\nfork {\n    task_1 = function ()\n        dut.clock:posedge(10)\n        print(\"send event\")\n        e:send()\n    end,\n\n    task_2 = function ()\n        e:wait()\n        print(\"task_2 is awakened\")\n    end,\n\n    task_3 = function ()\n        dut.clock:posedge(5)\n        e:wait()\n        print(\"task_3 is awakened\")\n    end,\n}\n</code></pre> \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0ctask_2 \u5c06\u4f1a\u5728\u7b2c\u5341\u4e2a\u4eff\u771f\u5468\u671f\u5230\u6765\u7684\u65f6\u5019\u88ab task_1 \u5524\u9192\uff0c\u5e76\u4e14\u5728\u5524\u9192\u540e\u4f1a\u6253\u5370\u51fa <code>task_2 is awakened</code>\uff0c\u800c task_3 \u5219\u5728\u7b2c\u4e94\u4e2a\u4eff\u771f\u5468\u671f\u5230\u6765\u7684\u65f6\u5019\u88ab task_1 \u5524\u9192\uff0c\u5e76\u4e14\u5728\u5524\u9192\u540e\u4f1a\u6253\u5370\u51fa <code>task_3 is awakened</code>\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cVerilua \u5141\u8bb8\u6709\u591a\u4e2a\u4efb\u52a1\u5728\u7b49\u5f85\u540c\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u4f46\u662f\u540c\u4e00\u65f6\u95f4\u70b9\u4e0d\u80fd\u6709\u591a\u4e2a\u4efb\u52a1\u540c\u65f6 send \u540c\u4e00\u4e2a <code>EventHandle</code>\uff0c\u5982\u679c\u591a\u4e2a\u4efb\u52a1\u540c\u65f6 send \u4e8b\u4ef6\uff0c\u5219\u4f1a\u5bfc\u81f4\u5f85\u5524\u9192\u7684\u4efb\u52a1\u88ab\u5524\u9192\u591a\u6b21\uff0c\u51fa\u73b0\u4e0d\u7b26\u5408\u9884\u671f\u7684\u884c\u4e3a\uff0c\u4f46\u662f Verilua \u5e95\u5c42\u5e76\u4e0d\u4f1a\u68c0\u67e5\u8fd9\u4e00\u79cd\u60c5\u51b5\uff0c\u56e0\u6b64\u7528\u6237\u9700\u8981\u81ea\u884c\u89c4\u907f\u3002</p>"},{"location":"reference/multi_task/#scheduler-api","title":"Scheduler \u5e95\u5c42 API \u7684\u4f7f\u7528","text":"<p>Verilua \u7684 Scheduler \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217 API \u6765\u67e5\u770b\u548c\u7ba1\u7406\u4efb\u52a1\uff0c\u4e0b\u9762\u662f\u4e00\u4e9b\u5e38\u7528\u7684 API \u7684\u4ecb\u7ecd\u3002</p>"},{"location":"reference/multi_task/#_6","title":"\u6ce8\u518c\u4efb\u52a1","text":"<p><code>scheduler:append_task(task_id, namee, task_body, start_now)</code> \u7528\u4e8e\u6ce8\u518c\u4e00\u4e2a\u4efb\u52a1\u3002</p> <ul> <li><code>task_id</code> \u662f\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u53ef\u4ee5\u8f93\u5165<code>nil</code> \u6765\u8ba9 Scheduler \u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u4efb\u52a1 ID\uff0c\u5426\u5219 Scheduler \u5219\u4f1a\u4f7f\u7528\u8fd9\u91cc\u6307\u5b9a\u7684 task_id \u4f5c\u4e3a\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\uff1b</li> <li><code>name</code> \u662f\u88ab\u6ce8\u518c\u4efb\u52a1\u7684\u540d\u79f0\uff1b</li> <li><code>task_body</code> \u662f\u4efb\u52a1\u7684\u4ee3\u7801\u5757\uff0c\u4e5f\u5c31\u662f\u4e00\u4e2a <code>function</code>\uff1b</li> <li><code>start_now</code> \u662f\u5426\u7acb\u5373\u542f\u52a8\u8be5\u4efb\u52a1\uff0c\u9ed8\u8ba4\u4e3a <code>false</code>\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3a <code>true</code> \u5219\u4f1a\u5728\u8c03\u7528 <code>append_task</code> \u4e4b\u540e\u7acb\u5373\u542f\u52a8\u4efb\u52a1\uff08\u6267\u884c <code>task_body</code> \u4ee3\u7801\u5757\uff09.</li> </ul> <p><code>append_task</code> \u5728\u8c03\u7528\u4e4b\u540e\u4f1a\u521b\u5efa\u4e00\u4e2a\u4efb\u52a1\u5e76\u5c06\u5176\u6dfb\u52a0\u5230 Scheduler \u4e2d\uff0c\u540c\u65f6\u8fd4\u56de\u4e00\u4e2a\u4efb\u52a1 ID\u3002<code>scheduler</code> \u662f\u4e00\u4e2a\u5168\u5c40\u7684\u53d8\u91cf\uff0c\u53ef\u4ee5\u901a\u8fc7 <code>local scheduler = require \"LuaScheduler\"</code> \u6765\u5f15\u5165\u3002</p> <p>\u4e0b\u9762\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a <pre><code>local scheduler = require \"LuaScheduler\"\n\nlocal id = scheduler:append_task(nil, \"task_1\", function ()\n    print(\"task_1 is running\")\n    dut.clock:posedge(10)\n    print(\"task_1 is finished\")\nene)\n\nlocal id2 = scheduler:append_task(nil, \"task_2\", function ()\n    print(\"task_2 is running\")\n    dut.clock:posedge(10)\n    print(\"task_2 is finished\")\nend, true)\n\nlocal id3 = scheduler:append_task(123, \"task_3\", function ()\n    print(\"task_3 is running\")\n    dut.clock:posedge(10)\n    print(\"task_3 is finished\")\nend)\nassert(id3 == 123, \"task_id should be 123\")\n</code></pre></p> <p><code>scheduler:append_task(...)</code> \u8fd4\u56de\u7684 <code>task_id</code> \u53ef\u4ee5\u7ed3\u5408 <code>scheduler:check_task_exists(task_id)</code> \u6765\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b58\u5728</p>"},{"location":"reference/multi_task/#_7","title":"\u5217\u51fa\u6240\u6709\u4efb\u52a1","text":"<p><code>scheduler:list_tasks()</code> \u7528\u4e8e\u5217\u51fa\u6240\u6709\u6ce8\u518c\u7684\u4efb\u52a1\uff0c\u5e76\u6253\u5370\u51fa\u5176\u4fe1\u606f\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u8f93\u51fa\u7684\u793a\u4f8b\uff1a Terminal<pre><code>[scheduler list tasks]:\n-----------------------------------------------------------\n[0] name: task_1    id: 1123     cnt:12\n[1] name: task_2    id: 2323     cnt:13\n[2] name: task_3    id: 3456     cnt:14\n-----------------------------------------------------------\n</code></pre> \u5176\u4e2d\u7684 <code>id</code> \u4e3a\u4efb\u52a1\u7684\u552f\u4e00\u6807\u8bc6\uff0c<code>cnt</code> \u4e3a\u4efb\u52a1\u5728\u8c03\u5ea6\u5668\u4e2d\u7684\u6267\u884c\u6b21\u6570\u3002</p> <p>\u6bcf\u6b21\u4eff\u771f\u7ed3\u675f\u7684\u65f6\u5019\uff0cVerilua \u90fd\u4f1a\u81ea\u52a8\u8c03\u7528\u4e00\u6b21 <code>scheduler:list_tasks()</code></p>"},{"location":"reference/multi_task/#_8","title":"\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b58\u5728","text":"<p><code>scheduler:check_task_exists(task_id)</code> \u7528\u4e8e\u68c0\u67e5\u4efb\u52a1\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4efb\u52a1\u4e0d\u5b58\u5728\u5219\u8fd4\u56de <code>false</code>\uff0c\u5426\u5219\u8fd4\u56de <code>true</code>\u3002 <pre><code>local scheduler = require \"LuaScheduler\"\n\nlocal id = scheduler:append_task(nil, \"task_1\", function ()\n    print(\"task_1 is running\")\n    dut.clock:posedge(10)\n    print(\"task_1 is finished\")\nend)\n\nlocal exists = scheduler:check_task_exists(id)\nassert(exists, \"task_1 should exist\")\n</code></pre></p>"},{"location":"reference/multi_task/#scheduler","title":"Scheduler \u4efb\u52a1\u6027\u80fd\u7edf\u8ba1","text":"<p>Verilua \u5185\u7f6e\u4e86\u4e00\u4e2a Scheduler \u7684\u4efb\u52a1\u6027\u80fd\u7edf\u8ba1\u529f\u80fd\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728\u4eff\u771f\u5f00\u59cb\u4e4b\u524d\u5c06\u73af\u5883\u53d8\u91cf <code>VL_PERF_TIME</code> \u8bbe\u7f6e\u4e3a <code>1</code> \u6765\u52a8\u6001\u5f00\u542f\u8be5\u529f\u80fd\u3002\u4f8b\u5982\uff1a Terminal<pre><code>VL_PERF_TIME=1 xmake run TestDesign\n\n# or\nexport VL_PERF_TIME=1\nxmake run TestDesign\n</code></pre></p> <p>\u5728\u4eff\u771f\u7ed3\u675f\u4e4b\u540e\uff0cVerilua \u4f1a\u81ea\u52a8\u8c03\u7528 <code>scheduler:list_tasks()</code> \u6765\u8f93\u51fa\u4efb\u52a1\u6027\u80fd\u7edf\u8ba1\u4fe1\u606f\uff0c\u4e0b\u9762\u662f\u4e00\u4e2a\u8f93\u51fa\u7684\u793a\u4f8b\uff1a Terminal<pre><code>[scheduler list tasks]:\n-------------------------------------------------------------\n[ 58254@fake_cmoclient_0/TLULAgent a task resolve]    0.39 ms   percent:  0.05%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[83942@fake_mmioclient_0/TLULAgent a task resolve]    1.93 ms   percent:  0.23%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                       21509@unnamed_fork_task_0]    2.64 ms   percent:  0.31%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[           65687@fake_mmioclient_0 timeout check]    2.70 ms   percent:  0.32%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[               34459@fake_icache_0 timeout check]    3.46 ms   percent:  0.41%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                                   49198@pf_init]    4.29 ms   percent:  0.50%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[     45191@fake_dcache_0/TLCAgent c task resolve]    7.32 ms   percent:  0.86%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[     49389@fake_dcache_0/TLCAgent e task resolve]    9.37 ms   percent:  1.10%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[75477@fake_mmioclient_0/TLULAgent d task resolve]   24.26 ms   percent:  2.84%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[ 87630@fake_cmoclient_0/TLULAgent d task resolve]   24.29 ms   percent:  2.85%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[    43364@fake_icache_0/TLULAgent a task resolve]   24.65 ms   percent:  2.89%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[     96595@fake_dcache_0/TLCAgent a task resolve]   25.38 ms   percent:  2.98%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                               6330@send_pf_task]   26.54 ms   percent:  3.11%  \u2503\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                              87302@recv_tlb_req]   31.96 ms   percent:  3.75%  \u2503\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[     28004@fake_dcache_0/TLCAgent b task resolve]   35.42 ms   percent:  4.15%  \u2503\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[    28108@fake_icache_0/TLULAgent d task resolve]   36.69 ms   percent:  4.30%  \u2503\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[     15833@fake_dcache_0/TLCAgent d task resolve]   40.14 ms   percent:  4.71%  \u2503\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                                 63208@main_task]   51.69 ms   percent:  6.06%  \u2503\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                   53008@fake_dcache_0 eval task]   175.71 ms   percent: 20.60% \u2503\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\n[                              27178@monitor_task]   324.09 ms   percent: 38.00% \u2503\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2503\ntotal_time: 0.85 s / 852.91 ms\n</code></pre></p>"},{"location":"reference/multi_task/#scheduler-api_1","title":"\u5176\u4ed6 Scheduler API","text":"<ol> <li> <p><code>scheduler:wakeup_task(&lt;task_id&gt;)</code></p> <p>\u901a\u8fc7 <code>&lt;task_id&gt;</code> \u5524\u9192\u4e00\u4e2a\u5df2\u7ecf\u7ed3\u675f\u7684\u4efb\u52a1\uff0c\u8fd9\u4e2a\u4efb\u52a1\u5fc5\u987b\u662f\u4e4b\u524d\u5df2\u7ecf\u88ab\u6ce8\u518c\u8fc7\u7684\u4efb\u52a1\uff0c\u5982\u679c\u4efb\u52a1\u4e4b\u524d\u6ca1\u6709\u6ce8\u518c\u8fc7\u6216\u8005\u8fd9\u4e2a\u4efb\u52a1\u8fd8\u5728\u8fd0\u884c\uff08\u6ca1\u6709\u7ed3\u675f\uff09\uff0c\u90a3\u4e48\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002</p> </li> <li> <p><code>scheduler:try_wakeup_task(&lt;task_id&gt;)</code></p> <p>\u5c1d\u8bd5\u5524\u9192\u4e00\u4e2a\u4efb\u52a1\uff0c\u5982\u679c\u8fd9\u4e2a\u4efb\u52a1\u8fd8\u5728\u8fd0\u884c\uff0c\u5219\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u5982\u679c\u8fd9\u4e2a\u4efb\u52a1\u5df2\u7ecf\u7ed3\u675f\uff0c\u5219\u5524\u9192\u8fd9\u4e2a\u4efb\u52a1\u3002</p> <pre><code>scheduler:try_wakeup_task(123)\n\n-- equivalent to\n\nif scheduler:check_task_exists(123) then\n    scheduler:wakeup_task(123)\nend\n</code></pre> </li> <li> <p><code>scheduler:remove_task(&lt;task_id&gt;)</code>     \u79fb\u9664\u4e00\u4e2a\u4efb\u52a1\uff08\u53ef\u4ee5\u662f\u6b63\u5728\u8fd0\u884c\u7684\u4efb\u52a1\uff09\uff0c\u8fd9\u4e2a\u4efb\u52a1\u5fc5\u987b\u662f\u4e4b\u524d\u5df2\u7ecf\u88ab\u6ce8\u518c\u8fc7\u7684\u4efb\u52a1\uff0c\u5982\u679c\u4efb\u52a1\u4e4b\u524d\u6ca1\u6709\u6ce8\u518c\u8fc7\uff0c\u90a3\u4e48\u8c03\u7528\u7684\u65f6\u5019\u4f1a\u629b\u51fa\u4e00\u4e2a\u9519\u8bef\u3002</p> </li> </ol>"},{"location":"reference/multi_task/#start-task-finish-task","title":"Start Task \u548c Finish Task","text":"<p>Verilua \u4e2d\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e9b\u5728\u4eff\u771f\u5f00\u59cb\u6216\u8005\u7ed3\u675f\u65f6\u8c03\u7528\u7684\u4efb\u52a1\uff0c\u5206\u522b\u79f0\u4e3a Start Task \u548c Finish Task\u3002</p> <ul> <li> <p>\u901a\u8fc7 <code>initial { ... }</code> / <code>verilua \"startTask\" { ... }</code> \u521b\u5efa Start Task\uff1b</p> <p>Start Task \u53ef\u4ee5\u7531\u591a\u4e2a\u51fd\u6570\u7ec4\u6210\u3002</p> <pre><code>initial {\n    function ()\n        print(\"Simulation started!\")\n    end,\n    -- Other tasks...\n}\n\n-- or\nverilua \"startTask\" {\n    function ()\n        print(\"Simulation started!\")\n    end,\n    -- Other tasks...\n}\n</code></pre> </li> <li> <p>\u901a\u8fc7 <code>final { ... }</code> / <code>verilua \"finishTask\" { ... }</code> \u521b\u5efa Finish Task\u3002</p> <p>Finish Task \u53ef\u4ee5\u7531\u591a\u4e2a\u51fd\u6570\u7ec4\u6210\u3002</p> <pre><code>final {\n    function ()\n        print(\"Simulation finished!\")\n    end,\n    -- Other tasks...\n}\n\n-- or\nverilua \"finishTask\" {\n    function ()\n        print(\"Simulation finished!\")\n    end,\n    -- Other tasks...\n}\n</code></pre> </li> </ul>"},{"location":"reference/simulator_control/","title":"\u4eff\u771f\u5668\u63a7\u5236","text":"<p>Verilua \u63d0\u4f9b\u4e86\u4e00\u4e9b\u63a5\u53e3\u7528\u6765\u63a7\u5236\u5e95\u5c42\u7684\u4eff\u771f\u5668\uff1a</p> <ol> <li> <p><code>sim.dump_wave(wave_file)</code></p> <p>\u7528\u6765\u63a7\u5236\u4eff\u771f\u5668\u5f00\u59cb\u751f\u6210\u6ce2\u5f62\uff0c<code>wave_file</code> \u662f\u4e00\u4e2a\u53ef\u9009\u7684\u6ce2\u5f62\u6587\u4ef6\u540d\uff0c\u5982\u679c\u6ca1\u6709\u6307\u5b9a\uff0c\u90a3\u4e48\u9ed8\u8ba4\u751f\u6210\u7684\u6ce2\u5f62\u6587\u4ef6\u540d\u4e3a <code>test.vcd</code>\uff08\u6216\u8005 <code>test.vcd.fsdb</code>\uff09\u3002</p> <p>\u9700\u8981\u6ce8\u610f\u7684\u662f\u5982\u679c\u4eff\u771f\u5668\u4f7f\u7528\u7684\u662f Verilator\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u5728 xmake.lua \u4e2d\u6dfb\u52a0\u4e0b\u9762\u7684\u4fe1\u606f\u6765\u5f00\u542f\u6ce2\u5f62\u751f\u6210\u529f\u80fd\uff1a <pre><code>add_values(\"verilator.flags\", \"--trace\", \"--no-trace-top\")\n</code></pre></p> </li> <li> <p><code>sim.disable_trace()</code></p> <p>\u7528\u6765\u63a7\u5236\u4eff\u771f\u5668\u505c\u6b62\u751f\u6210\u6ce2\u5f62\u3002</p> </li> <li> <p><code>sim.finish()</code></p> <p>\u7528\u6765\u63a7\u5236\u7ed3\u675f\u4eff\u771f\u3002</p> </li> </ol>"},{"location":"reference/testbench_generate/","title":"Testbench \u81ea\u52a8\u751f\u6210\u6d41\u7a0b","text":"<p>Verilua \u4e2d\uff0cTestbench \u662f\u5168\u81ea\u52a8\u751f\u6210\u7684 <code>testbench_gen</code> \u5de5\u5177\u5b9e\u73b0\uff08\u5b89\u88c5 Verilua \u7684\u65f6\u5019\u4f1a\u7f16\u8bd1\u751f\u6210 <code>testbench_gen</code>\uff09\uff0c\u5176\u6838\u5fc3\u529f\u80fd\u5305\u62ec\u9876\u5c42\u6a21\u5757\u7684\u4f8b\u5316\u3001\u65f6\u949f\u9a71\u52a8\u3001\u6ce2\u5f62\u63a7\u5236\u7b49\u3002\u5177\u4f53\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> Testbench generate workflow <p><code>testbench_gen</code> \u5e95\u5c42\u4f7f\u7528\u7684\u662f slang \u8fdb\u884c RTL \u4ee3\u7801\u7684\u89e3\u6790\uff0c\u4e0b\u9762\u662f <code>testbench_gen</code> \u7684\u547d\u4ee4\u884c\u53c2\u6570\uff08\u9ad8\u4eae\u7684\u4e3a\u5e38\u7528\u7684\u9009\u9879\uff09\uff1a</p> Terminal<pre><code>OVERVIEW: Testbench generator for verilua\n\nUSAGE: testbench_gen [options] files...\n\nOPTIONS:\n  --tt,--tbtop &lt;top module name&gt;                      testbench top module name\n  --dn,--dut-name &lt;dut instance name&gt;                 testbench dut inst name\n  --od,--out-dir &lt;directory&gt;                          output directory\n  --cs,--clock-signal &lt;signal name&gt;                   clock signal name\n  --rs,--reset-signal &lt;signal name&gt;                   reset signal name\n  --cc,--custom-code &lt;file&gt;                           input custom code &lt;file&gt;, will be inserted in the bottom of the testbench module\n  --ccs,--custom-code-str &lt;string&gt;                    input custom code &lt;string&gt;, will be inserted in the bottom of the testbench module\n  --cco,--custom-code-outer &lt;file&gt;                    input custom code &lt;file&gt;, will be inserted in the top of the testbench module\n  --ccso,--custom-code-str-outer &lt;string&gt;             input custom code &lt;string&gt;, will be inserted in the top of the testbench module\n  --fl,--filelist &lt;file/filelist&gt;                     input file or filelist\n  -p,--period &lt;period value&gt;                          clock period\n  --vb,--verbose                                      verbose output\n  --co,--check-output                                 check output\n  --dr,--dryrun                                       do not generate testbench\n  -r,--regen                                          force regeneration of testbench\n  --nd,--nodpi                                        disable dpi generation\n  -h,--help                                           Display available options\n  --std (1800-2017 | 1800-2023 | latest)              The version of the SystemVerilog language to use\n  -I,--include-directory,+incdir &lt;dir-pattern&gt;[,...]  Additional include search paths\n  --isystem &lt;dir-pattern&gt;[,...]                       Additional system include search paths\n  -D,--define-macro,+define &lt;macro&gt;=&lt;value&gt;           Define &lt;macro&gt; to &lt;value&gt; (or 1 if &lt;value&gt; ommitted) in all source files\n  -U,--undefine-macro &lt;macro&gt;                         Undefine macro name at the start of all source files\n  --max-include-depth &lt;depth&gt;                         Maximum depth of nested include files allowed\n  --libraries-inherit-macros                          If true, library files will inherit macro definitions from the primary source files. --single-unit must also be passed when this option is used.\n  --enable-legacy-protect                             If true, the preprocessor will support legacy protected envelope directives, for compatibility with old Verilog tools\n  --cmd-ignore &lt;vendor_cmd&gt;,&lt;N&gt;                       Define rule to ignore vendor command &lt;vendor_cmd&gt; with its following &lt;N&gt; parameters.\n                                                      A command of the form +xyz will also match any vendor command of the form +xyz+abc,\n                                                      as +abc is the command's argument, and doesn't need to be matched.\n  --cmd-rename &lt;vendor_cmd&gt;,&lt;slang_cmd&gt;               Define rule to rename vendor command &lt;vendor_cmd&gt; into existing &lt;slang_cmd&gt;\n  --ignore-directive &lt;directive&gt;                      Ignore preprocessor directive and all its arguments until EOL\n  --max-parse-depth &lt;depth&gt;                           Maximum depth of nested language constructs allowed\n  --max-lexer-errors &lt;count&gt;                          Maximum number of errors that can occur during lexing before the rest of the file is skipped\n  -j,--threads &lt;count&gt;                                The number of threads to use to parallelize parsing\n  -C &lt;file-pattern&gt;[,...]                             One or more files containing independent compilation unit listings. The files accept a subset of options that pertain specifically to parsing that unit and optionally including it in a library.\n  --max-hierarchy-depth &lt;depth&gt;                       Maximum depth of the design hierarchy\n  --max-generate-steps &lt;steps&gt;                        Maximum number of steps that can occur during generate block evaluation before giving up\n  --max-constexpr-depth &lt;depth&gt;                       Maximum depth of a constant evaluation call stack\n  --max-constexpr-steps &lt;steps&gt;                       Maximum number of steps that can occur during constant evaluation before giving up\n  --constexpr-backtrace-limit &lt;limit&gt;                 Maximum number of frames to show when printing a constant evaluation backtrace; the rest will be abbreviated\n  --max-instance-array &lt;limit&gt;                        Maximum number of instances allowed in a single instance array\n  --max-udp-coverage-notes &lt;limit&gt;                    Maximum number of UDP coverage notes that will be generated for a single warning about missing edge transitions\n  --compat vcs                                        Attempt to increase compatibility with the specified tool\n  -T,--timing min|typ|max                             Select which value to consider in min:typ:max expressions\n  --timescale &lt;base&gt;/&lt;precision&gt;                      Default time scale to use for design elements that don't specify one explicitly\n  --allow-use-before-declare                          Don't issue an error for use of names before their declarations\n  --ignore-unknown-modules                            Don't issue an error for instantiations of unknown modules, interface, and programs\n  --relax-enum-conversions                            Allow all integral types to convert implicitly to enum types\n  --relax-string-conversions                          Allow string types to convert implicitly to integral types\n  --allow-hierarchical-const                          Allow hierarchical references in constant expressions\n  --allow-dup-initial-drivers                         Allow signals driven in an always_comb or always_ff block to also be driven by initial blocks\n  --allow-toplevel-iface-ports                        Allow top-level modules to have interface ports\n  --allow-recursive-implicit-call                     Allow implicit call expressions to be recursive function calls\n  --allow-bare-value-param-assigment                  Allow module parameter assignments to elide the parentheses\n  --allow-self-determined-stream-concat               Allow self-determined streaming concatenation expressions\n  --allow-multi-driven-locals                         Allow subroutine local variables to be driven from multiple always_comb/_ff blocks\n  --allow-merging-ansi-ports                          Allow merging ANSI port declarations with nets and variables declared in the instance body\n  --strict-driver-checking                            Perform strict driver checking, which currently means disabling procedural 'for' loop unrolling\n  --lint-only                                         Only perform linting of code, don't try to elaborate a full hierarchy\n  --disable-instance-caching                          Disable the use of instance caching, which normally allows skipping duplicate instance bodies to save time when elaborating\n  --top &lt;name&gt;                                        One or more top-level modules to instantiate (instead of figuring it out automatically)\n  -G &lt;name&gt;=&lt;value&gt;                                   One or more parameter overrides to apply when instantiating top-level modules\n  -L &lt;library&gt;                                        A list of library names that controls the priority order for module lookup\n  --defaultLibName &lt;name&gt;                             Sets the name of the default library\n  -W &lt;warning&gt;                                        Control the specified warning\n  --color-diagnostics                                 Always print diagnostics in color. If this option is unset, colors will be enabled if a color-capable terminal is detected.\n  --diag-column                                       Show column numbers in diagnostic output\n  --diag-location                                     Show location information in diagnostic output\n  --diag-source                                       Show source line or caret info in diagnostic output\n  --diag-option                                       Show option names in diagnostic output\n  --diag-include-stack                                Show include stacks in diagnostic output\n  --diag-macro-expansion                              Show macro expansion backtraces in diagnostic output\n  --diag-hierarchy always|never|auto                  Show hierarchy locations in diagnostic output\n  --diag-json &lt;file&gt;                                  Dump all diagnostics in JSON format to the specified file, or '-' for stdout\n  --error-limit &lt;limit&gt;                               Limit on the number of errors that will be printed. Setting this to zero will disable the limit.\n  --suppress-warnings &lt;file-pattern&gt;[,...]            One or more paths in which to suppress warnings\n  --suppress-macro-warnings &lt;file-pattern&gt;[,...]      One or more paths in which to suppress warnings that originate in macro expansions\n  --single-unit                                       Treat all input files as a single compilation unit\n  -v,--libfile &lt;file-pattern&gt;[,...]                   One or more library files, which are separate compilation units where modules are not automatically instantiated\n  --libmap &lt;file-pattern&gt;[,...]                       One or more library map files to parse for library name mappings and file lists\n  -y,--libdir &lt;dir-pattern&gt;[,...]                     Library search paths, which will be searched for missing modules\n  -Y,--libext &lt;ext&gt;                                   Additional library file extensions to search\n  --exclude-ext &lt;ext&gt;                                 Exclude provided source files with these extensions\n  -f &lt;file-pattern&gt;[,...]                             One or more command files containing additional program options. Paths in the file are considered relative to the current directory.\n  -F &lt;file-pattern&gt;[,...]                             One or more command files containing additional program options. Paths in the file are considered relative to the file itself.\n</code></pre> <p>Testbench \u53ea\u5728 HVL \u573a\u666f\u4e0b\u624d\u9700\u8981\u81ea\u52a8\u751f\u6210\uff0c\u53ef\u4ee5\u5728 xmake.lua \u6587\u4ef6\u4e2d\u901a\u8fc7 <code>add_values(\"cfg.tb_gen_flags\", ...)</code> \u6765\u6dfb\u52a0\u5176\u4ed6\u7684 flags \u53c2\u6570\uff0c\u4f8b\u5982\uff1a</p> <pre><code>add_values(\"cfg.tb_gen_flags\", \"--ignore-unknown-modules\", \"--verbose\")\n</code></pre> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c<code>testbench_gen</code> \u4f1a\u751f\u6210\u4e24\u4e2a\u6587\u4ef6\uff0c\u4e00\u4e2a\u662f <code>tb_top.sv</code>\uff0c\u53e6\u4e00\u4e2a\u662f <code>other.sv</code>\uff0c\u5176\u4e2d <code>tb_top.sv</code> \u662f Testbench \u6587\u4ef6\uff0c<code>other.sv</code> \u662f\u7559\u7ed9\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u6587\u4ef6\u3002\u7528\u6237\u53ef\u4ee5\u5728 <code>others.sv</code> \u4e2d\u81ea\u884c\u6dfb\u52a0\u5176\u4ed6\u7684\u5185\u5bb9\uff0c\u6bcf\u6b21\u91cd\u65b0\u751f\u6210 Testbench \u7684\u65f6\u5019\u5982\u679c <code>others.sv</code> \u5b58\u5728\uff0c\u5c31\u4e0d\u4f1a\u91cd\u65b0\u751f\u6210\u6216\u8005\u8986\u76d6\uff0c\u56e0\u6b64\u7528\u6237\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u5176\u4e2d\u6dfb\u52a0\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u5185\u5bb9\u3002 \u90e8\u5206\u5185\u5bb9\u5982\u4e0b\uff08\u5047\u8bbe DUT \u4e3a <code>Design</code>\uff09\uff1a</p> <p>Note</p> <p>\u6211\u4eec\u4e4b\u524d\u5728\u8fd9\u91cc\u7b80\u5355\u4ecb\u7ecd\u8fc7\u76f8\u5173\u7684\u5185\u5bb9\u3002</p> tb_top.sv<pre><code>// -----------------------------------------\n// user custom code\n//    use `--custom-code-outer/-cco &lt;file&gt;` to pass in the custom code file.\n//       |_ e.g. `testbench_gen [...] --custom-code-outer path/to/file`\n//    use `--custom-code-str-outer/-ccso &lt;string&gt;` to pass in the custom code string.\n//       |_ e.g. `testbench_gen [...] --custom-code-str-outer \"`define a 1\"`\n// -----------------------------------------\n\n\nmodule tb_top;\n// ...\n\nreg clock;\nreg reset;\n\ninitial begin\n    clock = 0;\n    reset = 1;\nend\n\nalways #10 clock = ~clock;\n\n// ...\n\n// -----------------------------------------\n// reg/wire declaration\n// -----------------------------------------  \nreg                  inc          ; // Input\nreg[7:0]             test         ; // Input\nwire[7:0]            value        ; // Output\n\n// ...\n\n// -----------------------------------------\n//  DUT module instantiate\n// ----------------------------------------- \nDesign u_Design (\n    .clock   (clock  ), // direction: In         dataType: logic\n    .reset   (reset  ), // direction: In         dataType: logic\n    .inc     (inc    ), // direction: In         dataType: logic\n    .test    (test   ), // direction: In         dataType: reg[7:0]\n    .value   (value  )  // direction: Out        dataType: logic[7:0\n); // u_Design\n\n// ...\n\n// -----------------------------------------\n// other user code...\n// -----------------------------------------\nOthers u_others(\n  .clock(clock),\n  .reset(reset)\n);\n\n// -----------------------------------------\n// user custom code \n//    use `--custom-code/-cc &lt;file&gt;` to pass in the custom code file.\n//       |_ e.g. `testbench_gen [...] --custom-code path/to/file`\n//    use `--custom-code-str/-ccs &lt;string&gt;` to pass in the custom code string.\n//       |_ e.g. `testbench_gen [...] --custom-code-str \"reg a; initial a = 1;\"`\n// -----------------------------------------\n\n\nendmodule\n</code></pre> other.sv<pre><code>module Others (\n    input wire clock,\n    input wire reset\n);\n\n// -----------------------------------------\n// other user code...\n// -----------------------------------------\n// ...\n\nendmodule\n</code></pre>"},{"location":"reference/xmake_params/","title":"xmake \u7684\u914d\u7f6e\u53c2\u6570","text":"<p>Verilua \u7684 HVL/WAL \u573a\u666f\u4e0b\u7684\u5de5\u7a0b\u7ba1\u7406\u4f7f\u7528\u7684\u662f xmake\uff0c\u56e0\u6b64\u5728 xmake \u4e2d\u652f\u6301\u591a\u79cd\u53ef\u914d\u7f6e\u7684\u53c2\u6570\uff0c\u4e0b\u9762\u5c06\u5bf9\u5176\u8fdb\u884c\u8bf4\u660e\u3002</p> <p>\u7528\u6237\u53ef\u4ee5\u4f7f\u7528 xmake \u6765\u7f16\u5199\u7075\u6d3b\u591a\u6837\u7684 xmake.lua \u6587\u4ef6\u6765\u6784\u5efa\u5de5\u7a0b\uff0c\u5177\u4f53\u53ef\u4ee5\u53c2\u8003 xmake \u5b98\u65b9\u6587\u6863</p>"},{"location":"reference/xmake_params/#_1","title":"\u5fc5\u8981\u53c2\u6570","text":"<p>\u5fc5\u8981\u53c2\u6570\u4e3a\u5fc5\u987b\u5728 xmake.lua \u4e2d\u5bf9\u5e94\u7684 target \u6dfb\u52a0\u7684\uff0c\u5426\u5219\u8fdb\u884c\u7f16\u8bd1\u7684\u65f6\u5019\u4f1a\u62a5\u9519\u3002</p> <ol> <li> <p><code>add_rules(\"verilua\")</code></p> <p>\u5bf9\u4e8e\u6240\u6709\u7684 HVL/WAL \u573a\u666f\u4e0b\u7684\u5de5\u7a0b\uff0c\u90fd\u9700\u8981\u5728 xmake \u7684 target \u4e2d\u6dfb\u52a0\u8fd9\u4e00\u53e5\u914d\u7f6e\uff0c\u5426\u5219\u8bb2\u65e0\u6cd5\u6b63\u5e38\u4f7f\u7528 Verilua\u3002</p> </li> <li> <p><code>add_toolchains(&lt;toolchain&gt;)</code></p> <p>\u6dfb\u52a0\u5177\u4f53\u7684\u4eff\u771f\u5668\uff08Verilua \u4e2d\u79f0\u4e3a\u4eff\u771f\u540e\u7aef\uff08Backend\uff09\uff09\u3002</p> <ul> <li>\u5bf9\u4e8e HVL \u573a\u666f\uff0c\u76ee\u524d <code>&lt;toolchain&gt;</code> \u7684\u53ef\u9009\u503c\u4e3a <code>@verilator</code>\u3001<code>@iverilog</code>\u3001<code>@vcs</code>\uff0c\u5206\u522b\u5bf9\u5e94\u4e86\u5f00\u6e90\u7684 Verilator\u3001\u5f00\u6e90\u7684 Icarus Verilog\u3001\u5546\u4e1a\u7684 Synopsys VCS \u7b49\u4eff\u771f\u5668\u3002</li> <li>\u5bf9\u4e8e WAL \u573a\u666f\uff0c\u76ee\u524d <code>&lt;toolchain&gt;</code> \u7684\u53ef\u9009\u503c\u4e3a <code>@wave_vpi</code>\uff0c<code>wave_vpi</code> \u662f Verilua \u5f00\u53d1\u7684\u4e00\u4e2a\u7528\u4e8e\u4eff\u771f\u6ce2\u5f62\u7684\u4eff\u771f\u540e\u7aef\uff0c\u76ee\u524d\u652f\u6301\u7684\u6ce2\u5f62\u683c\u5f0f\u4e3a: VCD\u3001FST\u3001FSDB\u3002</li> </ul> </li> <li> <p><code>add_files(...)</code></p> <p>\u6dfb\u52a0\u9700\u8981\u8fdb\u884c\u4eff\u771f\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u540c\u65f6\u6dfb\u52a0\u591a\u4e2a\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5206\u4e3a\u591a\u4e2a\u8bed\u53e5\u6765\u6dfb\u52a0\u591a\u4e2a\u6587\u4ef6\u3002</p> <ul> <li>\u5bf9\u4e8e HVL \u573a\u666f\uff0c\u53ef\u4ee5\u662f Verilog/SystemVerilog \u6587\u4ef6\u3001Lua \u6587\u4ef6\u3002     xmake.lua<pre><code>target(\"test\")\n    add_rules(\"verilua\")\n    add_toolchains(\"@verilator\")\n    add_files(\"src/main.sv\", \"src/main.lua\")\n    add_files(\"src/other.v\")\n\n    -- ...\n</code></pre></li> <li> <p>\u5bf9\u4e8e WAL \u573a\u666f\uff0c\u53ef\u4ee5\u662f\u6ce2\u5f62\u6587\u4ef6\u3001Lua\u6587\u4ef6\u3002     xmake.lua<pre><code>target(\"test\")\n    add_rules(\"verilua\")\n    add_toolchains(\"@wave_vpi\")\n    add_files(\"./test.vcd\", \"test.lua\")\n\n    -- ...\n</code></pre></p> <p>\u6b64\u65f6 <code>add_files</code> \u53ea\u80fd\u6dfb\u52a0\u4e00\u4e2a\u6ce2\u5f62\u6587\u4ef6</p> </li> </ul> </li> <li> <p><code>set_values(\"cfg.top\", &lt;top module name&gt;)</code></p> <p></p> <p>\u8bbe\u7f6e\u6b64\u65f6\u7684\u9876\u5c42 DUT \u7684\u6a21\u5757\u540d\u79f0\uff0c\u5bf9\u4e8e HVL/WAL \u573a\u666f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u8bbe\u7f6e\uff0c\u4f8b\u5982\u5728\u8fd9\u4e2a\u4f8b\u5b50 \u4e2d\u6211\u4eec\u9876\u5c42 DUT \u6a21\u5757\u7684\u540d\u79f0\u662f <code>Design</code>\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fd9\u4e48\u8bbe\u7f6e\uff1a<code>set_values(\"cfg.top\", \"Design\")</code>\u3002</p> </li> <li> <p><code>set_values(\"cfg.lua_main\", &lt;lua main file&gt;)</code></p> <p>\u8bbe\u7f6e\u4eff\u771f\u65f6\u5019\u6267\u884c\u7684 lua \u4e3b\u811a\u672c\u6587\u4ef6\uff0c\u5bf9\u4e8e HVL/WAL \u573a\u666f\uff0c\u8fd9\u4e2a\u53c2\u6570\u5fc5\u987b\u8bbe\u7f6e\uff0c\u4f8b\u5982\u5728\u8fd9\u4e2a\u4f8b\u5b50 \u4e2d\u6211\u4eec\u7684 lua \u4e3b\u811a\u672c\u6587\u4ef6\u662f <code>LuaMain.lua</code>\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fd9\u4e48\u8bbe\u7f6e\uff1a<code>set_values(\"cfg.lua_main\", \"LuaMain.lua\")</code>\u3002</p> <p><code>&lt;lua main file&gt;</code> \u662f\u4e00\u4e2a\u5177\u4f53\u7684\u6587\u4ef6\uff0c\u53ef\u4ee5\u5305\u542b\u8def\u5f84\u3002</p> </li> </ol>"},{"location":"reference/xmake_params/#_2","title":"\u53ef\u9009\u53c2\u6570","text":"<ol> <li> <p><code>set_values(\"cfg.user_cfg\", &lt;user cfg file&gt;)</code></p> <p>\u8bbe\u7f6e\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u662f\u4e00\u4e2a Lua \u811a\u672c\uff0c\u683c\u5f0f\u5982\u4e0b\u6240\u793a\uff1a</p> my_cfg.lua<pre><code>local cfg = {}\n\ncfg.value1 = 123\ncfg.value2 = \"hello\"\n\nreturn cfg\n</code></pre> <p>\u91cd\u70b9\u5728\u4e8e\u8fd9\u4e2a Lua \u811a\u672c\u8981\u8fd4\u56de\u4e00\u4e2a key-value \u683c\u5f0f\u7684 table\u3002</p> <p>\u5f53\u7528\u6237\u5728 xmake.lua \u4e2d\u8bbe\u7f6e\u4e86\u8fd9\u4e2a\u914d\u7f6e\u6587\u4ef6\u7684\u65f6\u5019\uff08<code>set_values(\"cfg.user_cfg\", \"my_cfg.lua\")</code>\uff09\uff0c\u90a3\u4e48\u5728\u4eff\u771f\u8fdb\u884c\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u901a\u8fc7\u5168\u5c40\u53d8\u91cf <code>cfg</code> \u83b7\u53d6\u5230\u8fd9\u4e2a table \u4e2d\u7684\u503c\uff0c\u4f8b\u5982\uff1a</p> main.lua<pre><code>fork {\n    function ()\n        print(\"cfg.value1 =&gt; \", cfg.value1)\n        print(\"cfg.value2 =&gt; \", cfg.value2)\n\n        assert(cfg.value1 == 123)\n        assert(cfg.value2 == \"hello\")\n    end\n}\n</code></pre> </li> <li> <p><code>set_values(\"cfg.tb_gen_flags\", &lt;flags for testbench_gen&gt;)</code> / <code>add_values(\"cfg.tb_gen_flags\", \"&lt;flags for testbench_gen&gt;\")</code></p> <p>\u8bbe\u7f6e\u9700\u8981\u4f20\u9012\u7ed9 <code>testbench_gen</code> \u7684\u989d\u5916\u53c2\u6570\uff0c\u5177\u4f53\u652f\u6301\u7684 flags \u53ef\u4ee5\u53c2\u8003 \u8fd9\u91cc \u7684\u4ecb\u7ecd\u3002</p> <p>xmake \u4e2d <code>set_values</code> \u548c <code>add_values</code> \u7684\u533a\u522b</p> <ul> <li><code>set_values(&lt;key&gt;, &lt;value&gt;)</code> \u5bf9 <code>&lt;key&gt;</code> \u8fdb\u884c\u5355\u6b21\u8d4b\u503c\uff0c\u8c03\u7528\u591a\u6b21 <code>set_values</code> \u65f6\uff0c\u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u503c\uff0c\u4e00\u4e2a <code>set_values</code> \u53ea\u80fd\u6709\u4e00\u4e2a <code>&lt;value&gt;</code>\uff1b      <pre><code>set_values(\"key\", \"value1\") -- \"key\" = \"value1\" \nset_values(\"key\", \"value2\") -- \"key\" = \"value2\", the previous value \"value1\" is overwritten\n</code></pre></li> <li><code>add_values(&lt;key&gt;, &lt;value&gt; ...)</code> \u5bf9 <code>&lt;key&gt;</code> \u8fdb\u884c\u591a\u6b21\u8d4b\u503c\uff0c\u8c03\u7528\u591a\u6b21 <code>add_values</code> \u65f6\uff0c\u4f1a\u5408\u5e76\u4e4b\u524d\u7684\u503c\uff0c\u4e00\u4e2a <code>add_values</code> \u53ef\u4ee5\u6709\u591a\u4e2a <code>&lt;value&gt;</code>\u3002     <pre><code>add_values(\"key\", \"value1\") -- \"key\" = \"value1\" \nadd_values(\"key\", \"value2\") -- \"key\" = {\"value1\", \"value2\"}, the previous value \"value1\" is merged\n\n-- equivalent to\n\nset_values(\"key\", \"value1\", \"value2\")\n</code></pre></li> <li>\u4e5f\u53ef\u4ee5\u53c2\u8003 xmake \u6587\u6863\u4e2d\u6b64\u5904\u7684\u8bf4\u660e\u3002 </li> </ul> </li> <li> <p><code>set_values(\"&lt;sim&gt;.flags\", &lt;flags used in compilation&gt;)</code> / <code>add_values(\"&lt;sim&gt;.flags\", \"&lt;flags used in compilation&gt;\")</code></p> <p>\u7528\u6765\u6dfb\u52a0\u9700\u8981\u4f20\u9012\u7ed9\u4eff\u771f\u5668\u8fdb\u884c\u7f16\u8bd1\u7684\u989d\u5916\u53c2\u6570\uff0c\u5177\u4f53\u652f\u6301\u7684 flags \u53ef\u4ee5\u4e0e\u4f7f\u7528\u7684\u4eff\u771f\u5668\u76f8\u5173\u3002</p> <p>\u6ce8\u610f</p> <ul> <li>\u5bf9\u4e8e HVL \u573a\u666f\uff0c\u76ee\u524d <code>&lt;sim&gt;</code> \u53ef\u9009\u503c\u4e3a <code>verilator</code>\u3001<code>iverilog</code>\u3001<code>vcs</code>\u3002</li> <li>\u5bf9\u4e8e WAL \u573a\u666f\uff0c\u8fd9\u4e00\u8bbe\u7f6e\u4e0d\u8d77\u4f5c\u7528\u3002</li> </ul> </li> <li> <p><code>set_values(\"&lt;sim&gt;.run_flags\", &lt;flags used at runtime&gt;)</code> / <code>add_values(\"&lt;sim&gt;.run_flags\", \"&lt;flags used at runtime&gt;\")</code></p> <p>\u7528\u6765\u6dfb\u52a0\u9700\u8981\u4f20\u9012\u7ed9\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fd0\u884c\u65f6\u7684\u989d\u5916\u53c2\u6570\u3002\u4f8b\u5982 Verilator \u7f16\u8bd1\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u901a\u5e38\u53eb <code>Vtb_top</code>\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 <code>set_values(\"verilator.run_flags\", \"--help\")</code> \u6765\u6dfb\u52a0\u4e00\u4e2a\u8fd0\u884c\u65f6\u53c2\u6570\uff0c\u8fd9\u6837\u5728 xmake \u6267\u884c run \u7684\u65f6\u5019\u5c31\u4f1a\u52a0\u4e0a\u8fd9\u4e2a\u53c2\u6570\u3002\u8fd0\u884c\u4eff\u771f\u7684\u65f6\u5019\u7b49\u4ef7\u4e8e <code>Vtb_top --help</code>\u3002</p> <p>\u6ce8\u610f</p> <ul> <li>\u5bf9\u4e8e HVL \u573a\u666f\uff0c\u76ee\u524d <code>&lt;sim&gt;</code> \u53ef\u9009\u503c\u4e3a <code>verilator</code>\u3001<code>iverilog</code>\u3001<code>vcs</code>\u3002</li> <li>\u5bf9\u4e8e WAL \u573a\u666f\uff0c\u8fd9\u4e00\u8bbe\u7f6e\u4e0d\u8d77\u4f5c\u7528\u3002</li> </ul> </li> <li> <p><code>set_values(\"&lt;sim&gt;.run_prefix\", &lt;prefix flags used at runtime&gt;)</code> / <code>add_values(\"&lt;sim&gt;.run_prefix\", \"&lt;prefix flags used at runtime&gt;\")</code></p> <p>\u7528\u6765\u6dfb\u52a0\u9700\u8981\u4f20\u9012\u7ed9\u7f16\u8bd1\u540e\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u8fd0\u884c\u65f6\u7684\u989d\u5916\u524d\u7f00\u53c2\u6570\u3002\u4f8b\u5982 Verilator \u7f16\u8bd1\u5f97\u5230\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\u901a\u5e38\u53eb <code>Vtb_top</code>\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528 <code>set_values(\"verilator.run_prefix\", \"gdb --args\")</code> \u6765\u6dfb\u52a0\u4e00\u4e2a\u8fd0\u884c\u65f6\u524d\u7f00\u53c2\u6570\uff0c\u8fd9\u6837\u5728 xmake \u6267\u884c run \u7684\u65f6\u5019\u5c31\u4f1a\u52a0\u4e0a\u8fd9\u4e2a\u53c2\u6570\u3002\u8fd0\u884c\u4eff\u771f\u7684\u65f6\u5019\u7b49\u4ef7\u4e8e <code>gdb --args Vtb_top</code>\u3002</p> <p>\u6ce8\u610f</p> <ul> <li>\u5bf9\u4e8e HVL \u573a\u666f\uff0c\u76ee\u524d <code>&lt;sim&gt;</code> \u53ef\u9009\u503c\u4e3a <code>verilator</code>\u3001<code>iverilog</code>\u3001<code>vcs</code>\u3002</li> <li>\u5bf9\u4e8e WAL \u573a\u666f\uff0c\u8fd9\u4e00\u8bbe\u7f6e\u4e0d\u8d77\u4f5c\u7528\u3002</li> </ul> <p><code>run_prefix</code> \u548c <code>run_flags</code> \u7684\u4f4d\u7f6e\u533a\u522b</p> <p><code>&lt;run_prefix&gt; &lt;binary&gt; &lt;run_flags&gt;</code></p> </li> <li> <p><code>set_values(\"cfg.build_dir_name\", &lt;build directory name&gt;)</code></p> <p>\u8bbe\u7f6e\u6784\u5efa\u76ee\u5f55\u7684\u540d\u79f0\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\uff0c\u9ed8\u8ba4\u4e3a <code>set_values(\"cfg.top\", &lt;top module name&gt;)</code> \u7684\u503c\u3002</p> <p>\u6784\u5efa\u76ee\u5f55\u751f\u6210\u7684\u4f4d\u7f6e</p> <p>\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e3a\uff1a<code>./build/&lt;simulator&gt;/&lt;top module name&gt;</code>\uff0c\u5982\u679c\u4f7f\u7528\u4e86 <code>set_values(\"cfg.build_dir_name\", \"SomeName\")</code>\uff0c\u90a3\u4e48\u4f1a\u4f7f\u7528\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u540d\u79f0\uff1a<code>./build/&lt;simulator&gt;/SomeName</code>\u3002\u4e0d\u8fc7\u8bf7\u6ce8\u610f\uff0c<code>./build/&lt;simulator&gt;</code> \u662f\u5fc5\u987b\u5b58\u5728\u7684\uff0c\u4e0d\u652f\u6301\u66f4\u6539\u3002</p> </li> </ol>"}]}