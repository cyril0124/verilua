---@diagnostic disable: need-check-nil
local os = require "os"
local scheduler = require "verilua.scheduler.LuaScheduler"

local type = type
local print = print
local assert = assert
local ipairs = ipairs
local table_insert = table.insert

local verilua_info = _G.verilua_info
local verilua_warning = _G.verilua_warning

local verilua_hello = function()
	-- Generated by: http://www.patorjk.com/software/taag
	local hello = [[
____   ____                .__ .__
\   \ /   /  ____  _______ |__||  |   __ __ _____
 \   Y   / _/ __ \ \_  __ \|  ||  |  |  |  \\__  \
  \     /  \  ___/  |  | \/|  ||  |__|  |  / / __ \_
   \___/    \___  > |__|   |__||____/|____/ (____  /
                \/                               \/
]]
	io.write("\27[36m") -- CYAN
	print(hello, "\27[0m")
	io.flush()
end

--- `VeriluaCore` is a singleton object that manages the simulation process of Verilua
---@class verilua.VeriluaCore
---@field private start_time number Start time of the simulation
---@field private end_time number End time of the simulation
---@field private start_callback_vec table<integer, fun()>
---@field private finish_callback_vec table<integer, fun()|fun(VERILUA_GOT_ERROR: boolean)>
---@field append_start_callback fun(func: fun())
---@field append_finish_callback fun(func: fun()|fun(VERILUA_GOT_ERROR: boolean))
---@field register_start_callback fun(func: fun()) Alias of `append_start_callback`
---@field register_finish_callback fun(func: fun()|fun(VERILUA_GOT_ERROR: boolean)) Alias of `append_finish_callback`
---@field start_callback fun()
---@field finish_callback fun()
local verilua = {
	start_time = 0.0,
	end_time = 0.0,
	start_callback_vec = {},
	finish_callback_vec = {}
}

verilua.start_callback = function()
	verilua_hello()
	verilua_info("╔══════════════════════════════════════════════════╗")
	verilua_info("║          [Verilua] Initialization Start          ║")
	verilua_info("╚══════════════════════════════════════════════════╝")
	verilua.start_time = os.clock()

	-- Call user defined start callbacks
	if #verilua.start_callback_vec == 0 then
		verilua_warning("[start_callback] Not implemented!")
	else
		for _, callback_func in ipairs(verilua.start_callback_vec) do
			callback_func()
		end
	end

	verilua_info("[Verilua] Initialization sequence finished.")

	scheduler:schedule_all_tasks()
end

verilua.finish_callback = function()
	print()
	verilua_info("╔══════════════════════════════════════════════════╗")
	verilua_info("║          [Verilua] Finalization Start            ║")
	verilua_info("╚══════════════════════════════════════════════════╝")
	scheduler:list_tasks()

	-- Automatically save default coverage group into json file
	if _G.default_cg and #_G.default_cg.cover_points > 0 then
		_G.default_cg:report()
		_G.default_cg:try_save_once()
	end

	-- User defined finish callbacks
	if #verilua.finish_callback_vec == 0 then
		verilua_warning("[finish_callback] Not implemented!")
	else
		-- Set by the scheduler when there is an error while executing a task
		local VERILUA_GOT_ERROR = _G.VERILUA_GOT_ERROR
		for _, callback_func in ipairs(verilua.finish_callback_vec) do
			callback_func(VERILUA_GOT_ERROR)
		end
	end

	verilua.end_time = os.clock()

	local elapsed_time = verilua.end_time - verilua.start_time
	verilua_info("====================================================")
	verilua_info(string.format("   Simulation Finished! Elapsed time: %.4f sec", elapsed_time))
	verilua_info("====================================================")
	print()
end

function verilua.register_start_callback(func)
	assert(type(func) == "function")
	table_insert(verilua.start_callback_vec, func)
end

function verilua.register_finish_callback(func)
	assert(type(func) == "function")
	table_insert(verilua.finish_callback_vec, func)
end

verilua.append_start_callback = verilua.register_start_callback
verilua.append_finish_callback = verilua.register_finish_callback

_G.verilua_init = function()
	verilua.start_callback()
end

_G.schedule_all_tasks = function()
	scheduler:schedule_all_tasks()
end

_G.finish_callback = function()
	verilua.finish_callback()
end

_G.sim_event = function(id)
	scheduler:schedule_task(id)
end

_G.lua_main_step = function()
	scheduler:schedule_all_tasks()
end

_G.lua_posedge_step = function()
	scheduler:schedule_posedge_tasks()
end

_G.lua_negedge_step = function()
	scheduler:schedule_negedge_tasks()
end

_G.sim_event_chunk_1 = function(task_id_1)
	scheduler:schedule_task(task_id_1)
end

_G.sim_event_chunk_2 = function(task_id_1, task_id_2)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
end

_G.sim_event_chunk_3 = function(task_id_1, task_id_2, task_id_3)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
end

_G.sim_event_chunk_4 = function(task_id_1, task_id_2, task_id_3, task_id_4)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
end

_G.sim_event_chunk_5 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
end

_G.sim_event_chunk_6 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
end

_G.sim_event_chunk_7 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
end

_G.sim_event_chunk_8 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
end

_G.sim_event_chunk_9 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								task_id_9)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
end

_G.sim_event_chunk_10 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
end

_G.sim_event_chunk_11 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10, task_id_11)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
	scheduler:schedule_task(task_id_11)
end

_G.sim_event_chunk_12 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10, task_id_11, task_id_12)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
	scheduler:schedule_task(task_id_11)
	scheduler:schedule_task(task_id_12)
end

_G.sim_event_chunk_13 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10, task_id_11, task_id_12, task_id_13)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
	scheduler:schedule_task(task_id_11)
	scheduler:schedule_task(task_id_12)
	scheduler:schedule_task(task_id_13)
end

_G.sim_event_chunk_14 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10, task_id_11, task_id_12, task_id_13, task_id_14)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
	scheduler:schedule_task(task_id_11)
	scheduler:schedule_task(task_id_12)
	scheduler:schedule_task(task_id_13)
	scheduler:schedule_task(task_id_14)
end

_G.sim_event_chunk_15 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10, task_id_11, task_id_12, task_id_13, task_id_14, task_id_15)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
	scheduler:schedule_task(task_id_11)
	scheduler:schedule_task(task_id_12)
	scheduler:schedule_task(task_id_13)
	scheduler:schedule_task(task_id_14)
	scheduler:schedule_task(task_id_15)
end

_G.sim_event_chunk_16 = function(task_id_1, task_id_2, task_id_3, task_id_4, task_id_5, task_id_6, task_id_7, task_id_8,
								 task_id_9, task_id_10, task_id_11, task_id_12, task_id_13, task_id_14, task_id_15,
								 task_id_16)
	scheduler:schedule_task(task_id_1)
	scheduler:schedule_task(task_id_2)
	scheduler:schedule_task(task_id_3)
	scheduler:schedule_task(task_id_4)
	scheduler:schedule_task(task_id_5)
	scheduler:schedule_task(task_id_6)
	scheduler:schedule_task(task_id_7)
	scheduler:schedule_task(task_id_8)
	scheduler:schedule_task(task_id_9)
	scheduler:schedule_task(task_id_10)
	scheduler:schedule_task(task_id_11)
	scheduler:schedule_task(task_id_12)
	scheduler:schedule_task(task_id_13)
	scheduler:schedule_task(task_id_14)
	scheduler:schedule_task(task_id_15)
	scheduler:schedule_task(task_id_16)
end


return verilua
