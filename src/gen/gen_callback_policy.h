
    // -------------------------------------------------------------------
    // Auto generated by `gen_register_edge_callback.py`
    // -------------------------------------------------------------------

for(const auto& pair : env.pending_posedge_cb_map) {
    vpiHandle handle = pair.first;
    const std::vector<TaskID>& task_id_vec = pair.second;

    auto idx = 0;
    auto task_id_size = task_id_vec.size();
    while(task_id_size > 0) {
        if(task_id_size >= 8) {
            register_edge_callback8(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5], task_id_vec[idx + 6], task_id_vec[idx + 7],  EdgeType::POSEDGE);
            idx += 8;
            task_id_size -= 8;
        } else if(task_id_size >= 7) {
            register_edge_callback7(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5], task_id_vec[idx + 6],  EdgeType::POSEDGE);
            idx += 7;
            task_id_size -= 7;
        } else if(task_id_size >= 6) {
            register_edge_callback6(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5],  EdgeType::POSEDGE);
            idx += 6;
            task_id_size -= 6;
        } else if(task_id_size >= 5) {
            register_edge_callback5(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4],  EdgeType::POSEDGE);
            idx += 5;
            task_id_size -= 5;
        } else if(task_id_size >= 4) {
            register_edge_callback4(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3],  EdgeType::POSEDGE);
            idx += 4;
            task_id_size -= 4;
        } else if(task_id_size >= 3) {
            register_edge_callback3(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2],  EdgeType::POSEDGE);
            idx += 3;
            task_id_size -= 3;
        } else if(task_id_size >= 2) {
            register_edge_callback2(handle, task_id_vec[idx + 0], task_id_vec[idx + 1],  EdgeType::POSEDGE);
            idx += 2;
            task_id_size -= 2;
        } else {
            register_edge_callback(handle, task_id_vec[idx], EdgeType::POSEDGE);
            idx += 1;
            task_id_size -= 1;
        }
    }
}
for(const auto& pair : env.pending_negedge_cb_map) {
    vpiHandle handle = pair.first;
    const std::vector<TaskID>& task_id_vec = pair.second;

    auto idx = 0;
    auto task_id_size = task_id_vec.size();
    while(task_id_size > 0) {
        if(task_id_size >= 8) {
            register_edge_callback8(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5], task_id_vec[idx + 6], task_id_vec[idx + 7],  EdgeType::NEGEDGE);
            idx += 8;
            task_id_size -= 8;
        } else if(task_id_size >= 7) {
            register_edge_callback7(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5], task_id_vec[idx + 6],  EdgeType::NEGEDGE);
            idx += 7;
            task_id_size -= 7;
        } else if(task_id_size >= 6) {
            register_edge_callback6(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5],  EdgeType::NEGEDGE);
            idx += 6;
            task_id_size -= 6;
        } else if(task_id_size >= 5) {
            register_edge_callback5(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4],  EdgeType::NEGEDGE);
            idx += 5;
            task_id_size -= 5;
        } else if(task_id_size >= 4) {
            register_edge_callback4(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3],  EdgeType::NEGEDGE);
            idx += 4;
            task_id_size -= 4;
        } else if(task_id_size >= 3) {
            register_edge_callback3(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2],  EdgeType::NEGEDGE);
            idx += 3;
            task_id_size -= 3;
        } else if(task_id_size >= 2) {
            register_edge_callback2(handle, task_id_vec[idx + 0], task_id_vec[idx + 1],  EdgeType::NEGEDGE);
            idx += 2;
            task_id_size -= 2;
        } else {
            register_edge_callback(handle, task_id_vec[idx], EdgeType::NEGEDGE);
            idx += 1;
            task_id_size -= 1;
        }
    }
}
for(const auto& pair : env.pending_edge_cb_map) {
    vpiHandle handle = pair.first;
    const std::vector<TaskID>& task_id_vec = pair.second;

    auto idx = 0;
    auto task_id_size = task_id_vec.size();
    while(task_id_size > 0) {
        if(task_id_size >= 8) {
            register_edge_callback8(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5], task_id_vec[idx + 6], task_id_vec[idx + 7],  EdgeType::EDGE);
            idx += 8;
            task_id_size -= 8;
        } else if(task_id_size >= 7) {
            register_edge_callback7(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5], task_id_vec[idx + 6],  EdgeType::EDGE);
            idx += 7;
            task_id_size -= 7;
        } else if(task_id_size >= 6) {
            register_edge_callback6(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4], task_id_vec[idx + 5],  EdgeType::EDGE);
            idx += 6;
            task_id_size -= 6;
        } else if(task_id_size >= 5) {
            register_edge_callback5(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3], task_id_vec[idx + 4],  EdgeType::EDGE);
            idx += 5;
            task_id_size -= 5;
        } else if(task_id_size >= 4) {
            register_edge_callback4(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2], task_id_vec[idx + 3],  EdgeType::EDGE);
            idx += 4;
            task_id_size -= 4;
        } else if(task_id_size >= 3) {
            register_edge_callback3(handle, task_id_vec[idx + 0], task_id_vec[idx + 1], task_id_vec[idx + 2],  EdgeType::EDGE);
            idx += 3;
            task_id_size -= 3;
        } else if(task_id_size >= 2) {
            register_edge_callback2(handle, task_id_vec[idx + 0], task_id_vec[idx + 1],  EdgeType::EDGE);
            idx += 2;
            task_id_size -= 2;
        } else {
            register_edge_callback(handle, task_id_vec[idx], EdgeType::EDGE);
            idx += 1;
            task_id_size -= 1;
        }
    }
}