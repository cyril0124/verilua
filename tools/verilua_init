#!python3

import argparse
import subprocess
import os

parser = argparse.ArgumentParser(description='A script used for creating a verilua project.')
parser.add_argument('--top', '-t', dest="top", type=str, help='top module name')
parser.add_argument('--file', '-f', dest="file", type=str, help='input verilog file')
parser.add_argument('--dir', '-d', dest="dir", type=str, help='output dir')
parser.add_argument('--period', '-p', dest="period", type=int, help='clock period')
parser.add_argument('--tbtop', dest="tbtop", type=str, help='testbench top level name')
parser.add_argument('--dsignals', '-ds', dest="dsignals", type=str, help='signal patterns (a pattern file) indicated which signal should be ignore while generate port interface functions')
parser.add_argument('--nodpi', '-nd', dest="nodpi", action='store_true', help='whether generate DPI-C port interface functions or not')
parser.add_argument('--verbose', '-v', dest="verbose", action='store_true', help='verbose')

if os.environ["VERILUA_HOME"] != None:
    print(f"$VERILUA_HOME is set to {os.environ["VERILUA_HOME"]}")
else:
    assert False, "$VERILUA_HOME env var is not set!"

if os.path.exists("./dut") and \
    os.path.exists("./dut/rtl") and \
    os.path.exists("./src/lua/main") and \
    os.path.exists("./tmp"):
    print("verilua project already init!")
    exit(0)

args = parser.parse_args()

design_file = args.file
assert design_file != None, "you should use <--file> to point out the design file"
assert os.path.isfile(design_file), "input verilog file is not exist"

tb_gen_opt = f"--file {args.file}"
if args.top != None:
    tb_gen_opt = tb_gen_opt + f" --top {args.top}"
if args.dir != None:
    tb_gen_opt = tb_gen_opt + f" --dir {args.dir}"
if args.period != None:
    tb_gen_opt = tb_gen_opt + f" --dir {args.period}"
if args.tbtop != None:
    tb_gen_opt = tb_gen_opt + f" --tbtop {args.tbtop}"
if args.dsignals != None:
    tb_gen_opt = tb_gen_opt + f" -ds {args.dsignals}"
if args.nodpi == True:
    tb_gen_opt = tb_gen_opt + f" -nd"
if args.verbose == True:
    tb_gen_opt = tb_gen_opt + f" -v"

ret = subprocess.run(f"python3 $VERILUA_HOME/scripts/testbench_gen.py {tb_gen_opt}", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
if ret.returncode != 0:
    print(f"Command failed with return code {ret.returncode}")
    print(ret.stderr.decode('utf-8'))
    assert False

if not os.path.exists("./dut"):
    os.makedirs("./dut")

if not os.path.exists("./dut/rtl"):
    os.makedirs("./dut/rtl")
    
if not os.path.exists("./src/lua/main"):
    os.makedirs("./src/lua/main")

if not os.path.exists("./tmp"):
    os.makedirs("./tmp")
    
subprocess.run(f"mv {design_file} ./dut/rtl", shell=True)
subprocess.run(f"mv ./*.sv ./dut", shell=True)

subprocess.run("cp $VERILUA_HOME/src/lua/main/LuaMainTemplate.lua ./src/lua/main/LuaMain.lua", shell=True)
subprocess.run("cp $VERILUA_HOME/scripts/makefiles/* .", shell=True)
subprocess.run("cp $VERILUA_HOME/scripts/setvars.sh .", shell=True)




